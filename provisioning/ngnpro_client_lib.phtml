<?

/*
    Copyright (c) 2007 AG Projects
    http://ag-projects.com
    Author Adrian Georgescu

    This client library provide the functions for managing SIP accounts,
    ENUM ranges, ENUM numbers, Trusted Peers, LCR, Rating plans
    on a remote NGN-Pro server

    // Usage example

    // login using your favorite php session management and read data from login application
    
    if ($adminonly) {
        $loginCredentials=array(
                                'loginType'          => 'admin',
                                'reseller'           => $reseller,
                                'customer'           => $customer,
                                'extraFormElements'  => array()
                                );
    } else {
        $loginCredentials=array(
                                'loginType'          => 'reseller',
                                'soapUsername'       => $soapUsername,
                                'soapPassword'       => $soapPassword,
                                'reseller'           => $reseller,
                                'customer'           => $customer,
                                'extraFormElements'  => array()
                                );
    
    }
    
    require_once("provisioning/ngnpro_soap_library.phtml");
    require_once("provisioning/ngnpro_client_lib.phtml");
    include_once("provisioning/ngnpro_engines.inc");

    $extraFormElements=array();
    
    ////////////////////////////////
    // How to create a SIP record //
    ////////////////////////////////
    
    $sipEngine           = 'sip_accounts@engine';
    $this->SipSOAPEngine = new SOAPEngine($sipEngine,$soapEngines,$loginCredentials);
    $_sip_class          = $this->SipSOAPEngine->recordsClass;
    $this->sipRecords    = new $_sip_class(&$this->SipSOAPEngine);
    
    $sipAccount = array('account'  => 'user@example.com',
                        'quota'    => $quota,
                        'prepaid'  => $prepaid,
                        'password' => $password,
                        'groups'   => array('group1','group2'),
                        'owner'    => $owner,
                        'customer' => $customer,
                        'reseller' => $reseller
                        );
    
    $this->sipRecords->addRecord($sipAccount);

    ////////////////////////////////
    // How to create a SIP domain //
    ////////////////////////////////
    
    $sipEngine           = 'sip_accounts@engine';
    $this->SipSOAPEngine = new SOAPEngine($sipEngine,$soapEngines,$loginCredentials);
    $_sip_class          = $this->SipSOAPEngine->recordsClass;
    $this->sipRecords    = new $_sip_class(&$this->SipSOAPEngine);
    
    $sipDomain = array('domain'  => 'example.com',
                       'customer' => $customer,
                       'reseller' => $reseller
                      );
    
    $this->sipRecords->addRecord($sipDomain);

    ///////////////////////////////
    // How to create a SIP alias //
    ///////////////////////////////
    
    $sipEngine           = 'sip_aliases@engine';
    $this->SipSOAPEngine = new SOAPEngine($sipEngine,$soapEngines,$loginCredentials);
    $_sip_class          = $this->SipSOAPEngine->recordsClass;
    $this->sipRecords    = new $_sip_class(&$this->SipSOAPEngine);
    
    $sipAlias = array('alias'    => 'user@example1.com',
                      'target'   => 'user@example2.com',
                      'owner'    => $owner,
                      'customer' => $customer,
                      'reseller' => $reseller
                     );
    
    $this->sipRecords->addRecord($sipAlias);
    
    ///////////////////////////////////
    // How to create an ENUM mapping //
    ///////////////////////////////////
    
    $enumEngine           = 'enum_numbers@engine';
    $this->EnumSOAPEngine = new SOAPEngine($enumEngine,$soapEngines,$loginCredentials);
    $_enum_class          = $this->EnumSOAPEngine->recordsClass;
    $this->enumRecords    = new $_enum_class(&$this->EnumSOAPEngine);
    
    $enumMapping = array('tld'      => $tld,
                         'number'   => $number,
                         'type'     => 'sip',
                         'mapto'    => 'sip:user@example.com',
                         'owner'    => $owner,
                         'customer' => $customer,
                         'reseller' => $reseller
                        );
    
    $this->enumRecords->addRecord($enumMapping);
    
*/

class SOAPEngine {

    var $version       = 1;
    var $adminonly     = 0;
    var $customer      = 0;
    var $reseller      = 0;
    var $loginType     = 'reseller';
	var $allowedPorts  = array();
    var $timeout       = 5;

    var $ports=array(
                        'sip_accounts'   => array(
                                           'recordsClass' => 'SipAccounts',
                                           'name'         => 'SIP accounts',
                                           'soapClass'    => 'WebService_NGNPro_SipPort'
                                           ),
                        'sip_aliases'    => array(
                                           'recordsClass' => 'SipAliases',
                                           'name'         => 'SIP aliases',
                                           'soapClass'    => 'WebService_NGNPro_SipPort'
                                           ),
                        'sip_domains'    => array(
                                           'recordsClass' => 'Domains',
                                           'name'         => 'SIP domains',
                                           'soapClass'    => 'WebService_NGNPro_SipPort'
                                           ),
                        'enum_numbers'   => array(
                                           'recordsClass' => 'EnumMappings',
                                           'name'         => 'ENUM numbers',
                                           'soapClass'    => 'WebService_NGNPro_EnumPort'
                                           ),
                        'enum_ranges'    => array(
                                           'recordsClass' => 'EnumRanges',
                                           'name'         => 'ENUM ranges',
                                           'soapClass'    => 'WebService_NGNPro_EnumPort'
                                           ),
                        'customers'      => array(
                                           'recordsClass' => 'Customers',
                                           'name'         => 'Customers',
                                           'soapClass'    => 'WebService_NGNPro_CustomerPort'
                                           ),
                        'trusted_peers'  => array(
                                           'recordsClass' => 'TrustedPeers',
                                           'name'         => 'Trusted peers',
                                           'soapClass'    => 'WebService_NGNPro_SipPort'
                                           ),
                        'pstn_gateways'  => array(
                                           'recordsClass' => 'Gateways',
                                           'name'         => 'PSTN gateways',
                                           'soapClass'    => 'WebService_NGNPro_NetworkPort'
                                           ),
                        'pstn_gateway_groups' => array(
                                           'recordsClass' => 'GatewayGroups',
                                           'name'         => 'Gateway groups',
                                           'soapClass'    => 'WebService_NGNPro_NetworkPort'
                                           ),
                        'pstn_routes'    => array(
                                           'recordsClass' => 'Routes',
                                           'name'         => 'PSTN routes',
                                           'soapClass'    => 'WebService_NGNPro_NetworkPort'
                                           )
                        );

    function getSoapEngineAllowed($soapEngines,$filter) {
        // returns a list of allowed engines based on a filter
        // the filter format is:
        // engine1:port1,port2 engine2 engine3:port1

		if (!$filter){
        	$soapEngines_checked=$soapEngines;
        } else {
    
            $_filter_els=explode(" ",$filter);
            foreach(array_keys($soapEngines) as $_engine) {
                foreach ($_filter_els as $_filter) {
                    unset($_allowed_engine);
                    $_allowed_ports=array();
    
                    list($_allowed_engine,$_allowed_ports_els) = explode(":",$_filter);
    
                    if ($_allowed_ports_els) {
                        $_allowed_ports = explode(",",$_allowed_ports_els);
                    }
    
                    if (count($_allowed_ports) == 0) {
                        $_allowed_ports=array_keys($this->ports);
                    }
    
                    if ($_engine == $_allowed_engine) {
                        $soapEngines_checked[$_engine]=$soapEngines[$_engine];
                        $this->allowedPorts[$_engine]=$_allowed_ports;
                        continue;
                    }
                }
            }
        }

        return $soapEngines_checked;
    }

    function SOAPEngine($service,$soapEngines,$loginCredentials=array()) {

        /*
        	service is port@engine where:

         	- port is an available NGNPro web service and
            - engine is a connection to remote NGNPro server

         	soapEngines is an array of NGNPro connections and
            settings belonging to them:

        	$soapEngines=array(
                                 'mdns' => array('name'        => 'Managed DNS',
                                                 'username'    => 'soapadmin',
                                                 'password'    => 'passwd',
                                                 'url'         => 'http://example.com:9200/'
                                                 )
                               );
        */

		$this->loginCredentials = $loginCredentials;

        if (is_array($this->loginCredentials['ports'])) {
            $_ports=array();
            foreach (array_keys($this->ports) as $_key) {
                if (in_array($_key,array_keys($this->loginCredentials['ports']))) {
                    if (strlen($this->loginCredentials['ports'][$_key]['recordsClass'])){
                		$_ports[$_key]['recordsClass']=$this->loginCredentials['ports'][$_key]['recordsClass'];
                    } else {
                        $_ports[$_key]['recordsClass']=$this->ports[$_key]['recordsClass'];
                    }
                    if (strlen($this->loginCredentials['ports'][$_key]['soapClass'])){
                		$_ports[$_key]['soapClass']=$this->loginCredentials['ports'][$_key]['soapClass'];
                    } else {
                        $_ports[$_key]['soapClass']=$this->ports[$_key]['soapClass'];
                    }
                    if (strlen($this->loginCredentials['ports'][$_key]['name'])){
                		$_ports[$_key]['name']=$this->loginCredentials['ports'][$_key]['name'];
                    } else {
                        $_ports[$_key]['name']=$this->ports[$_key]['name'];
                    }
                } else {
                	$_ports[$_key]=$this->ports[$_key];
                }
            }
            $this->ports=$_ports;

        }

        dprint_r($this->loginCredentials);

        if ($this->loginCredentials['loginType'] == 'admin') $this->adminonly = 1;

        if (strlen($this->loginCredentials['soapFilter'])) {
            $this->soapEngines = $this->getSoapEngineAllowed($soapEngines,$this->loginCredentials['soapFilter']);
        } else {
        	$this->soapEngines = $soapEngines;
        }

        if (is_array($this->soapEngines)) {

            if (!$service) {
                // use first engine available
                $_engines  = array_keys($this->soapEngines);
                if (is_array($this->allowedPorts) && count($this->allowedPorts[$_engines[0]]) > 0) {
                	$_ports=$this->allowedPorts[$_engines[0]];
                } else {
                	$_ports    = array_keys($this->ports);
                }
                // default service is:
                $service   = $_ports[0].'@'.$_engines[0];
            }

	        $this->extraFormElements    = $this->loginCredentials['extraFormElements'];

            $this->service = $service;

            $_els=explode('@',$this->service);

            $this->soapEngine             = $_els[1];
            $this->soapEngineSettingsPage = $this->soapEngine;

            if (count($this->allowedPorts[$this->soapEngine]) > 0 && in_array($_els[0],$this->allowedPorts[$this->soapEngine])) {
            	$this->port = $_els[0];
            	$this->recordsClass   = $this->ports[$this->port]['recordsClass'];
            	$this->soapClass      = $this->ports[$this->port]['soapClass'];
            }  else {
            	$this->port = $_els[0];
            	$this->recordsClass   = $this->ports[$this->port]['recordsClass'];
            	$this->soapClass      = $this->ports[$this->port]['soapClass'];
            }

            foreach(array_keys($this->soapEngines) as $_key ) {
            	$this->skipEngines[$_key]=$this->soapEngines[$_key]['skipEngines'];
                $this->skip[$_key]=$this->soapEngines[$_key]['skip'];
            }

            if (strlen($this->soapEngines[$this->soapEngine]['version'])) {
            	$this->version = $this->soapEngines[$this->soapEngine]['version'];
            }

            $this->impersonate  = intval($this->soapEngines[$this->soapEngine]['impersonate']);

            $this->defaultEnumTLD  = $this->soapEngines[$this->soapEngine]['defaultEnumTLD'];

			if (strlen($this->soapEngines[$this->soapEngine]['soapEngineSettingsPage'])) {
            	$this->soapEngineSettingsPage=$this->soapEngines[$this->soapEngine]['soapEngineSettingsPage'];
            }

			if (strlen($this->soapEngines[$this->soapEngine]['SipSettingsPage'])) {
            	$this->SipSettingsPage=$this->soapEngines[$this->soapEngine]['SipSettingsPage'];
            }

			if (strlen($this->soapEngines[$this->soapEngine]['customerProperties'])) {
            	$this->customerProperties=$this->soapEngines[$this->soapEngine]['customerProperties'];
            }

	        if (strlen($this->loginCredentials['recordGenerator'])) {
            	$this->recordGenerator=$this->loginCredentials['recordGenerator'];
            } else if (strlen($this->soapEngines[$this->soapEngine]['recordGenerator'])) {
            	$this->recordGenerator=$this->soapEngines[$this->soapEngine]['recordGenerator'];
            }

	        if (strlen($this->loginCredentials['customerEngine'])) {
            	$this->customerEngine=$this->loginCredentials['customerEngine'];
            } else if (strlen($this->soapEngines[$this->soapEngine]['customerEngine'])) {
            	$this->customerEngine=$this->soapEngines[$this->soapEngine]['customerEngine'];
            } else {
            	$this->customerEngine=$this->soapEngine;
            }

            if (strlen($loginCredentials['reseller'])) {
            	$this->reseller = $loginCredentials['reseller'];
            } else if ($this->adminonly && $_REQUEST['reseller_filter']){
                $this->reseller = $_REQUEST['reseller_filter'];
            }

            if (strlen($loginCredentials['customer'])) {
            	$this->customer = $loginCredentials['customer'];
            } else if ($this->adminonly && $_REQUEST['customer_filter']){
            	$this->customer = $_REQUEST['customer_filter'];
            }

            if (strlen($loginCredentials['soapUsername']) && $this->version > 1) {
            	$this->soapUsername=$loginCredentials['soapUsername'];
                $this->SOAPlogin = array(
                                       "username"    => $this->soapUsername,
                                       "password"    => $loginCredentials['soapPassword'],
                                       "admin"       => false
                                       );
            } else {
                // use the credentials defined for the soap engine
				$this->soapUsername=$this->soapEngines[$this->soapEngine]['username'];
                $this->SOAPlogin = array(
                                       "username"    => $this->soapUsername,
                                       "password"    => $this->soapEngines[$this->soapEngine]['password'],
                                       "admin"       => true,
                                       "impersonate" => intval($this->reseller)
                                       );
            }

            $this->SOAPurl=$this->soapEngines[$this->soapEngine]['url'];

            if ($this->adminonly)  {
            	printf ("<p>%s at <a href=%swsdl target=wsdl>%s</a> as %s ",$this->soapClass,$this->SOAPurl,$this->SOAPurl,$this->soapUsername);
            }

            $this->SoapAuth = array('auth', $this->SOAPlogin , 'urn:AGProjects:NGNPro', 0, '');

    		// Instantiate the SOAP client
            if (!class_exists($this->soapClass)) return ;

            $this->soapclient = new $this->soapClass($this->SOAPurl);

            $this->soapclient->setOpt('curl', CURLOPT_TIMEOUT,        $this->timeout);
            $this->soapclient->setOpt('curl', CURLOPT_SSL_VERIFYPEER, 0);
            $this->soapclient->setOpt('curl', CURLOPT_SSL_VERIFYHOST, 0);

			$this->soapDepends=$this->soapEngines[$this->soapEngine]['depends'];

            if (strlen($this->soapDepends) && in_array($this->soapDepends,array_keys($this->soapEngines))) {
				$this->soapEngineRemote  = $this->soapEngines[$this->soapDepends];
                $this->impersonateRemote = intval($this->soapEngines[$this->soapDepends]['impersonate']);

    	        $this->SOAPloginRemote = array(
        	                           "username"    => $this->soapEngines[$this->soapDepends]['username'],
            	                       "password"    => $this->soapEngines[$this->soapDepends]['password'],
                	                   "admin"       => true,
                    	               "impersonate" => $this->impersonateRemote
                                   );

                dprint_r($this->SOAPloginRemote);
            	$this->SOAPurlRemote=$this->soapEngines[$this->soapDepends]['url'];

                if ($this->adminonly)  {
            		printf ("and syncronize changes to <a href=%swsdl target=wsdl>%s</a>",$this->SOAPurlRemote,$this->SOAPurlRemote);
                }
            	$this->SoapAuthRemote = array('auth', $this->SOAPloginRemote , 'urn:AGProjects:NGNPro', 0, '');

    			// Instantiate the SOAP client dependency
            	$this->soapclientRemote = new $this->soapClass($this->SOAPurlRemote);

            	$this->soapclientRemote->setOpt('curl', CURLOPT_TIMEOUT, $this->timeout);
            	$this->soapclientRemote->setOpt('curl', CURLOPT_SSL_VERIFYPEER, 0);
            	$this->soapclientRemote->setOpt('curl', CURLOPT_SSL_VERIFYHOST, 0);
            }

	    	if ($this->version > 1) {

                $this->SOAPurlCustomers    = $this->soapEngines[$this->customerEngine]['url'];
	            $this->soapclientCustomers = new WebService_NGNPro_CustomerPort($this->SOAPurlCustomers);

    	        $this->soapclientCustomers->setOpt('curl', CURLOPT_TIMEOUT, $this->timeout);
        	    $this->soapclientCustomers->setOpt('curl', CURLOPT_SSL_VERIFYPEER, 0);
            	$this->soapclientCustomers->setOpt('curl', CURLOPT_SSL_VERIFYHOST, 0);
            }

    	} else {
            print "<font color=red>Error: No SOAP credentials defined.</font>";
        }

        $this->url = $_SERVER['PHP_SELF']."?1=1";

        foreach (array_keys($this->extraFormElements) as $element) {
            if (!strlen($this->extraFormElements[$element])) continue;
            $this->url  .= sprintf('&%s=%s',$element,urlencode($this->extraFormElements[$element]));
        }

		$this->supportEmail=$this->soapEngines[$this->soapEngine]['supportEmail'];

    }

    function execute($function) {

        /*
        $function=array('commit'   => array('name'       => 'addAccount',
                                            'parameters' => array($param1,$param2),
                                            'logs'       => array('success' => 'The function was a success',
                                                                  'failure' => 'The function has failed'
                                                                  )
                                           ),
                        'rollback' => array('name'       => 'addAccount',
                                            'parameters' => array($param1,$param2),
                                            'logs'       => array('success' => 'The function was a success',
                                                                  'failure' => 'The function has failed'
                                                                  )
                                           )

                        );
        */

        if (!$function['commit']['name']) {
            print "<font color=red>Error: no function name supplied</font>";
            return false;
        }

        if (is_object($this->soapclientRemote)) {

            $this->soapclientRemote->addHeader($this->SoapAuthRemote);

            $resultRemote = call_user_func_array(array($this->soapclientRemote,$function['commit']['name']),$function['commit']['parameters']);

            if (PEAR::isError($resultRemote)) {
                $this->error_msg   = $resultRemote->getMessage();
                $this->error_fault = $resultRemote->getFault();
                $this->error_code  = $resultRemote->getCode();
                printf ("<p><font color=red>Error from %s: %s (%s): %s</font>",$this->SOAPurlRemote,$this->error_msg, $this->error_fault->detail->exception->errorcode,$this->error_fault->detail->exception->errorstring);
                return false;
            } else {
            	printf ("<p><font color=green>%s at %s </font>",$function['commit']['logs']['success'],$this->SOAPurlRemote);

                $this->soapclient->addHeader($this->SoapAuth);
            	$result = call_user_func_array(array($this->soapclient,$function['commit']['name']),$function['commit']['parameters']);

                if (PEAR::isError($result)) {
                    $this->error_msg   = $result->getMessage();
                    $this->error_fault = $result->getFault();
                    $this->error_code  = $result->getCode();
                    printf ("<p><font color=red>Error from %s: %s (%s): %s</font>",$this->SOAPurl,$this->error_msg, $this->error_fault->detail->exception->errorcode,$this->error_fault->detail->exception->errorstring);

					if ($function['rollback']['name']) {

            			$this->soapclientRemote->addHeader($this->SoapAuthRemote);
                        $this->counterRemote++;

            			$resultRemote = call_user_func_array(array($this->soapclientRemote,$function['rollback']['name']),$function['rollback']['parameters']);

                        if (PEAR::isError($result)) {
                            $this->error_msg=$result->getMessage();
                            $this->error_fault=$result->getFault();
                            $this->error_code=$result->getCode();
                            printf ("<p><font color=red>Error roll back at %s: %s (%s): %s</font>",$this->SOAPurl,$this->error_msg, $this->error_fault->detail->exception->errorcode,$this->error_fault->detail->exception->errorstring);
                        } else {
            				printf ("<p><font color=green>Rolled back action at %s </font>",$this->SOAPurlRemote);
                        }
                    }

                    return false;
                } else {
                    if ($function['commit']['logs']['success']) {
                    	printf ("<p><font color=green>%s at %s </font>",$function['commit']['logs']['success'],$this->SOAPurl);
                    }
                }
            }

        } else {

	     	$this->soapclient->addHeader($this->SoapAuth);
            $result = call_user_func_array(array($this->soapclient,$function['commit']['name']),$function['commit']['parameters']);

            if (PEAR::isError($result)) {
                $this->error_msg   = $result->getMessage();
                $this->error_fault = $result->getFault();
                $this->error_code  = $result->getCode();
                printf ("<p><font color=red>Error from %s: %s (%s): %s</font>",$this->SOAPurl,$this->error_msg, $this->error_fault->detail->exception->errorcode,$this->error_fault->detail->exception->errorstring);
                return false;
            } else {
            	if ($function['commit']['logs']['success']) {
                	printf ("<p><font color=green>%s </font>",$function['commit']['logs']['success']);
                }
            }
        }

        return true;
    }
}

class SOAPEngineNewCustomer extends SOAPEngine {
    // use this class to a new customer in the system

    function SOAPEngineNewCustomer($soapEngines) {

        if (is_array($soapEngines)) {
            $engines = array_keys($soapEngines);

            $this->soapEngine     = $engines[0];
            $this->soapEngines    = $soapEngines;
			$this->port 		  = 'customers';
            $this->recordsClass   = $this->ports[$this->port]['recordsClass'];
            $this->soapClass      = $this->ports[$this->port]['soapClass'];

            $this->SOAPlogin = array(
                                   "username"    => $this->soapEngines[$this->soapEngine]['username'],
                                   "password"    => $this->soapEngines[$this->soapEngine]['password'],
                                   "admin"       => true
                                   );


            $this->SOAPurl        = $this->soapEngines[$this->soapEngine]['url'];

            printf ("<p>Connection to %s at <a href=%swsdl target=wsdl>%s</a> as %s/%s ",$this->soapClass,$this->SOAPurl,$this->SOAPurl);
            $this->SoapAuth = array('auth', $this->SOAPlogin , 'urn:AGProjects:NGNPro', 0, '');

    		// Instantiate the SOAP client
            if (!class_exists($this->soapClass)) return ;

            $this->soapclient = new $this->soapClass($this->SOAPurl);

            $this->soapclient->setOpt('curl', CURLOPT_TIMEOUT,        $this->timeout);
            $this->soapclient->setOpt('curl', CURLOPT_SSL_VERIFYPEER, 0);
            $this->soapclient->setOpt('curl', CURLOPT_SSL_VERIFYHOST, 0);

			$this->soapDepends=$this->soapEngines[$this->soapEngine]['depends'];

            if (strlen($this->soapDepends) && in_array($this->soapDepends,array_keys($this->soapEngines))) {
				$this->soapEngineRemote = $this->soapEngines[$this->soapDepends];
                $this->impersonateRemote=intval($this->soapEngines[$this->soapDepends]['impersonate']);

    	        $this->SOAPloginRemote = array(
        	                           "username"    => $this->soapEngines[$this->soapDepends]['username'],
            	                       "password"    => $this->soapEngines[$this->soapDepends]['password'],
                	                   "admin"       => true
                                   );

                //print_r($this->SOAPloginRemote);
            	$this->SOAPurlRemote=$this->soapEngines[$this->soapDepends]['url'];
            	//printf ("and syncronize writes at <a href=%swsdl target=wsdl>%s</a>",$this->SOAPurlRemote,$this->SOAPurlRemote);

            	$this->SoapAuthRemote = array('auth', $this->SOAPloginRemote , 'urn:AGProjects:NGNPro', 0, '');

    			// Instantiate the SOAP client depends
            	$this->soapclientRemote = new $this->soapClass($this->SOAPurlRemote);

            	$this->soapclientRemote->setOpt('curl', CURLOPT_TIMEOUT,        $this->timeout);
            	$this->soapclientRemote->setOpt('curl', CURLOPT_SSL_VERIFYPEER, 0);
            	$this->soapclientRemote->setOpt('curl', CURLOPT_SSL_VERIFYHOST, 0);
            }

    	} else {
            print "<font color=red>Error: No SOAP engines defined</font>";
        }

        $this->url = $_SERVER['PHP_SELF']."?1=1";

		$this->supportEmail=$this->soapEngines[$this->soapEngine]['supportEmail'];
    }
}

class Records {
	var $maxrowsperpage     = '15';
    var $SipSettingsPage    = 'sip_settings.phtml';
    var $allowedDomains     = array();
    var $selectionActive    = false;
    var $selectionKeys      = array();
    var $resellers          = array();
    var $customers          = array();
    var $recordGenerator    = false;
	var $customerProperties = array();

    function Records(&$SOAPEngine) {
    	$this->SOAPEngine         = &$SOAPEngine;
        $this->version            = &$this->SOAPEngine->version;
        $this->loginCredentials   = &$this->SOAPEngine->loginCredentials;

        $this->sorting['sortBy']    = trim($_REQUEST['sortBy']);
        $this->sorting['sortOrder'] = trim($_REQUEST['sortOrder']);

        $this->next       = $_REQUEST['next'];

        $this->adminonly  = $this->SOAPEngine->adminonly;
		$this->reseller   = $this->SOAPEngine->reseller;
        $this->url        = $this->SOAPEngine->url;

		foreach(array_keys($this->filters) as $_filter) {
            if (strlen($this->filters[$_filter])) {
            	$this->selectionActive=true;
                break;
            }
        }

        if ($this->adminonly) {
        	$this->url .= sprintf('&adminonly=%s',$this->adminonly);
            if ($this->loginCredentials['reseller']) {
        		$this->filters['reseller']=$this->loginCredentials['reseller'];
            } else {
        		$this->filters['reseller']=trim($_REQUEST['reseller_filter']);
            }
        }

      	$this->filters['customer'] = trim($_REQUEST['customer_filter']);

        $this->getResellers();
        $this->getCustomers();

        if (strlen($this->SOAPEngine->SipSettingsPage)) {
        	$this->SipSettingsPage=$this->SOAPEngine->SipSettingsPage;
        }
    }

    function showEngineSelection() {
        $selected_soapEngine[$this->SOAPEngine->service]='selected';

        printf ("<select name=service onChange=\"document.soapengine.submit.disabled = true; location.href = '%s&service=' + this.options[this.selectedIndex].value\">",$this->url);
        $j=1;
        foreach (array_keys($this->SOAPEngine->soapEngines) as $_engine) {
        	if ($this->SOAPEngine->skip[$_engine]) continue;

        	if ($j>1) printf ("<option value=''>--------");
            foreach (array_keys($this->SOAPEngine->ports) as $_port) {
                $idx=$_port.'@'.$_engine;
                if (in_array($_port,$this->SOAPEngine->skipEngines[$_engine])) continue;
                if (count($this->SOAPEngine->allowedPorts[$_engine]) > 0 && !in_array($_port,$this->SOAPEngine->allowedPorts[$_engine])) continue;
                if ($_port == 'customers' && $this->SOAPEngine->soapEngines[$_engine]['version'] < 2) continue;
                printf ("<option value='%s@%s' %s>%s@%s",$_port,$_engine,$selected_soapEngine[$idx],$this->SOAPEngine->ports[$_port]['name'],$this->SOAPEngine->soapEngines[$_engine]['name']);
            }
            $j++;
        }
        printf ("</select>");

        if ($this->version > 1) {
            print "Customer ";
    
            if ($this->adminonly) {
                $this->showCustomerForm();
                print ".";
                $this->showResellerForm();
            } else {
                printf ("%s",$this->reseller);
                print ".";
                $this->showCustomerForm();
            }
        }
    }

    function showPagination($maxrows) {

        $url .= $this->url.'&'.$this->addFiltersToURL().
        sprintf("&service=%s&sortBy=%s&sortOrder=%s",
        urlencode($this->SOAPEngine->service),
        urlencode($this->sorting['sortBy']),
        urlencode($this->sorting['sortOrder'])
        );

        print "
        <p>
        <table border=0 align=center>
        <tr>
        <td>
        ";

        if ($this->next != 0  ) {
            $show_next=$this->maxrowsperpage-$this->next;
            if  ($show_next < 0)  {
                $mod_show_next  =  $show_next-2*$show_next;
            }
            if (!$mod_show_next) $mod_show_next=0;

            if ($mod_show_next/$this->maxrowsperpage >= 1) {
            	printf ("<a href='%s&next=0'>Begin</a> ",$url);
            }

            printf ("<a href='%s&next=%s'>Previous</a> ",$url,$mod_show_next);
        }
        
        print "
        </td>
        <td>
        ";

        if ($this->next + $this->maxrowsperpage < $this->rows)  {
            $show_next = $this->maxrowsperpage + $this->next;
            printf ("<a href='%s&next=%s'>Next</a> ",$url,$show_next);
        }

        print "
        </td>
        </tr>
        </table>
        ";
    }

    function showSeachFormCustom() {
    }

    function showSeachForm() {

     	print "
        <p> Use % to match a pattern

        <table border=0 bgcolor=lightgreen class=border width=100%>
        <tr>

        ";
        printf ("<form method=post name=soapengine action=%s>",$_SERVER['PHP_SELF']);
        print "
        <td align=left>
        ";
        print "
        <input type=submit name=action value=Search>
        ";

        $this->showEngineSelection();

        $this->showSeachFormCustom();

        print "
        </td>
        <td align=right>
        Order";
        $this->showSortForm();

        $this->printHiddenFormElements();

        print "
        </td>
        </form>
        </tr>
        </table>
        ";

        if ($_REQUEST['action'] != 'Delete') $this->showAddForm();
    }

    function listRecords() {
    }

    function getRecordKeys() {
    }

    function addRecord($dictionary=array()) {
    }

    function deleteRecord() {
    }

    function tel2enum($tel,$tld) {

        if (strlen($tld) == 0)  $tld="e164.arpa";

        // transform telephone number in FQDN Enum style domain name
        if (preg_match("/^[+]?(\d+)$/",$tel,$m)) {
            $l=strlen($m[1]);
            $rev_num="";
            $z=0;
            while ($z < $l) {
                $ss=substr($m[1],$z,1);
                $enum=$ss.".".$enum;
                $z++;
            }
            preg_match("/^(.*)\.$/",$enum,$m);
            $enum=$m[1];
            $enum=$enum.".$tld.";
            return($enum);
         } else {
            return($tel);
         }
    }

    function showAddForm() {
		if ($this->selectionActive) return;
	}

    function showSortForm() {

        if (!count($this->sortElements)) {
            return;
        }

        $selected_sortBy[$this->sorting['sortBy']]='selected';

        //print " Sort ";

        print "<select name=sortBy>";
        foreach (array_keys($this->sortElements) as $key) {
        	printf ("<option value='%s' %s>%s",$key,$selected_sortBy[$key],$this->sortElements[$key]);
        }
        print "</select>";

        $selected_sortOrder[$this->sorting['sortOrder']]='selected';
        print "<select name=sortOrder>";
        printf ("<option value='DESC' %s>DESC",$selected_sortOrder['DESC']);
        printf ("<option value='ASC' %s>ASC",$selected_sortOrder['ASC']);
        print "</select>";
    }

    function showTimezones() {
        if (!$fp = fopen("timezones", "r")) {
        	print _("Failed to open timezone file.");
            return false;
        }
        print "<select name=timezone>";
        print "<option>";
        while ($buffer = fgets($fp,1024)) {
        	$buffer=trim($buffer);
            if ($this->timezone==$buffer) {
                $selected="selected";
            } else {
                $selected="";
            }
            printf ("<option %s>%s>",$selected,$buffer);
        }
        print "</select>";
        fclose($fp);

    }

    function printHiddenFormElements () {
        printf("<input type=hidden name=service value='%s'>",$this->SOAPEngine->service);

        if ($this->adminonly) {
        	printf("<input type=hidden name=adminonly value='%s'>",$this->adminonly);
        }

        foreach (array_keys($this->SOAPEngine->extraFormElements) as $element) {
        	if (!strlen($this->SOAPEngine->extraFormElements[$element])) continue;
            printf ("<input type=hidden name=%s value='%s'>\n",$element,$this->SOAPEngine->extraFormElements[$element]);
        }

    }

    function getAllowedDomains() {
    }


    function showActionsForm() {
        if (!$this->selectionActive) {
            return;
        }

		$class_name=get_class($this).'Actions';

		if (class_exists($class_name)) {
            $actions=new $class_name(&$this->SOAPEngine);
            $actions->showActionsForm($this->filters,$this->sorting);
        }
    }

    function performActions() {
		$this->showSeachForm();

		$this->getRecordKeys();
    	//print_r($this->selectionKeys);

        $class_name=get_class($this).'Actions';

		if (class_exists($class_name)) {
            $actions=new $class_name(&$this->SOAPEngine);
            $actions->performActions(&$this->selectionKeys,$_REQUEST['sub_action'],trim($_REQUEST['sub_action_parameter']));
        }
    }

    function getCustomers() {
    	if (!$this->version <= 1 ) return;

        if (!$this->filters['reseller']) {
            return;
        }

        // Filter
        $filter=array('reseller'=>intval($this->filters['reseller']));

        $range=array('start' => 0,
                     'count' => 100
                     );

        // Order
        $orderBy = array('attribute' => 'customer',
                         'direction' => 'ASC'
                         );

        // Compose query
        $Query=array('filter'     => $filter,
                        'orderBy' => $orderBy,
                        'range'   => $range
                        );

        // Insert credetials
        $this->SOAPEngine->soapclientCustomers->addHeader($this->SOAPEngine->SoapAuth);

        // Call function
        $result     = $this->SOAPEngine->soapclientCustomers->getCustomers($Query);

        if (PEAR::isError($result)) {
            $error_msg  = $result->getMessage();
            $error_fault= $result->getFault();
            $error_code = $result->getCode();
            printf ("<p><font color=red>Error from %s: %s (%s): %s</font>",$this->SOAPEngine->SOAPurl,$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            return false;
        } else {

            if ($result->total > $range['count']) return;

			if ($range['count'] <= $result->total) {
                $max=$range['count'];
            } else {
            	$max=$result->total;
            }

            $i=0;
            while ($i < $max)  {
                $customer=$result->accounts[$i];
            	$this->customers[$customer->id] = $customer->firstName.' '.$customer->lastName;
            	$i++;
            }
            return true;
        }
    }

    function getResellers() {
    	if (!$this->version <= 1 ) return;
        if (!$this->adminonly) {
        	return;
        }
        // Filter
        $filter=array('reseller'=>intval($this->filters['reseller']));

        $range=array('start' => 0,
                     'count' => 200
                     );

        // Order
        $orderBy = array('attribute' => 'customer',
                         'direction' => 'ASC'
                         );

        // Compose query
        $Query=array('filter'     => $filter,
                        'orderBy' => $orderBy,
                        'range'   => $range
                        );

        // Insert credetials
        $this->SOAPEngine->soapclientCustomers->addHeader($this->SOAPEngine->SoapAuth);

        // Call function
        $result     = $this->SOAPEngine->soapclientCustomers->getResellers($Query);

        if (PEAR::isError($result)) {
            $error_msg  = $result->getMessage();
            $error_fault= $result->getFault();
            $error_code = $result->getCode();
            printf ("<p><font color=red>Error from %s: %s (%s): %s</font>",$this->SOAPEngine->SOAPurl,$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            return false;
        } else {

            //if ($result->total > $range['count']) return;

			if ($range['count'] <= $result->total) {
                $max=$range['count'];
            } else {
            	$max=$result->total;
            }

            $i=0;
            while ($i < $max)  {
                $reseller = $result->accounts[$i];

                if (strlen($reseller->organization) && $reseller->organization!= 'N/A') {
            		$this->resellers[$reseller->id] = $reseller->organization;
                } else {
            		$this->resellers[$reseller->id] = $reseller->firstName.' '.$reseller->lastName;
                }
            	$i++;
            }

            //print_r($this->resellers);
            return true;
        }
    }

    function showCustomerForm($name='customer_filter') {
        if ($this->loginCredentials['customer'] != $this->loginCredentials['reseller']) {
            printf (" %s",$this->loginCredentials['customer']);
        } else {
            if (count($this->customers)) {
                $select_customer[$this->filters['customer']]='selected';
                printf ("<select name=%s>",$name);
                print "<option>";
                foreach (array_keys($this->customers) as $_res) {
                    printf ("<option value='%s' %s>%s (%s)\n",$_res,$select_customer[$_res],$_res,$this->customers[$_res]);
                }
                print "</select>";
            } else {
                printf ("<input type=text size=5 name=%s value='%s'>",$name,$this->filters['customer']);
            }
        }
    }

    function showResellerForm($name='reseller_filter') {
        if (!$this->adminonly) return;
        if ($this->loginCredentials['reseller']) {
            printf (" %s",$this->loginCredentials['reseller']);
        } else {
            if (count($this->resellers)) {
                $select_reseller[$this->filters['reseller']]='selected';
                printf ("<select name=%s>",$name);
                print "<option>";
                foreach (array_keys($this->resellers) as $_res) {
                    printf ("<option value='%s' %s>%s (%s)\n",$_res,$select_reseller[$_res],$_res,$this->resellers[$_res]);
                }
                print "</select>";
            } else {
                printf ("<input type=text size=5 name=%s value='%s'>",$name,$this->filters['reseller']);
            }
        }
    }

    function addFiltersToURL() {

        $j=0;
		foreach(array_keys($this->filters) as $filter) {
        	if (strlen(trim($this->filters[$filter]))) {
                if ($j) $url .='&';
            	$url .= sprintf('%s_filter=%s',$filter,urlencode(trim($this->filters[$filter])));
            }
            $j++;
        }

        return $url;
    }

    function printFiltersToForm() {
		foreach(array_keys($this->filters) as $filter) {
        	if (strlen(trim($this->filters[$filter]))) {
            	printf("<input type=hidden name=%s_filter value='%s'>",$filter,trim($this->filters[$filter]));
            }
        }
    }

    function getRecord () {
    }

    function updateRecord () {
    }

    function copyRecord () {
    }

    function showRecord () {
    }

    function RandomPassword($len=11) {
        $alf=array("a","b","c","d","e","f",
               "h","i","j","k","l","m",
               "n","p","r","s","t","w",
               "x","y","1","2","3","4",
               "5","6","7","8","9");
        $i=0;
        while($i < $len) {
            srand((double)microtime()*1000000);
            $randval = rand(0,28);
            $string="$string"."$alf[$randval]";
            $i++;
        }
        return $string;
    }

    function validDomain($domain) {
   		if (!preg_match ("/^[A-Za-z0-9-.]{1,}\.[A-Za-z]{2,}$/",$domain)) {
            return false;
        }

        return true;
    }

    function getGatewayGroups () {
        $Query=array('filter'  => array('name'=>''),
                     'orderBy' => array('attribute' => 'name',
                                        'direction' => 'ASC'
                                  ),
                     'range'   => array('start' => 0,
                                        'count' => 1000)
                     );

        $this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);
        $result     = $this->SOAPEngine->soapclient->getGatewayGroups($Query);

        if (PEAR::isError($result)) {
            $error_msg  = $result->getMessage();
            $error_fault= $result->getFault();
            $error_code = $result->getCode();
            printf ("<p><font color=red>Error from %s: %s (%s): %s</font>",$this->SOAPEngine->SOAPurl,$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            return false;
        } else {
            if ($this->version > 1) {
                foreach ($result->groups as $_grp){
                	$this->gatewayGroups[]=$_grp->name;
                }
            } else {
                if (is_array($result->groups)) {
            		$this->gatewayGroups=$result->groups;
                }
            }
        }

    }

    function updateBefore () {
        return true;
    }

    function updateAfter () {
        return true;
    }

    function showCustomerTextBox () {
    	if ($this->version < 2) return;
    	print "Customer";
    	if ($this->adminonly) {
        	$this->showCustomerForm('customer');
            print ".";
            $this->showResellerForm('reseller');
        } else {
        	$this->showCustomerForm('customer');
        }
    }

    function makebar($w) {
    	if ($w < 0) $w = 0;
	    if ($w > 100) $w = 100;
    	$width = $w;
	    $extra = 100 - $w;
    	if ($width < 50)
	        $color = "black";
    	else if ($width < 70)
	        $color = "darkred";
    	else
        	$color = "red";
	    return "
        <table class=bar cellspacing=0>
        <tr>
        <td class=$color width=$width></td>
        <td class=white width=$extra>
        </td>
        </tr>
        </table>
        ";
	}
}

class Domains extends Records {

    function Domains(&$SOAPEngine) {
        $this->filters   = array(
                               'domain'       => strtolower(trim($_REQUEST['domain_filter']))
                               );

		$this->Records(&$SOAPEngine);

        if ($this->version > 1) {
            // keep default maxrowsperpage
        	$this->sortElements=array('changeDate' => 'Change date',
                  	        	      'domain'     => 'Domain'
	                        	     );

        } else {
    		$this->maxrowsperpage = 10000;
        }


    }

    function listRecords() {

        $this->showSeachForm();
    
		if ($this->version > 1) {

            // Filter
            $filter=array(
                          'domain'    => $this->filters['domain'],
                          'customer'  => intval($this->filters['customer']),
                          'reseller'  => intval($this->filters['reseller'])
                          );
    
            // Range
            $range=array('start' => intval($this->next),
                         'count' => intval($this->maxrowsperpage)
                         );
    
            // Order
            if (!$this->sorting['sortBy'])    $this->sorting['sortBy']    = 'changeDate';
            if (!$this->sorting['sortOrder']) $this->sorting['sortOrder'] = 'DESC';
    
            $orderBy = array('attribute' => $this->sorting['sortBy'],
                             'direction' => $this->sorting['sortOrder']
                             );
    
            // Compose query
            $Query=array('filter'     => $filter,
                            'orderBy' => $orderBy,
                            'range'   => $range
                            );
            dprint_r($Query);
    
            // Insert credetials
            $this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);
    
            // Call function
            $result     = $this->SOAPEngine->soapclient->getDomains($Query);
		} else {
            // Insert credetials
            $this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);
    
            // Call function
            $result     = $this->SOAPEngine->soapclient->getDomains();
        }

        if (PEAR::isError($result)) {
            $error_msg  = $result->getMessage();
            $error_fault= $result->getFault();
            $error_code = $result->getCode();
            printf ("<p><font color=red>Error from %s: %s (%s): %s</font>",$this->SOAPEngine->SOAPurl,$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            return false;
        } else {

			if ($this->version > 1) {
				$this->rows = $result->total;
            } else {
				$this->rows = count($result);
            }

     		if ($this->rows && $_REQUEST['action'] != 'PerformActions' && $_REQUEST['action'] != 'Delete') {
                $this->showActionsForm();
            }

            print "
            <table border=0 align=center>
            <tr><td>$this->rows records found</td></tr>
            </table>
            <p>
            <table border=0 cellpadding=2 width=100%>
            <tr bgcolor=lightgrey>
                <td><b>Id</b></th>
                ";
                if ($this->version > 1) {
	                print "<td><b>Customer</b></td>
    	            <td><b>Domain</b></td>
        	        <td><b>Change date</b></td>
            	    <td><b>Action</b></td>
                	";
                } else {
	                print "
    	            <td><b>Domain</b></td>
        	        <td><b>Action</b></td>
            	    ";
                }
                print "
            </tr>
            ";

            if (!$this->next)  $this->next=0;

            if ($this->rows > $this->maxrowsperpage)  {
                $maxrows = $this->maxrowsperpage + $this->next;
                if ($maxrows > $this->rows) $maxrows = $this->maxrowsperpage;
            } else {
                $maxrows=$this->rows;
            }

            $i=0;

			if ($this->rows) {
                while ($i < $maxrows)  {

					if ($this->version > 1) {
                    	if (!$result->domains[$i]) break;
                    	$domain = $result->domains[$i];
                    } else {
                    	$domain = $result[$i];
                    }

                    $index = $this->next+$i+1;
    
                    $rr=floor($index/2);
                    $mod=$index-$rr*2;
            
                    if ($mod ==0) {
                    	$bgcolor="lightgrey";
                    } else {
                        $bgcolor="white";
                    }

                    if ($this->version > 1) {
                        $_url = $this->url.sprintf("&service=%s&action=Delete&domain_filter=%s",
                        urlencode($this->SOAPEngine->service),
                        urlencode($domain->domain)
                        );
    
                        if ($_REQUEST['action'] == 'Delete' &&
                            $_REQUEST['domain_filter'] == $domain->domain) {
                            $_url .= "&confirm=1";
                            $actionText = "<font color=red>Confirm</font>";
                        } else {
                            $actionText = "Delete";
                        }
    
                        $_customer_url = $this->url.sprintf("&service=customers@%s&customer_filter=%s",
                        urlencode($this->SOAPEngine->customerEngine),
                        urlencode($domain->customer)
                        );
    
                        printf("
                        <tr bgcolor=%s>
                        <td>%s</td>
                        <td><a href=%s>%s.%s</a></td>
                        <td>%s</td>
                        <td>%s</td>
                        <td><a href=%s>%s</a></td>
                        </tr>",
                        $bgcolor,
                        $index,
                        $_customer_url,
                        $domain->customer,
                        $domain->reseller,
                        $domain->domain,
                        $domain->changeDate,
                        $_url,
                        $actionText
                        );
                    } else {
                        $_url = $this->url.sprintf("&service=%s&action=Delete&domain_filter=%s",
                        urlencode($this->SOAPEngine->service),
                        urlencode($domain)
                        );
    
                        if ($_REQUEST['action'] == 'Delete' &&
                            $_REQUEST['domain_filter'] == $domain) {
                            $_url .= "&confirm=1";
                            $actionText = "<font color=red>Confirm</font>";
                        } else {
                            $actionText = "Delete";
                        }
                        printf("
                        <tr bgcolor=%s>
                        <td>%s</td>
                        <td>%s</td>
                        <td><a href=%s>%s</a></td>
                        </tr>",
                        $bgcolor,
                        $index,
                        $domain,
                        $_url,
                        $actionText
                        );
                    }

                    $i++;
                }
			}

            print "</table>";

	        if ($this->version > 1) {
            	$this->showPagination($maxrows);
            }

            return true;
        }
    }

    function showSeachFormCustom() {

        if ($this->version > 1) {
        	printf (" Domain<input type=text size=15 name=domain_filter value='%s'>",$this->filters['domain']);
        }
    }

    function deleteRecord($dictionary=array()) {
        if (!$dictionary['confirm'] && !$_REQUEST['confirm']) {
        	print "<p><font color=red>Please press on Confirm to confirm the delete. </font>";
            return true;
        }

        if ($dictionary['domain']) {
        	$domain=$dictionary['domain'];
        } else {
        	$domain=$this->filters['domain'];
        }

        if (!strlen($domain)) {
            print "<p><font color=red>Error: missing SIP domain. </font>";
            return false;
        }

        $function=array('commit'   => array('name'       => 'deleteDomain',
                                            'parameters' => array($domain),
                                            'logs'       => array('success' => sprintf('SIP domain %s has been deleted',$domain))
                                           )
                                           );

        unset($this->filters);
        return $this->SOAPEngine->execute($function);
    }

    function showAddForm() {
		if ($this->selectionActive) return;
        print "
        <p>
        <table border=0 class=border width=100% bgcolor=lightblue>
        <tr>
            ";
            printf ("<form method=post name=addform action=%s>",$_SERVER['PHP_SELF']);
            print "
        	<td align=left>
            ";

            print "
            <input type=submit name=action value=Add>
            ";

            printf (" Domain<input type=text size=20 name=domain>");

            $this->showCustomerTextBox();

            print "
	        </td>
        	<td align=right>
            ";
            print "
	        </td>
            ";
            $this->printHiddenFormElements();

            print "
            </form>
        </tr>
        </table>
        ";
    }

    function addRecord($dictionary=array()) {

    	if ($dictionary['domain']) {
    		$domain = $dictionary['domain'];
        } else {
        	$domain = trim($_REQUEST['domain']);
        }

        if ($this->adminonly) {
            if ($dictionary['reseller']) {
        		$reseller = $dictionary['reseller'];
            } else {
        		$reseller = trim($_REQUEST['reseller']);
            }
            if ($dictionary['customer']) {
        		$customer = $dictionary['customer'];
            } else {
        		$customer = trim($_REQUEST['customer']);
            }
            if (!$customer) $customer=$reseller;
        } else {
        	$reseller = $this->reseller;

            if ($dictionary['customer']) {
        		$customer = $dictionary['customer'];
            } else {
        		$customer = trim($_REQUEST['customer']);
            }

            if (!$customer) $customer=$reseller;
        }

        if (!$this->validDomain($domain)) {
            print "<font color=red>Error: invalid domain name</font>";
            return false;
        }

        if ($this->version > 1) {
            $domainStructure = array('domain'   => strtolower($domain),
                                    'customer' => intval($customer),
                                    'reseller' => intval($reseller)
                                    );
        } else {
            $domainStructure = strtolower($domain);
        }

        $function=array('commit'   => array('name'       => 'addDomain',
                                            'parameters' => array($domainStructure),
                                            'logs'       => array('success' => sprintf('SIP domain %s has been added',$domain))),
                        'rollback' => array('name'       => 'deleteDomain',
                                            'parameters' => array($domainStructure))
                                           );

        return $this->SOAPEngine->execute($function);

    }

    function getRecordKeys() {

		if ($this->version > 1) {
            // Filter
            $filter=array(
                          'domain'    => $this->filters['domain'],
                          'customer'  => intval($this->filters['customer']),
                          'reseller'  => intval($this->filters['reseller'])
                          );
    
            // Range
            $range=array('start' => intval($this->next),
                         'count' => intval($this->maxrowsperpage)
                         );
    
            // Order
            if (!$this->sorting['sortBy'])    $this->sorting['sortBy']    = 'changeDate';
            if (!$this->sorting['sortOrder']) $this->sorting['sortOrder'] = 'DESC';
    
            $orderBy = array('attribute' => $this->sorting['sortBy'],
                             'direction' => $this->sorting['sortOrder']
                             );

            // Compose query
            $Query=array('filter'     => $filter,
                            'orderBy' => $orderBy,
                            'range'   => $range
                            );
    
            $this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);
            $result     = $this->SOAPEngine->soapclient->getDomains($Query);

		} else {
            $this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);
            $result     = $this->SOAPEngine->soapclient->getDomains();
        }

        if (PEAR::isError($result)) {
            $error_msg  = $result->getMessage();
            $error_fault= $result->getFault();
            $error_code = $result->getCode();
            printf ("<p><font color=red>Error in getAllowedDomains from %s: %s (%s): %s</font>",$this->SOAPEngine->SOAPurl,$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            //return false;
        } else {
			if ($this->version > 1) {
				foreach ($result->domains as $_domain) {
            		$this->selectionKeys[]=$_domain->domain;
                }
            } else {
            	$this->selectionKeys[]=$result;
            }
        }
   }

}

class SIPAccounts extends Records {
    var $sortElements=array('changeDate' => 'Change date',
                            'username'   => 'Username',
                            'domain'     => 'Domain'
                            );

    function SIPAccounts(&$SOAPEngine) {
        $this->filters = array('username' => strtolower(trim($_REQUEST['username_filter'])),
                               'domain'   => strtolower(trim($_REQUEST['domain_filter'])),
                               'fullname' => trim($_REQUEST['fullname_filter'])
                              );

		$this->Records(&$SOAPEngine);
    }

    function getRecordKeys() {

		if (preg_match("/^(.*)@(.*)$/",$this->filters['username'],$m)) {
        	$this->filters['username'] = $m[1];
            $this->filters['domain']   = $m[2];
        }

        // Filter
        $filter=array('username' => $this->filters['username'],
                      'domain'   => $this->filters['domain'],
                      'name'     => $this->filters['fullname'],
                      'owner'    => intval($this->filters['owner']),
                      'customer' => intval($this->filters['customer']),
                      'reseller' => intval($this->filters['reseller'])
                      );

        // Range
        $range=array('start' => 0,
                     'count' => 1000
                     );

        // Order
        if (!$this->sorting['sortBy'])    $this->sorting['sortBy']    = 'changeDate';
        if (!$this->sorting['sortOrder']) $this->sorting['sortOrder'] = 'DESC';

        $orderBy = array('attribute' => $this->sorting['sortBy'],
                         'direction' => $this->sorting['sortOrder']
                         );

        // Compose query
        $Query=array('filter'  => $filter,
                        'orderBy' => $orderBy,
                        'range'   => $range
                        );

        // Insert credetials
        $this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);

        // Call function
        $result     = $this->SOAPEngine->soapclient->getAccounts($Query);

        if (PEAR::isError($result)) {
            $error_msg  = $result->getMessage();
            $error_fault= $result->getFault();
            $error_code = $result->getCode();
            printf ("<p><font color=red>Error from %s: %s (%s): %s</font>",$this->SOAPEngine->SOAPurl,$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            return false;
        } else {
			foreach ($result->accounts as $account) {
                $this->selectionKeys[]=array('username' => $account->id->username,
                                             'domain'   => $account->id->domain
                                             );
            }

            return true;
        }

        return false;
    }

    function listRecords() {
        $this->getAllowedDomains();

		if (preg_match("/^(.*)@(.*)$/",$this->filters['username'],$m)) {
        	$this->filters['username'] = $m[1];
            $this->filters['domain']   = $m[2];
        }

		$this->showSeachForm();

        // Filter
        $filter=array('username' => $this->filters['username'],
                      'domain'   => $this->filters['domain'],
                      'name'     => $this->filters['fullname'],
                      'owner'    => intval($this->filters['owner']),
                      'customer' => intval($this->filters['customer']),
                      'reseller' => intval($this->filters['reseller'])
                      );

        // Range
        $range=array('start' => intval($this->next),
                     'count' => intval($this->maxrowsperpage)
                     );

        // Order
        if (!$this->sorting['sortBy'])    $this->sorting['sortBy']    = 'changeDate';
        if (!$this->sorting['sortOrder']) $this->sorting['sortOrder'] = 'DESC';

        $orderBy = array('attribute' => $this->sorting['sortBy'],
                         'direction' => $this->sorting['sortOrder']
                         );

        // Compose query
        $Query=array('filter'  => $filter,
                        'orderBy' => $orderBy,
                        'range'   => $range
                        );

        // Insert credetials
        $this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);

        // Call function
        $result     = $this->SOAPEngine->soapclient->getAccounts($Query);

        if (PEAR::isError($result)) {
            $error_msg  = $result->getMessage();
            $error_fault= $result->getFault();
            $error_code = $result->getCode();
            printf ("<p><font color=red>Error from %s: %s (%s): %s</font>",$this->SOAPEngine->SOAPurl,$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            return false;
        } else {

			$this->rows = $result->total;

            if ($this->rows && $_REQUEST['action'] != 'PerformActions' && $_REQUEST['action'] != 'Delete') {
                $this->showActionsForm();
            }

            print "
            <p>
            <table border=0 align=center>
            <tr><td>$this->rows records found</td></tr>
            </table>
            <p>
            <table border=0 cellpadding=2 width=100%>
            <tr bgcolor=lightgrey>
                <td><b>Id</b></th>
                ";
                if ($this->version > 1) print "<td><b>Customer</b></td>";
                print"
                <td><b>SIP account</b></td>
                <td><b>Name</b></td>
                <td><b>Email</b></td>
                <td><b>Caller Id</b></td>
                <td><b>Quota</b></td>
                <td><b>Groups</b></td>
                <td><b>Owner</b></td>
                <td><b>Change date</b></td>
                <td><b>Action</b></td>
            </tr>
            ";

            if (!$this->next)  $this->next=0;

            if ($this->rows > $this->maxrowsperpage)  {
                $maxrows = $this->maxrowsperpage + $this->next;
                if ($maxrows > $this->rows) $maxrows = $this->maxrowsperpage;
            } else {
                $maxrows=$this->rows;
            }

            $i=0;

			//print "<pre>";
            //print_r($result->accounts);

			if ($this->rows) {
                while ($i < $maxrows)  {
    
                    if (!$result->accounts[$i]) break;
    
                    $account = $result->accounts[$i];
    
                    $index=$this->next+$i+1;
    
                    $rr=floor($index/2);
                    $mod=$index-$rr*2;
            
                    if ($mod ==0) {
                    	$bgcolor="lightgrey";
                    } else {
                        $bgcolor="white";
                    }

        			$_url = $this->url.sprintf("&service=%s&action=Delete&username_filter=%s&domain_filter=%s",
                    urlencode($this->SOAPEngine->service),
                    urlencode($account->id->username),
                    urlencode($account->id->domain)
                    );

                    if ($_REQUEST['action'] == 'Delete' &&
                    	$_REQUEST['username_filter'] == $account->id->username &&
                        $_REQUEST['domain_filter'] == $account->id->domain) {
                		$_url .= "&confirm=1";
                        $actionText = "<font color=red>Confirm</font>";
                    } else {
                        $actionText = "Delete";
                    }


					if ($account->reseller) {
                    	$resellerSipSettingsPage=$account->reseller;
                    } else if ($this->SOAPEngine->impersonate) {
                        // use the reseller from the soap engine
                    	$resellerSipSettingsPage=$this->SOAPEngine->impersonate;
                    } else {
                        // use the reseller from the login
                    	$resellerSipSettingsPage=$this->reseller;
                    }

                    if ($this->SipSettingsPage) {
                        $url=sprintf('%s?account=%s@%s&reseller=%s&soapEngine=%s',
                        $this->SipSettingsPage,$account->id->username,$account->id->domain,
                        $resellerSipSettingsPage,$this->SOAPEngine->soapEngineSettingsPage);

                        if ($this->adminonly) $url  .= sprintf('&adminonly=%s',$this->adminonly);

                        foreach (array_keys($this->SOAPEngine->extraFormElements) as $element) {
                            if (!strlen($this->SOAPEngine->extraFormElements[$element])) continue;
                            $url  .= sprintf('&%s=%s',$element,urlencode($this->SOAPEngine->extraFormElements[$element]));
                        }

                        $sip_account=sprintf("
                        <a href=\"javascript:void(null);\" onClick=\"return window.open('%s', 'SIP_Settings',
                        'toolbar=1,status=1,menubar=1,scrollbars=1,resizable=1,width=800,height=720')\">
                        %s@%s</a>",$url,$account->id->username,$account->id->domain);
                    } else {
						$sip_account=sprintf("%s@%s",$account->id->username,$account->id->domain);
                    }


                    unset($groups);
                    foreach ($account->groups as $_grp) $groups.=$_grp.' ';

                    if ($this->version > 1) {
                        $_customer_url = $this->url.sprintf("&service=customers@%s&customer_filter=%s",
                        urlencode($this->SOAPEngine->customerEngine),
                        urlencode($account->customer));

						if ($account->owner) {
                            $_owner_url = sprintf
                            ("<a href=%s&service=customers@%s&customer_filter=%s>%s</a>",
                            $this->url,
                            urlencode($this->SOAPEngine->soapEngine),
                            urlencode($account->owner),
                            $account->owner
                            );
                        } else {
                        	$_owner_url='';
                        }          

                        printf("
                        <tr bgcolor=%s>
                        <td>%s </td>
                        <td><a href=%s>%s.%s</a></td>
                        <td>%s</td>
                        <td>%s %s</td>
                        <td><a href=mailto:%s>%s</a></td>
                        <td>%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td><a href=%s>%s</a></td>
                        </tr>
                        ",
                        $bgcolor,
                        $index,
                        $_customer_url,
                        $account->customer,
                        $account->reseller,
                        $sip_account,
                        $account->firstName,
                        $account->lastName,
                        $account->email,
                        $account->email,
                        $account->rpid,
                        $account->quota,
                        $groups,
                        $_owner_url,
                        $account->changeDate,
                        $_url,
                        $actionText
                        );
                    } else {
                        printf("
                        <tr bgcolor=%s>
                        <td>%s </td>
                        <td>%s</td>
                        <td>%s %s</td>
                        <td><a href=mailto:%s>%s</a></td>
                        <td>%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td><a href=%s>%s</a></td>
                        </tr>
                        ",
                        $bgcolor,
                        $index,
                        $sip_account,
                        $account->firstName,
                        $account->lastName,
                        $account->email,
                        $account->email,
                        $account->rpid,
                        $account->quota,
                        $groups,
                        $account->owner,
                        $account->changeDate,
                        $_url,
                        $actionText
                        );
                    }

                    $i++;
                }
    
			}

            print "</table>";

            $this->showPagination($maxrows);

            return true;
        }
    }

    function showSeachFormCustom() {
        printf ("User<input type=text size=15 name=username_filter value='%s'>",$this->filters['username']);
        printf ("@");

        if (count($this->allowedDomains) > 0) {
            if ($this->filters['domain'] && !in_array($this->filters['domain'],$this->allowedDomains)) {
            	printf ("<input type=text size=15 name=domain_filter value='%s'>",$this->filters['domain']);
            } else {
                $selected_domain[$this->filters['domain']]='selected';
                printf ("<select name=domain_filter>
                <option>");
                foreach ($this->allowedDomains as $_domain) {
                    printf ("<option value='$_domain' %s>$_domain",$selected_domain[$_domain]);
                }
                printf ("</select>");
            }
        } else {
            printf ("<input type=text size=15 name=domain_filter value='%s'>",$this->filters['domain']);
        }

        printf (" Name<input type=text size=15 name=fullname_filter value='%s'>",$this->filters['fullname']);
    }

    function deleteRecord($dictionary=array()) {
        if (!$dictionary['confirm'] && !$_REQUEST['confirm']) {
        	print "<p><font color=red>Please press on Confirm to confirm the delete. </font>";
            return true;
        }

        if ($dictionary['username']) {
        	$username=$dictionary['username'];
        } else {
        	$username=$this->filters['username'];
        }

        if ($dictionary['domain']) {
        	$domain=$dictionary['domain'];
        } else {
        	$domain=$this->filters['domain'];
        }

        if (!strlen($username) || !strlen($domain)) {
            print "<p><font color=red>Error: missing SIP account username or domain. </font>";
            return false;
        }

        $account=array('username' => $username,
                       'domain'   => $domain
        			  );

        $function=array('commit'   => array('name'       => 'deleteAccount',
                                            'parameters' => array($account),
                                            'logs'       => array('success' => sprintf('<p>SIP account %s@%s has been deleted',$this->filters['username'],$this->filters['domain'])
                                                                  )
                                           )

                        );

        unset($this->filters);
        return $this->SOAPEngine->execute($function);
    }

    function showAddForm() {
		if ($this->selectionActive) return;
        if (!$this->adminonly && count($this->allowedDomains) < 1) return;

        print "
        <p>
        <table border=0 class=border width=100% bgcolor=lightblue>
        <tr>
            ";
            printf ("<form method=post name=addform action=%s>",$_SERVER['PHP_SELF']);
            print "
        	<td align=left>
            ";

            print "
            <input type=submit name=action value=Add>
            ";

            printf (" User<input type=text size=15 name=account value='%s'>",$_REQUEST['account']);
            if (count($this->allowedDomains) > 0) {
            	print "@<select name=domain>";
                foreach ($this->allowedDomains as $_domain) {
                    print "<option value=$_domain>$_domain\n";
                }
                print "</select>";

            } else {
                printf ("<input type=text name=domain size=15 value='%s'>",$_REQUEST['domain']);
            }

            printf (" Pass<input type=password size=10 name=password value='%s'>",$_REQUEST['password']);
            printf (" Name<input type=text size=15 name=fullname value='%s'>",$_REQUEST['fullname']);
            printf (" Email<input type=text size=15 name=email value='%s'>",$_REQUEST['email']);
            printf ("<nobr>Owner<input type=text size=5 name=owner value='%s'></nobr> ",$_REQUEST['owner']);
            printf ("<nobr>PSTN<input type=checkbox name=pstn value=1></nobr> ");
            printf ("<nobr>Quota<input type=text size=5 name=quota value='%s'></nobr> ",$_REQUEST['quota']);
            printf ("<nobr>Prepaid<input type=checkbox name=prepaid value=1></nobr> ");

            print "
	        </td>
        	<td align=right>
            ";
            print "
	        </td>
            ";
            $this->printHiddenFormElements();

            print "
            </form>
        </tr>
        </table>
        ";
    }

    function addRecord($dictionary=array()) {

    	if ($dictionary['account']) {
    		$account_els  = explode("@", $dictionary['account']);
        } else {
    		$account_els  = explode("@", trim($_REQUEST['account']));
        }

        if ($this->adminonly) {
            if ($dictionary['reseller']) {
        		$reseller = $dictionary['reseller'];
            } else {
        		$reseller = trim($_REQUEST['reseller']);
            }
            if ($dictionary['customer']) {
        		$customer = $dictionary['customer'];
            } else {
        		$customer = trim($_REQUEST['customer']);
            }
            if (!$customer) $customer=$reseller;
        } else {
        	$reseller = $this->reseller;

            if ($dictionary['customer']) {
        		$customer = $dictionary['customer'];
            } else {
        		$customer = trim($_REQUEST['customer']);
            }

            if (!$customer) $customer=$reseller;
        }

        $username=$account_els[0];

        if (strlen($account_els[1])) {
        	$domain=$account_els[1];
        } else if ($dictionary['domain']) {
            $domain=$dictionary['domain'];
        } else if ($_REQUEST['domain']) {
            $domain=trim($_REQUEST['domain']);
        } else {
            printf ("<p><font color=red>Error: Missing SIP domain</font>");
            return false;
        }

        if (!$this->validDomain($domain)) {
            print "<font color=red>Error: invalid domain name</font>";
            return false;
        }

        if ($dictionary['fullname']) {
        	$name_els  = explode(" ", $dictionary['fullname']);
        } else {
        	$name_els  = explode(" ", trim($_REQUEST['fullname']));
        }

		if (strlen($name_els[0])) {
            $firstName=$name_els[0];
        } else {
            $firstName='Account';
        }

		if (strlen($name_els[1])) {
            $lastName=$name_els[1];
        } else {
            $lastName=$username;
        }

        if (strlen($dictionary['timezone'])) {
            $timezone=$dictionary['timezone'];
		} else if (strlen(trim($_REQUEST['timezone']))) {
            $timezone=trim($_REQUEST['timezone']);
        } else {
            $timezone='Europe/Amsterdam';
        }

        if (strlen($dictionary['password'])) {
            $password=$dictionary['password'];
        } else if (strlen(trim($_REQUEST['password']))) {
            $password=trim($_REQUEST['password']);
        } else {
            $password=$this->RandomPassword(6);
        }

		$groups=array();
		if($dictionary['pstn'] || $_REQUEST['pstn']) $groups[]='free-pstn';

        if (strlen($dictionary['email'])) {
			$email=$dictionary['email'];
        } else {
			$email=trim($_REQUEST['email']);
        }

        if (strlen($dictionary['owner'])) {
			$owner=intval($dictionary['owner']);
        } else {
			$owner=intval($_REQUEST['owner']);
        }
        if (strlen($dictionary['quota'])) {
			$quota=intval($dictionary['quota']);
        } else {
			$quota=intval($_REQUEST['quota']);
        }
        if (strlen($dictionary['prepaid'])) {
			$prepaid=intval($dictionary['prepaid']);
        } else {
			$prepaid=intval($_REQUEST['prepaid']);
        }

		if (!$email) $email=strtolower($username).'@'.strtolower($domain);

        $account=array(
                     'id'     => array('username' => strtolower($username),
                                       'domain'   => strtolower($domain)
                                       ),
                     'firstName'  => $firstName,
                     'lastName'   => $lastName,
                     'password'   => $password,
                     'timezone'   => $timezone,
                     'email'      => $email,
                     'owner'      => $owner,
                     'customer'   => intval($customer),
                     'reseller'   => intval($reseller),
                     'groups'     => $groups,
                     'prepaid'    => $prepaid,
                     'quota'      => $quota,
                     'region'     => ''
        			);

        //print_r($account);
        $deleteAccount=array('username' => $username,
                             'domain'   => $domain);


        $function=array('commit'   => array('name'       => 'addAccount',
                                            'parameters' => array($account),
                                            'logs'       => array('success' => sprintf('<p>SIP account %s@%s has been added',$username,$domain))),
                        'rollback' => array('name'       => 'deleteAlias',
                                            'parameters' => array($deleteAccount)
                                            )
                        );
     
        return $this->SOAPEngine->execute($function);

    }

    function getAllowedDomains() {

		if ($this->version > 1) {

            // Filter
            $filter=array(
                          'domain'    => ''
                          );
    
            // Range
            $range=array('start' => 0,
                         'count' => 1000
                         );
    
            $orderBy = array('attribute' => 'domain',
                             'direction' => 'ASC'
                             );
    
            // Compose query
            $Query=array('filter'     => $filter,
                            'orderBy' => $orderBy,
                            'range'   => $range
                            );
    
            $this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);
            $result     = $this->SOAPEngine->soapclient->getDomains($Query);
		} else {
            $this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);
            $result     = $this->SOAPEngine->soapclient->getDomains();
        }

        if (PEAR::isError($result)) {
            $error_msg  = $result->getMessage();
            $error_fault= $result->getFault();
            $error_code = $result->getCode();
            printf ("<p><font color=red>Error in getAllowedDomains from %s: %s (%s): %s</font>",$this->SOAPEngine->SOAPurl,$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            //return false;
        } else {
			if ($this->version > 1) {
				foreach ($result->domains as $_domain) {
			        if ($this->validDomain($_domain->domain)) {
            			$this->allowedDomains[]=$_domain->domain;
                    }
                }
            } else {
				foreach ($result as $_domain) {
					if ($this->validDomain($_domain)) {
            			$this->allowedDomains[]=$_domain;
                	}
                }
            }
        }
     }
}

class SIPAliases extends Records {

    function SIPAliases(&$SOAPEngine) {

		$target_filters_els=explode("@",trim($_REQUEST['target_username_filter']));
        $targetUsername=$target_filters_els[0];
        if (count($target_filters_els) > 1) {
        	$targetDomain=$target_filters_els[1];
        }

        $this->filters   = array('aliasUsername'     => strtolower(trim($_REQUEST['alias_username_filter'])),
                                 'aliasDomain'       => strtolower(trim($_REQUEST['alias_domain_filter'])),
                                 'targetUsername'    => strtolower($targetUsername),
                                 'targetDomain'      => strtolower($targetDomain)
                           );


		$this->Records(&$SOAPEngine);
        if ($this->version > 1) {
            $this->sortElements=array(
                            'changeDate'     => 'Change date',
                            'aliasUsername'  => 'Alias user',
                            'aliasDomain'    => 'Alias domain',
                            'targetUsername' => 'Target user',
                            'targetDomain'   => 'Target domain',
                            );
        } else {
            $this->sortElements=array(
                            'aliasUsername'  => 'Alias user',
                            'aliasDomain'    => 'Alias domain',
                            'targetUsername' => 'Target user',
                            'targetDomain'   => 'Target domain',
                            );
        }

    }

    function getRecordKeys() {

        // Filter
        $filter=array('aliasUsername'  => $this->filters['aliasUsername'],
                      'aliasDomain'    => $this->filters['aliasDomain'],
                      'targetUsername' => $this->filters['targetUsername'],
                      'targetDomain'   => $this->filters['targetDomain'],
                      'owner'          => intval($this->filters['owner']),
                      'customer'       => intval($this->filters['customer']),
                      'reseller'       => intval($this->filters['reseller'])
                      );

        // Range
        $range=array('start' => 0,
                     'count' => 1000
                     );

        // Order
        if (!$this->sorting['sortBy'])    $this->sorting['sortBy']    = 'aliasUsername';
        if (!$this->sorting['sortOrder']) $this->sorting['sortOrder'] = 'DESC';

        $orderBy = array('attribute' => $this->sorting['sortBy'],
                         'direction' => $this->sorting['sortOrder']
                         );

        // Compose query
        $Query=array('filter'  => $filter,
                        'orderBy' => $orderBy,
                        'range'   => $range
                        );

        //print_r($Query);
        // Insert credetials
        $this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);

        // Call function
        $result     = $this->SOAPEngine->soapclient->getAliases($Query);

        if (PEAR::isError($result)) {
            $error_msg  = $result->getMessage();
            $error_fault= $result->getFault();
            $error_code = $result->getCode();
            printf ("<p><font color=red>Error from %s: %s (%s): %s</font>",$this->SOAPEngine->SOAPurl,$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            return false;
        } else {
			foreach ($result->aliases as $alias) {
                $this->selectionKeys[]=array('username' => $alias->id->username,
                                             'domain'   => $alias->id->domain);
            }

            return true;
        }
    }


    function listRecords() {
        $this->getAllowedDomains();

        // Make sure we apply the domain filter from the login credetials

		$this->showSeachForm();

        // Filter
        $filter=array('aliasUsername'  => $this->filters['aliasUsername'],
                      'aliasDomain'    => $this->filters['aliasDomain'],
                      'targetUsername' => $this->filters['targetUsername'],
                      'targetDomain'   => $this->filters['targetDomain'],
                      'owner'          => intval($this->filters['owner']),
                      'customer'       => intval($this->filters['customer']),
                      'reseller'       => intval($this->filters['reseller'])

                      );

        // Range
        $range=array('start' => intval($this->next),
                     'count' => intval($this->maxrowsperpage)
                     );

        // Order
        if (!$this->sorting['sortBy'])    $this->sorting['sortBy']    = 'aliasUsername';
        if (!$this->sorting['sortOrder']) $this->sorting['sortOrder'] = 'DESC';

        $orderBy = array('attribute' => $this->sorting['sortBy'],
                         'direction' => $this->sorting['sortOrder']
                         );

        // Compose query
        $Query=array('filter'  => $filter,
                        'orderBy' => $orderBy,
                        'range'   => $range
                        );

        // Insert credetials
        $this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);

        // Call function
        $result     = $this->SOAPEngine->soapclient->getAliases($Query);

        if (PEAR::isError($result)) {
            $error_msg  = $result->getMessage();
            $error_fault= $result->getFault();
            $error_code = $result->getCode();
            printf ("<p><font color=red>Error from %s: %s (%s): %s</font>",$this->SOAPEngine->SOAPurl,$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            return false;
        } else {

			$this->rows = $result->total;

     		if ($this->rows && $_REQUEST['action'] != 'PerformActions' && $_REQUEST['action'] != 'Delete') {
                $this->showActionsForm();
            }

            print "
            <p>
            <table border=0 align=center>
            <tr><td>$this->rows records found</td></tr>
            </table>
            <p>
            <table border=0 cellpadding=2 width=100%>
            <tr bgcolor=lightgrey>
                <td><b>Id</b></th>
                ";
                if ($this->version > 1) print "<td><b>Customer</b></td>";
                print"
                <td><b>Alias</b></td>
                <td><b>Target</b></td>
                <td><b>Owner</b></td>
                <td><b>Change date</b></td>
                <td><b>Action</b></td>
            </tr>
            ";

            if (!$this->next)  $this->next=0;

            if ($this->rows > $this->maxrowsperpage)  {
                $maxrows = $this->maxrowsperpage + $this->next;
                if ($maxrows > $this->rows) $maxrows = $this->maxrowsperpage;
            } else {
                $maxrows=$this->rows;
            }

            $i=0;

			if ($this->rows) {
                while ($i < $maxrows)  {
    
                    if (!$result->aliases[$i]) break;
    
                    $alias = $result->aliases[$i];
    
                    $index=$this->next+$i+1;
    
                    $rr=floor($index/2);
                    $mod=$index-$rr*2;
            
                    if ($mod ==0) {
                    	$bgcolor="lightgrey";
                    } else {
                        $bgcolor="white";
                    }

        			$_url = $this->url.sprintf("&service=%s&action=Delete&alias_username_filter=%s&alias_domain_filter=%s",
                    urlencode($this->SOAPEngine->service),
                    urlencode($alias->id->username),
                    urlencode($alias->id->domain)
                    );

                    if ($_REQUEST['action'] == 'Delete' &&
                    	$_REQUEST['alias_username_filter'] == $alias->id->username &&
                        $_REQUEST['alias_domain_filter'] == $alias->id->domain) {
                		$_url .= "&confirm=1";
                        $actionText = "<font color=red>Confirm</font>";
                    } else {
                        $actionText = "Delete";
                    }

                    if ($this->version > 1) {

                        $_customer_url = $this->url.sprintf("&service=customers@%s&customer_filter=%s",
                        urlencode($this->SOAPEngine->customerEngine),
                        urlencode($alias->customer)
                        );
    
						if ($alias->owner) {
                            $_owner_url = sprintf
                            ("<a href=%s&service=customers@%s&customer_filter=%s>%s</a>",
                            $this->url,
                            urlencode($this->SOAPEngine->soapEngine),
                            urlencode($alias->owner),
                            $alias->owner
                            );
                        } else {
                        	$_owner_url='';
                        }          

                        printf("
                        <tr bgcolor=%s>
                        <td>%s</td>
                        <td><a href=%s>%s.%s</a></td>
                        <td>%s@%s</td>
                        <td>%s@%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td><a href=%s>%s</a></td>
                        </tr>
                        ",
                        $bgcolor,
                        $index,
                        $_customer_url,
                        $alias->customer,
                        $alias->reseller,
                        $alias->id->username,
                        $alias->id->domain,
                        $alias->target->username,
                        $alias->target->domain,
                        $_owner_url,
                        $alias->changeDate,
                        $_url,
                        $actionText
                        );
                    } else {
                        printf("
                        <tr bgcolor=%s>
                        <td>%s</td>
                        <td>%s@%s</td>
                        <td>%s@%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td><a href=%s>%s</a></td>
                        </tr>
                        ",
                        $bgcolor,
                        $index,
                        $alias->id->username,
                        $alias->id->domain,
                        $alias->target->username,
                        $alias->target->domain,
                        $alias->owner,
                        $alias->changeDate,
                        $_url,
                        $actionText
                        );
                    }
                    $i++;
    
                }
    
			}

            print "</table>";

            $this->showPagination($maxrows);

            return true;
        }
    }

    function deleteRecord($dictionary=array()) {
        if (!$dictionary['confirm'] && !$_REQUEST['confirm']) {
        	print "<p><font color=red>Please press on Confirm to confirm the delete. </font>";
            return true;
        }

        if ($dictionary['aliasUsername']) {
        	$aliasUsername=$dictionary['aliasUsername'];
        } else {
        	$aliasUsername=$this->filters['aliasUsername'];
        }

        if ($dictionary['aliasDomain']) {
        	$aliasDomain=$dictionary['aliasDomain'];
        } else {
        	$aliasDomain=$this->filters['aliasDomain'];
        }

        if (!strlen($aliasUsername) || !strlen($aliasDomain)) {
            print "<p><font color=red>Error: missing SIP alias username or domain. </font>";
            return false;
        }

        $alias=array('username' => $aliasUsername,
                     'domain'   => $aliasDomain
        			);

        $function=array('commit'   => array('name'       => 'deleteAlias',
                                            'parameters' => array($alias),
                                            'logs'       => array('success' => sprintf('<p>SIP alias %s@%s has been deleted',$this->filters['aliasUsername'],$this->filters['aliasDomain'])
                                                                  )
                                           )

                        );

        unset($this->filters);
        return $this->SOAPEngine->execute($function);
    }

    function showSeachFormCustom() {
        printf (" Alias<input type=text size=15 name=alias_username_filter value='%s'>",$this->filters['aliasUsername']);
        printf ("@");

        if (count($this->allowedDomains) > 0) {
            if ($this->filters['aliasDomain'] && !in_array($this->filters['aliasDomain'],$this->allowedDomains)) {
            	printf ("<input type=text size=15 name=alias_domain_filter value='%s'>",$this->filters['aliasDomain']);
            } else {
                $selected_domain[$this->filters['aliasDomain']]='selected';
                printf ("<select name=alias_domain_filter>
                <option>");
    
                foreach ($this->allowedDomains as $_domain) {
                    printf ("<option value='$_domain' %s>$_domain",$selected_domain[$_domain]);
                }
    
                printf ("</select>");
            }
        } else {
            printf ("<input type=text size=15 name=alias_domain_filter value='%s'>",$this->filters['aliasDomain']);
        }

        printf (" Target<input type=text size=15 name=target_username_filter value='%s'>",trim($_REQUEST['target_username_filter']));

    }

    function showAddForm() {
		if ($this->selectionActive) return;
        if (!$this->adminonly && count($this->allowedDomains) < 1) return;

        print "
        <p>
        <table border=0 class=border width=100% bgcolor=lightblue>
        <tr>
            ";
            printf ("<form method=post name=addform action=%s>",$_SERVER['PHP_SELF']);
            print "
        	<td align=left>
            ";

            print "
            <input type=submit name=action value=Add>
            ";

            printf (" Alias<input type=text size=15 name=alias>");

            if (count($this->allowedDomains) > 0) {
            	print "@<select name=domain>";
                foreach ($this->allowedDomains as $_domain) {
                    print "<option value=$_domain>$_domain\n";
                }
                print "</select>";
            } else {
                print "<input type=text size=10 name=domain>";
            }

            printf (" Target<input type=text size=35 name=target>");

            printf (" Owner<input type=text size=5 name=owner>");

            print "
	        </td>
        	<td align=right>
            ";
            print "
	        </td>
            ";
            $this->printHiddenFormElements();

            print "
            </form>
        </tr>
        </table>
        ";
    }

    function addRecord($dictionary=array()) {

    	if ($dictionary['alias']) {
    		$alias_els  = explode("@", $dictionary['alias']);
        } else {
    		$alias_els  = explode("@", trim($_REQUEST['alias']));
        }

    	if ($dictionary['target']) {
    		$target_els = explode("@", $dictionary['target']);
        } else {
	        $target_els = explode("@", trim($_REQUEST['target']));
        }

        $username=$alias_els[0];

        if (strlen($alias_els[1])) {
        	$domain=$alias_els[1];

        } else if (trim($_REQUEST['domain'])) {
            $domain=trim($_REQUEST['domain']);

        } else {
            printf ("<p><font color=red>Error: Missing SIP domain</font>");
            return false;
        }

        if (!$this->validDomain($domain)) {
            print "<font color=red>Error: invalid domain name</font>";
            return false;
        }

        if ($this->adminonly) {
            if ($dictionary['reseller']) {
        		$reseller = $dictionary['reseller'];
            } else {
        		$reseller = trim($_REQUEST['reseller']);
            }
            if ($dictionary['customer']) {
        		$customer = $dictionary['customer'];
            } else {
        		$customer = trim($_REQUEST['customer']);
            }
            if (!$customer) $customer=$reseller;
        } else {
        	$reseller = $this->reseller;

            if ($dictionary['customer']) {
        		$customer = $dictionary['customer'];
            } else {
        		$customer = trim($_REQUEST['customer']);
            }

            if (!$customer) $customer=$reseller;
        }

        $alias=array(
                     'id'     => array('username' => strtolower($username),
                                       'domain'   => strtolower($domain)
                                       ),
                     'target' => array('username' => $target_els[0],
                                       'domain'   => $target_els[1]
                                       ),
                     'owner'  => intval($_REQUEST['owner']),
                     'customer'   => intval($customer),
                     'reseller'   => intval($reseller)
        			);

        $deleteAlias=array('username' => strtolower($username),
                           'domain'   => strtolower($domain)
                           );

        $function=array('commit'   => array('name'       => 'addAlias',
                                            'parameters' => array($alias),
                                            'logs'       => array('success' => sprintf('<p>SIP alias %s@%s has been added',$username,$domain))),
                        'rollback' => array('name'       => 'deleteAlias',
                                            'parameters' => array($deleteAlias)
                                            )
                        );
     
        return $this->SOAPEngine->execute($function);
    }

    function getAllowedDomains() {
		if ($this->version > 1) {

            // Filter
            $filter=array(
                          'domain'    => ''
                          );
    
            // Range
            $range=array('start' => 0,
                         'count' => 1000
                         );
    
            $orderBy = array('attribute' => 'domain',
                             'direction' => 'ASC'
                             );
    
            // Compose query
            $Query=array('filter'     => $filter,
                            'orderBy' => $orderBy,
                            'range'   => $range
                            );
    
            $this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);
            $result     = $this->SOAPEngine->soapclient->getDomains($Query);
		} else {
            $this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);
            $result     = $this->SOAPEngine->soapclient->getDomains();
        }

        if (PEAR::isError($result)) {
            $error_msg  = $result->getMessage();
            $error_fault= $result->getFault();
            $error_code = $result->getCode();
            printf ("<p><font color=red>Error from %s: %s (%s): %s</font>",$this->SOAPEngine->SOAPurl,$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            return false;
        } else {
			if ($this->version > 1) {
				foreach ($result->domains as $_domain) {
			        if ($this->validDomain($_domain->domain)) {
            			$this->allowedDomains[]=$_domain->domain;
                    }
                }
            } else {
				foreach ($result as $_domain) {
					if ($this->validDomain($_domain)) {
            			$this->allowedDomains[]=$_domain;
                	}
                }
            }
        }
    }
}

class ENUMranges extends Records {
	// only admin can add prefixes below
    var $deniedPrefixes=array('1','20','210','211','212','213','214','215','216','217','218','219','220','221','222','223','224','225','226','227','228','229','230','231','232','233','234','235','236','237','238','239','240','241','242','243','244','245','246','247','248','249','250','251','252','253','254','255','256','257','258','259','260','261','262','263','264','265','266','267','268','269','27','280','281','282','283','284','285','286','287','288','289','290','291','292','293','294','295','296','297','298','299','30','31','32','33','34','350','351','352','353','354','355','356','357','358','359','36','370','371','372','373','374','375','376','377','378','379','380','381','382','383','384','385','386','387','388','389','39','40','41','420','421','422','423','424','425','426','427','428','429','43','44','45','46','47','48','49','500','501','502','503','504','505','506','507','508','509','51','52','53','54','55','56','57','58','590','591','592','593','594','595','596','597','598','599','60','61','62','63','64','65','66','670','671','672','673','674','675','676','677','678','679','680','681','682','683','684','685','686','687','688','689','690','691','692','693','694','695','696','697','698','699','7','800','801','802','803','804','805','806','807','808','809','81','82','830','831','832','833','834','835','836','837','838','839','84','850','851','852','853','854','855','856','857','858','859','86','870','871','872','873','874','875','876','877','878','879','880','881','882','883','884','885','886','887','888','889','890','891','892','893','894','895','896','897','898','899','90','91','92','93','94','95','960','961','962','963','964','965','966','967','968','969','970','971','972','973','974','975','976','977','978','979','98','990','991','992','993','994','995','996','997','998','999');

    var $FieldsAdminOnly=array(
                              'reseller' => array('type'=>'integer'),
                              );
    var $Fields=array(
                              'customer' => array('type'=>'integer'),
                              'info'     => array('type'=>'string'),
                              'size'     => array('type'=>'integer'),
                              'ttl'      => array('type'=>'integer')
                              );

    function ENUMranges(&$SOAPEngine) {

        $this->filters   = array('prefix'       => trim($_REQUEST['prefix_filter']),
                                 'tld'          => trim($_REQUEST['tld_filter']),
                                 'info'         => trim($_REQUEST['info_filter'])
                                 );

		$this->Records(&$SOAPEngine);

        if ($this->version > 1) {
        	$this->sortElements=array('changeDate' => 'Change date',
                  	        	      'prefix'     => 'Prefix',
                    	        	  'tld'        => 'TLD'
	                        	     );
        }
    }

    function listRecords() {
        $this->getAllowedDomains();
		$this->showSeachForm();

		if ($this->version > 1) {
            // Filter
            $filter=array('prefix'   => $this->filters['prefix'],
                          'tld'      => $this->filters['tld'],
                          'info'     => $this->filters['info'],
  	                      'customer' => intval($this->filters['customer']),
    	                  'reseller' => intval($this->filters['reseller'])
                          );

            // Range
            $range=array('start' => intval($this->next),
                         'count' => intval($this->maxrowsperpage)
                         );
    
            // Order
            if (!$this->sorting['sortBy'])    $this->sorting['sortBy']    = 'changeDate';
            if (!$this->sorting['sortOrder']) $this->sorting['sortOrder'] = 'DESC';
    
            $orderBy = array('attribute' => $this->sorting['sortBy'],
                             'direction' => $this->sorting['sortOrder']
                             );
    
            // Compose query
            $Query=array('filter'  => $filter,
                         'orderBy' => $orderBy,
                         'range'   => $range
                         );
    
            $this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);
            $result     = $this->SOAPEngine->soapclient->getRanges($Query);
    
        } else {
        	$this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);
        	$result     = $this->SOAPEngine->soapclient->getRanges();
        }

        if (PEAR::isError($result)) {
            $error_msg  = $result->getMessage();
            $error_fault= $result->getFault();
            $error_code = $result->getCode();
            printf ("<p><font color=red>Error from %s: %s (%s): %s</font>",$this->SOAPEngine->SOAPurl,$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            return false;
        } else {

			if ($this->version > 1) {
				$this->rows = $result->total;
            } else {
				$this->rows = count($result);
            }

     		if ($this->rows && $_REQUEST['action'] != 'PerformActions' && $_REQUEST['action'] != 'Delete') {
                $this->showActionsForm();
            }

            print "
            <p>
            <table border=0 align=center>
            <tr><td>$this->rows records found</td></tr>
            </table>
            <p>
            <table border=0 cellpadding=2 width=100%>
                ";
                if ($this->version > 1) {
                	print "
		            <tr bgcolor=lightgrey>
        	        <td><b>Id</b></th>
                    <td><b>Customer</b></td>
                    <td><b>Prefix </b></td>
                    <td><b>TLD</b></td>
                    <td><b>Info</b></td>
                    <td><b>TTL</b></td>
                    <td><b>Min digits</b></td>
                    <td><b>Max digits</b></td>
                    <td><b>Size</b></td>
                    <td colspan=2><b>Used</b></td>
                    <td><b>Change date</b></td>
                    <td><b>Action</b></td>
            		</tr>
                    ";
                } else {
                	print "
		            <tr bgcolor=lightgrey>
        	        <td><b>Id</b></th>
                    <td><b>Prefix </b></td>
                    <td><b>TLD</b></td>
                    <td><b>TTL</b></td>
                    <td><b>Min digits</b></td>
                    <td><b>Max digits</b></td>
                    <td><b>Size</b></td>
                    <td colspan=2><b>Used</b></td>
                    <td><b>Change date</b></td>
                    <td><b>Action</b></td>
            		</tr>
                    ";
                }

     		if (!$this->next)  $this->next=0;

            if ($this->rows > $this->maxrowsperpage)  {
                $maxrows = $this->maxrowsperpage + $this->next;
                if ($maxrows > $this->rows) $maxrows = $this->maxrowsperpage;
            } else {
                $maxrows=$this->rows;
            }

            $i=0;

			if ($this->rows) {
                while ($i < $maxrows)  {
    
					if ($this->version > 1) {
                    	if (!$result->ranges[$i]) break;
                    	$range = $result->ranges[$i];

                    } else {
                    	$range = $result[$i];
                    }

                    $index=$this->next+$i+1;
    
                    $rr=floor($index/2);
                    $mod=$index-$rr*2;
            
                    if ($mod ==0) {
                    	$bgcolor="lightgrey";
                    } else {
                        $bgcolor="white";
                    }

        			$_url = $this->url.sprintf("&service=%s&action=Delete&prefix_filter=%s&tld_filter=%s",
                    urlencode($this->SOAPEngine->service),
                    urlencode($range->id->prefix),
                    urlencode($range->id->tld)
                    );

                    if ($_REQUEST['action'] == 'Delete' &&
                        $_REQUEST['prefix_filter'] == $range->id->prefix &&
                        $_REQUEST['tld_filter'] == $range->id->tld) {
                		$_url .= "&confirm=1";
                        $actionText = "<font color=red>Confirm</font>";
                    } else {
                        $actionText = "Delete";
                    }

					if ($this->adminonly) {
                    	if ($this->loginCredentials['resellerFilters'][$range->reseller]['recordGenerator']) {
                            $generator_link=sprintf('<a href=%s&generatorId=%s&range=%s@%s&len=%s&reseller_filter=%s target=generator>G</a>',$this->url,$this->loginCredentials['resellerFilters'][$range->reseller]['recordGenerator'],$range->id->prefix,$range->id->tld,$range->maxDigits,$range->reseller);
                        } else  if (strlen($this->SOAPEngine->recordGenerator)) {
                            $generator_link=sprintf('<a href=%s&generatorId=%s&range=%s@%s&len=%s&reseller_filter=%s target=generator>G</a>',$this->url,$this->SOAPEngine->recordGenerator,$range->id->prefix,$range->id->tld,$range->maxDigits,$range->reseller);
                        }
                        $range_link=sprintf('<a href=%s&service=%s&reseller_filter=%s&prefix_filter=%s&tld_filter=%s>%s</a>',$this->url,$this->SOAPEngine->service,$range->reseller,$range->id->prefix,$range->id->tld,$range->id->prefix);

                    } else {
                        if (strlen($this->SOAPEngine->recordGenerator)) {
                            $generator_link=sprintf('<a href=%s&generatorId=%s&range=%s@%s&len=%s&reseller_filter=%s target=generator>G</a>',$this->url,$this->SOAPEngine->recordGenerator,$range->id->prefix,$range->id->tld,$range->maxDigits,$range->reseller);
                        } else {
                            $generator_link='';
                        }
                        $range_link=sprintf('<a href=%s&&service=%s&prefix_filter=%s&tld_filter=%s>%s</a>',$this->url,$this->SOAPEngine->service,$range->id->prefix,$range->id->tld,$range->id->prefix);
                    }

					if ($range->size) {
                    	$usage=intval(100*$range->used/$range->size);
                        $bar=$this->makebar($usage);
                    } else {
                        $bar="";
                    }

                    if ($this->version > 1) {
                        $_customer_url = $this->url.sprintf("&service=customers@%s&customer_filter=%s",
                        urlencode($this->SOAPEngine->customerEngine),
                        urlencode($range->customer)
                        );
                        
                        printf("
                        <tr bgcolor=%s>
                        <td>%s %s</td>
                        <td><a href=%s>%s.%s</a></td>
                        <td>+%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td><a href=%s>%s</a></td>
                        </tr>",
                        $bgcolor,
                        $index,
                        $generator_link,
                        $_customer_url,
                        $range->customer,
                        $range->reseller,
                        $range_link,
                        $range->id->tld,
                        $range->info,
                        $range->ttl,
                        $range->minDigits,
                        $range->maxDigits,
                        $range->size,
                        $range->used,
                        $bar,
                        $range->changeDate,
                        $_url,
                        $actionText
                        );
                    } else {
                        printf("
                        <tr bgcolor=%s>
                        <td>%s</td>
                        <td>+%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td><a href=%s>%s</a></td>
                        </tr>",
                        $bgcolor,
                        $index,
                        $range_link,
                        $range->id->tld,
                        $range->ttl,
                        $range->minDigits,
                        $range->maxDigits,
                        $range->size,
                        $range->used,
                        $bar,
                        $range->changeDate,
                        $_url,
                        $actionText
                        );
                    }
                    printf("
                    </tr>
                    ");

                    $i++;
    
                }
    
			}

            print "</table>";

			if ($this->rows == 1 && $this->version > 1) {
                $this->showRecord($range);
            } else {
            	$this->showPagination($maxrows);
            }

            return true;
        }
    }

    function deleteRecord($dictionary=array()) {
        if (!$dictionary['confirm'] && !$_REQUEST['confirm']) {
        	print "<p><font color=red>Please press on Confirm to confirm the delete. </font>";
            return true;
        }

        if (!strlen($this->filters['prefix']) || !strlen($this->filters['tld'])) {
            print "<p><font color=red>Error: missing ENUM range id </font>";
            return false;
        }

        $rangeId=array('prefix'=>$this->filters['prefix'],
                       'tld'=>$this->filters['tld']);

        $function=array('commit'   => array('name'       => 'deleteRange',
                                            'parameters' => array($rangeId),
                                            'logs'       => array('success' => sprintf('<p>ENUM range +%s under %s has been deleted',$this->filters['prefix'],$this->filters['tld'])
                                                                  )
                                            )
                        );

        unset($this->filters);
        return $this->SOAPEngine->execute($function);
    }

    function showAddForm() {
		if ($this->selectionActive) return;

        print "
        <p>
        <table border=0 class=border width=100% bgcolor=lightblue>
        <tr>
            ";
            printf ("<form method=post name=addform action=%s>",$_SERVER['PHP_SELF']);
            print "
        	<td align=left>
            ";

            print "
            <input type=submit name=action value=Add>
            ";
            printf ("Prefix +<input type=text size=15 name=prefix value='%s'> ",$_REQUEST['prefix']);
            printf (" TLD");
            printf ("<input type=text size=15 name=tld value='%s'>",$_REQUEST['tld']);
            printf ("TTL<input type=text size=5 name=ttl value=3600> ");
            printf ("Min Digits<input type=text size=3 name=minDigits value=11> ");
            printf ("Max Digits<input type=text size=3 name=maxDigits value=11> ");
            if ($this->version > 1) {
                $this->showCustomerTextBox();
            	printf ("Info<input type=text size=15 name=info value='%s'> ",$_REQUEST['info']);
            }

            print "
	        </td>
        	<td align=right>
            ";
            print "
	        </td>
            ";

            $this->printHiddenFormElements();

            print "
            </form>
        </tr>
        </table>
        ";
    }

    function addRecord() {
    	$tld    = trim($_REQUEST['tld']);
        $prefix = trim($_REQUEST['prefix']);
        $size   = trim($_REQUEST['size']);
        $info   = trim($_REQUEST['info']);

        if (!strlen($tld)) {
            if (strlen($this->SOAPEngine->defaultEnumTLD)) {
                $tld=$this->SOAPEngine->defaultEnumTLD;
            } else {
        		$tld='e164.arpa';
            }
        }

		if (!strlen($tld) || !strlen($prefix) || !is_numeric($prefix)) {
            printf ("<p><font color=red>Error: Missing TLD or prefix. </font>");
            return false;
        }

        if ($this->adminonly) {
        	$reseller = trim($_REQUEST['reseller']);
        	$customer = trim($_REQUEST['customer']);
            if (!$customer) $customer=$reseller;
        } else {
			if (in_array($prefix,$this->deniedPrefixes)) {
                print "<p><font color=red>Error: Only an administrator account can create the prefix coresponding to a country code.</font>";
                return false;
            }

        	$reseller = $this->reseller;
        	$customer = trim($_REQUEST['customer']);
            if (!$customer || !in_array($customer,array_keys($this->customers))) {
                $customer=$reseller;
            }
        }

		if (!trim($_REQUEST['ttl'])) {
            $ttl=3600;
        } else {
            $ttl=intval(trim($_REQUEST['ttl']));
        }

        $range=array(
                     'id'         => array('prefix' => $prefix,
                                           'tld'    => $tld),
                     'ttl'        => $ttl,
                     'info'       => $info,
                     'minDigits'  => intval(trim($_REQUEST['minDigits'])),
                     'maxDigits'  => intval(trim($_REQUEST['maxDigits'])),
                     'size'       => intval($size),
                     'customer'   => intval($customer),
                     'reseller'   => intval($reseller)
        			);

        $deleteRange=array('prefix'=>$prefix,
                           'tld'=>$tld);

        $function=array('commit'   => array('name'       => 'addRange',
                                            'parameters' => array($range),
                                            'logs'       => array('success' => sprintf('<p>ENUM range +%s under %s has been added',$prefix,$tld))),
                        'rollback' => array('name'       => 'deleteRange',
                                            'parameters' => array($deleteRange)
                                            )
                        );
     
        return $this->SOAPEngine->execute($function);

    }

    function showSeachFormCustom() {
        if ($this->version > 1) {
        	printf (" Prefix<input type=text size=15 name=prefix_filter value='%s'>",$this->filters['prefix']);
            printf (" TLD");

            if (count($this->allowedDomains) > 0) {
                $selected_tld[$this->filters['tld']]='selected';
                printf ("<select name=tld_filter>
                <option>");
    
                foreach ($this->allowedDomains as $_tld) {
                    printf ("<option value='%s' %s>%s",$_tld,$selected_tld[$_tld],$_tld);
                }
    
                printf ("</select>");
            } else {
                printf ("<input type=text size=10 name=tld_filter value='%s'>",$this->filters['tld']);
            }
        	printf (" Info<input type=text size=15 name=info_filter value='%s'>",$this->filters['info']);
        }
    }

    function getAllowedDomains() {
        // Insert credetials
		if ($this->version > 1) {
            // Filter
            $filter=array('prefix'   => '');
            // Range
            $range=array('start' => 0,
                         'count' => 200
                         );
    
            // Order
            if (!$this->sorting['sortBy'])    $this->sorting['sortBy']    = 'changeDate';
            if (!$this->sorting['sortOrder']) $this->sorting['sortOrder'] = 'DESC';
    
            $orderBy = array('attribute' => $this->sorting['sortBy'],
                             'direction' => $this->sorting['sortOrder']
                             );
    
            // Compose query
            $Query=array('filter'  => $filter,
                         'orderBy' => $orderBy,
                         'range'   => $range
                         );
    
            $this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);
            $result     = $this->SOAPEngine->soapclient->getRanges($Query);
    
        } else {
        	$this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);
        	$result     = $this->SOAPEngine->soapclient->getRanges();
        }

        if (PEAR::isError($result)) {
            $error_msg  = $result->getMessage();
            $error_fault= $result->getFault();
            $error_code = $result->getCode();
            printf ("<p><font color=red>Error from %s: %s (%s): %s</font>",$this->SOAPEngine->SOAPurl,$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            return false;
        } else {
			if ($this->version > 1) {
                foreach($result->ranges as $range) {
                    $this->ranges[]=array('prefix'    => $range->id->prefix,
                                          'tld'       => $range->id->tld,
                                          'minDigits' => $range->minDigits,
                                          'maxDigits' => $range->maxDigits
                                          );
                    if (in_array($range->id->tld,$this->allowedDomains)) continue;
                    $this->allowedDomains[]=$range->id->tld;
                    $seen[$range->id->tld]++;
                }
            } else {
                foreach($result as $range) {
                    $this->ranges[]=array('prefix'    => $range->id->prefix,
                                          'tld'       => $range->id->tld,
                                          'minDigits' => $range->minDigits,
                                          'maxDigits' => $range->maxDigits
                                          );
                    if (in_array($range->id->tld,$this->allowedDomains)) continue;
                    $this->allowedDomains[]=$range->id->tld;
                    $seen[$range->id->tld]++;
                }
            }

            if (strlen($this->SOAPEngine->defaultEnumTLD) && !$seen[$this->SOAPEngine->defaultEnumTLD]) {
            	$this->allowedDomains[]=$this->SOAPEngine->defaultEnumTLD;
            }
        }
    }

    function showRecord($range) {

        print "<table border=0 cellpadding=10>";
        print "
        <tr>
        <td valign=top>
        <table border=0>";
        printf ("<form method=post name=addform action=%s>",$_SERVER['PHP_SELF']);
        print "<input type=hidden name=action value=Update>";

        print "<tr>
        <td colspan=2><input type=submit value=Update>
        </td></tr>";

        printf ("<tr><td class=border>DNS name</td><td class=border>%s</td></td>",
        $this->tel2enum($range->id->prefix,$range->id->tld));

		if ($this->adminonly) {

            foreach (array_keys($this->FieldsAdminOnly) as $item) {
                if ($this->FieldsAdminOnly[$item]['name']) {
                    $item_name=$this->FieldsAdminOnly[$item]['name'];
                } else {
                    $item_name=ucfirst($item);
                }
    
                if ($this->FieldsAdminOnly[$item]['type'] == 'text') {
                    printf ("<tr>
                    <td class=border valign=top>%s</td>
                    <td class=border><textarea cols=30 name=%s_form rows=4>%s</textarea></td>
                    </tr>",
                    $item_name,
                    $item,
                    $range->$item
                    );
                } else {
                    printf ("<tr>
                    <td class=border valign=top>%s</td>
                    <td class=border><input name=%s_form size=30 type=text value='%s'></td>
                    </tr>",
                    $item_name,
                    $item,
                    $range->$item
                    );
                }
            }
    
        }
        foreach (array_keys($this->Fields) as $item) {
            if ($this->Fields[$item]['name']) {
                $item_name=$this->Fields[$item]['name'];
            } else {
                $item_name=ucfirst($item);
            }

            if ($this->Fields[$item]['type'] == 'text') {
                printf ("<tr>
                <td class=border valign=top>%s</td>
                <td class=border><textarea cols=30 name=%s_form rows=4>%s</textarea></td>
                </tr>",
                $item_name,
                $item,
                $range->$item
                );
            } else {
                printf ("<tr>
                <td class=border valign=top>%s</td>
                <td class=border><input name=%s_form size=30 type=text value='%s'></td>
                </tr>",
                $item_name,
                $item,
                $range->$item
                );
            }
        }

        printf ("<input type=hidden name=tld_filter value='%s'",$range->id->tld);
        printf ("<input type=hidden name=prefix_filter value='%s'",$range->id->prefix);
        $this->printFiltersToForm();
        $this->printHiddenFormElements();

        print "</form>";
        print "
        </table>
        ";
    }

    function updateRecord () {
        //print "<p>Updating range ...";

        if (!$_REQUEST['prefix_filter'] || !$_REQUEST['tld_filter']) return;

        $rangeid=array('prefix' => $_REQUEST['prefix_filter'],
                      'tld'    => $_REQUEST['tld_filter']
                     );

        if (!$range = $this->getRecord($rangeid)) {
            return false;
        }

        $range_old=$range;

        foreach (array_keys($this->Fields) as $item) {
            $var_name=$item.'_form';
            //printf ("<br>%s=%s",$var_name,$_REQUEST[$var_name]);
            if ($this->Fields[$item]['type'] == 'integer') {
                $range->$item = intval($_REQUEST[$var_name]);
            } else {
                $range->$item = trim($_REQUEST[$var_name]);
            }
        }

		if ($this->adminonly) {
            foreach (array_keys($this->FieldsAdminOnly) as $item) {
                $var_name=$item.'_form';
                //printf ("<br>%s=%s",$var_name,$_REQUEST[$var_name]);
                if ($this->FieldsAdminOnly[$item]['type'] == 'integer') {
                    $range->$item = intval($_REQUEST[$var_name]);
                } else {
                    $range->$item = trim($_REQUEST[$var_name]);
                }
            }
        }

        //dprint_r($range);
        //return true;
        $function=array('commit'   => array('name'       => 'updateRange',
                                            'parameters' => array($range),
                                            'logs'       => array('success' => sprintf('<p>ENUM range +%s under %s has been updated',$rangeid['prefix'],$rangeid['tld']))),
                        'rollback' => array('name'       => 'updateRange',
                                            'parameters' => array($range_old))
                        );
     
        return $this->SOAPEngine->execute($function);

    }

    function getRecord($rangeid) {
            // Filter
	        if (!$rangeid['prefix'] || !$rangeid['tld']) {
                print "Error in getRecord(): Missing prefix or tld";
            	return false;
            }

            $filter=array('prefix'   => $rangeid['prefix'],
                          'tld'      => $rangeid['tld']
                          );

            // Range
            $range=array('start' => 0,
                         'count' => 1
                         );
    
            // Order
            $orderBy = array('attribute' => 'changeDate',
                             'direction' => 'DESC'
                             );
    
            // Compose query
            $Query=array('filter'  => $filter,
                         'orderBy' => $orderBy,
                         'range'   => $range
                         );
    
            $this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);
            $result     = $this->SOAPEngine->soapclient->getRanges($Query);

        if (PEAR::isError($result)) {
            $error_msg  = $result->getMessage();
            $error_fault= $result->getFault();
            $error_code = $result->getCode();
            printf ("<p><font color=red>Error from %s: %s (%s): %s</font>",$this->SOAPEngine->SOAPurl,$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            return false;
        } else {
        	if ($result->ranges[0]){
        		return $result->ranges[0];
            } else {
                return false;
            }
        }
    }
}

class ENUMmappings extends Records {

    var $sortElements=array('changeDate' => 'Change date',
                            'number'     => 'Number',
                            'tld'        => 'TLD'
                            );

    var $ranges=array();

    var $FieldsReadOnly=array(
                              'customer',
                              'reseller'
                              );
    var $Fields=array(
                              'owner'    => array('type'=>'integer'),
                              'info'     => array('type'=>'string')
                              );

    var $mapping_fields=array('id'       => 'integer',
                              'type'     => 'string',
                              'mapto'    => 'string',
                              'priority' => 'integer',
                              'ttl'      => 'integer'
                              );

    var $NAPTR_services=array(
        "sip"    => array("service"=>"sip",
                              "webname"=>"SIP",
                              "schemas"=>array("sip:","sips:")),
        "mailto" => array("service"=>"mailto",
                              "webname"=>"Email",
                              "schemas"=>array("mailto:")),
        "web:http"   => array("service"=>"web:http",
                              "webname"=>"WEB (http)",
                              "schemas"=>array("http://")),
        "web:https"  => array("service"=>"web:https",
                              "webname"=>"WEB (https)",
                              "schemas"=>array("https://")),
        "x-skype:callto" => array("service"=>"x-skype:callto",
                              "webname"=>"Skype",
                              "schemas"=>array("callto:")),
        "h323"   => array("service"=>"h323",
                              "webname"=>"H323",
                              "schemas"=>array("h323:")),
        "iax"    => array("service"=>"iax",
                              "webname"=>"IAX",
                              "schemas"=>array("iax:")),
        "iax2"   => array("service"=>"iax2",
                              "webname"=>"IAX2",
                              "schemas"=>array("iax2:")),
        "mms"    => array("service"=>"mms",
                              "webname"=>"MMS",
                              "schemas"=>array("tel:","mailto:")),
        "sms"    => array("service"=>"sms",
                              "webname"=>"SMS",
                              "schemas"=>array("tel:","mailto:")),
        "ems"    => array("service"=>"ems",
                              "webname"=>"EMS",
                              "schemas"=>array("tel:","mailto:")),
        "im"     => array("service"=>"im",
                              "webname"=>"IM",
                              "schemas"=>array("im:")),
        "npd:tel"   => array("service"=>"npd+tel",
                              "webname"=>"Portability",
                              "schemas"=>array("tel:")),
        "void:mailto"  => array("service"=>"void:mailto",
                              "webname"=>"VOID(mail)",
                              "schemas"=>array("mailto:")),
        "void:http"  => array("service"=>"void:http",
                              "webname"=>"VOID(http)",
                              "schemas"=>array("http://")),
        "void:https" => array("service"=>"void:https",
                              "webname"=>"VOID(https)",
                              "schemas"=>array("https://")),
        "voice"  => array("service"=>"voice",
                              "webname"=>"Voice",
                              "schemas"=>array("voice:","tel:")),
        "tel"    => array("service"=>"tel",
                              "webname"=>"Tel",
                              "schemas"=>array("tel:")),
        "fax:tel"    => array("service"=>"fax:tel",
                              "webname"=>"Fax",
                              "schemas"=>array("tel:")),
        "ifax:mailto"   => array("service"=>"ifax:mailto",
                              "webname"=>"iFax",
                              "schemas"=>array("mailto:")),
        "pres"   => array("service"=>"pres",
                              "webname"=>"Presence",
                              "schemas"=>array("pres:")),
        "ft:ftp"    => array("service"=>"ft:ftp",
                              "webname"=>"FTP",
                              "schemas"=>array("ftp://")),
        "loc:http"  => array("service"=>"loc:http",
                              "webname"=>"GeoLocation",
                              "schemas"=>array("http://")),
        "key:http"  => array("service"=>"key:http",
                              "webname"=>"Public key",
                              "schemas"=>array("http://"))
        );

    function ENUMmappings(&$SOAPEngine) {
        list($prefix,$tld)= explode("@",$_REQUEST['range_filter']);
        if ($prefix && !$_REQUEST['number_filter']) {
        	$_number_filter=$prefix.'%';
        } else {
        	$_number_filter=$_REQUEST['number_filter'];
        }

        $this->filters   = array('number'       => $_number_filter,
                                 'tld'          => $tld,
                                 'range'        => trim($_REQUEST['range_filter']),
                                 'type'         => trim($_REQUEST['type_filter']),
                                 'mapto'        => trim($_REQUEST['mapto_filter']),
                                 'owner'        => trim($_REQUEST['owner_filter'])
                                );
		$this->Records(&$SOAPEngine);
        $this->getAllowedDomains();

    }

    function listRecords() {
		$this->showSeachForm();

        $filter=array('number'   => $this->filters['number'],
        			  'tld'      => $this->filters['tld'],
                      'type'     => $this->filters['type'],
                      'mapto'    => $this->filters['mapto'],
                      'owner'    => intval($this->filters['owner']),
                      'customer' => intval($this->filters['customer']),
                      'reseller' => intval($this->filters['reseller'])
                      );
        // Range
        $range=array('start' => intval($this->next),
                     'count' => intval($this->maxrowsperpage)
                     );

        // Order
        if (!$this->sorting['sortBy'])    $this->sorting['sortBy']    = 'changeDate';
        if (!$this->sorting['sortOrder']) $this->sorting['sortOrder'] = 'DESC';

        $orderBy = array('attribute' => $this->sorting['sortBy'],
                         'direction' => $this->sorting['sortOrder']
                         );

        // Compose query
        $Query=array('filter'  => $filter,
                     'orderBy' => $orderBy,
                     'range'   => $range
                     );

        // Insert credetials
        $this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);

        // Call function
        $result     = $this->SOAPEngine->soapclient->getNumbers($Query);

        if (PEAR::isError($result)) {
            $error_msg  = $result->getMessage();
            $error_fault= $result->getFault();
            $error_code = $result->getCode();
            printf ("<p><font color=red>Error from %s: %s (%s): %s</font>",$this->SOAPEngine->SOAPurl,$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            return false;
        } else {

			$this->rows = $result->total;

     		if ($this->rows && $_REQUEST['action'] != 'PerformActions' && $_REQUEST['action'] != 'Delete') {
                $this->showActionsForm();
            }

            print "
            <p>
            <table border=0 align=center>
            <tr><td>$this->rows records found</td></tr>
            </table>
            <p>
            <table border=0 cellpadding=2 width=100%>
            <tr bgcolor=lightgrey>
                <td><b>Id</b></th>
                ";
                if ($this->version > 1) {
                    print "
                    <td><b>Customer</b></td>
                    <td><b>Number</b></td>
                    <td><b>TLD</b></td>
                    <td><b>Info</b></td>
                    <td><b>Srv</b></td>
                    <td><b>Map to</b></td>
                    <td><b>TTL</b></td>
                    <td><b>Prio</b></td>
                    <td><b>Owner</b></td>
                    <td><b>Change date</b></td>
                    <td><b>Action</b></td>
                    ";
                } else {
                    print "
                    <td><b>Number</b></td>
                    <td><b>TLD</b></td>
                    <td><b>Info</b></td>
                    <td><b>Srv</b></td>
                    <td><b>Map to</b></td>
                    <td><b>TTL</b></td>
                    <td><b>Prio</b></td>
                    <td><b>Owner</b></td>
                    <td><b>Action</b></td>
                    ";
                }
                print "
            </tr>
            ";

            if (!$this->next)  $this->next=0;

            if ($this->rows > $this->maxrowsperpage)  {
                $maxrows = $this->maxrowsperpage + $this->next;
                if ($maxrows > $this->rows) $maxrows = $this->maxrowsperpage;
            } else {
                $maxrows=$this->rows;
            }

            $i=0;

			if ($this->rows) {
                while ($i < $maxrows)  {
    
                    if (!$result->numbers[$i]) break;
    
                    $number = $result->numbers[$i];
    
                    $index=$this->next+$i+1;
    
                    $rr=floor($index/2);
                    $mod=$index-$rr*2;
            
                    if ($mod ==0) {
                    	$bgcolor="lightgrey";
                    } else {
                        $bgcolor="white";
                    }

                    $j=1;

                    foreach ($number->mappings as $_mapping) {
                        $_url = $this->url.sprintf("&service=%s&action=Delete&number_filter=%s&tld_filter=%s&mapto_filter=%s",
                        urlencode($this->SOAPEngine->service),
                        urlencode($number->id->number),
                        urlencode($number->id->tld),
                        urlencode($_mapping->mapto)
                        );
    
                        if ($_REQUEST['action'] == 'Delete' &&
                            $_REQUEST['number_filter'] == $number->id->number &&
                            $_REQUEST['tld_filter'] == $number->id->tld &&
                            $_REQUEST['mapto_filter'] == $_mapping->mapto) {
                            $_url .= "&confirm=1";
                            $actionText = "<font color=red>Confirm</font>";
                        } else {
                            $actionText = "Delete";
                        }

                        if ($j==1) {

                            $_number_url = $this->url.sprintf("&service=%s&number_filter=%s&tld_filter=%s",
                            urlencode($this->SOAPEngine->service),
        	                urlencode($number->id->number),
    	                    urlencode($number->id->tld)
                            );

                    		if ($this->version > 1) {
                                $_customer_url = $this->url.sprintf("&service=customers@%s&customer_filter=%s",
                                urlencode($this->SOAPEngine->customerEngine),
                                urlencode($number->customer)
                                );
    
                                if ($number->owner) {
                                    $_owner_url = sprintf
                                    ("<a href=%s&service=customers@%s&customer_filter=%s>%s</a>",
                                    $this->url,
                                    urlencode($this->SOAPEngine->soapEngine),
                                    urlencode($number->owner),
                                    $number->owner
                                    );
                                } else {
                                    $_owner_url='';
                                }          
    
                                printf("
                                <tr bgcolor=%s>
                                <td>%s</td>
                                <td><a href=%s>%s.%s</a></td>
                                <td><a href=%s>+%s</a></td>
                                <td>%s</td>
                                <td>%s</td>
                                <td>%s</td>
                                <td>%s</td>
                                <td>%s</td>
                                <td>%s</td>
                                <td>%s</td>
                                <td>%s</td>
                                <td><a href=%s>%s</a></td>
                                </tr>",
                                $bgcolor,
                                $index,
                                $_customer_url,
                                $number->customer,
                                $number->reseller,
                                $_number_url,
                                $number->id->number,
                                $number->id->tld,
                                $number->info,
                                ucfirst($_mapping->type),
                                $_mapping->mapto,
                                $_mapping->ttl,
                                $_mapping->priority,
                                $_owner_url,
                                $number->changeDate,
                                $_url,
                                $actionText
                                );
                            } else {
                                printf("
                                <tr bgcolor=%s>
                                <td>%s</td>
                                <td>+%s</td>
                                <td>%s</td>
                                <td>%s</td>
                                <td>%s</td>
                                <td>%s</td>
                                <td>%s</td>
                                <td>%s</td>
                                <td>%s</td>
                                <td><a href=%s>%s</a></td>
                                </tr>",
                                $bgcolor,
                                $index,
                                $number->id->number,
                                $number->id->tld,
                                $number->info,
                                ucfirst($_mapping->type),
                                $_mapping->mapto,
                                $_mapping->ttl,
                                $_mapping->priority,
                                $number->owner,
                                $_url,
                                $actionText
                                );
                            }
                        } else {
                    		if ($this->version > 1) {
                                printf("
                                <tr bgcolor=%s>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td>%s</td>
                                <td>%s</td>
                                <td>%s</td>
                                <td>%s</td>
                                <td></td>
                                <td>%s</td>
                                <td><a href=%s>%s</a></td>
                                </tr>",
                                $bgcolor,
                                ucfirst($_mapping->type),
                                $_mapping->mapto,
                                $_mapping->ttl,
                                $_mapping->priority,
                                $number->changeDate,
                                $_url,
                                $actionText
                                );
                            } else {
                                printf("
                                <tr bgcolor=%s>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td>%s</td>
                                <td>%s</td>
                                <td>%s</td>
                                <td></td>
                                <td>%s</td>
                                <td><a href=%s>%s</a></td>
                                </tr>",
                                $bgcolor,
                                ucfirst($_mapping->type),
                                $_mapping->mapto,
                                $_mapping->ttl,
                                $_mapping->priority,
                                $_url,
                                $actionText
                                );
                            }
                        }
                        $j++;
                    }

                    printf("
                    </tr>
                    ");

                    $i++;
    
                }
    
			}

            print "</table>";

			if ($this->rows == 1 ) {
                $this->showRecord($number);
            } else {
            	$this->showPagination($maxrows);
            }

            return true;
        }
    }

    function getLastNumber() {

        // Filter
        $filter=array('number' => ''
                      );
        // Range
        $range=array('start' => 0,
                     'count' => 1
                     );

        // Order
        if (!$this->sorting['sortBy'])    $this->sorting['sortBy']    = 'changeDate';
        if (!$this->sorting['sortOrder']) $this->sorting['sortOrder'] = 'DESC';

        $orderBy = array('attribute' => $this->sorting['sortBy'],
                         'direction' => $this->sorting['sortOrder']
                         );

        // Compose query
        $Query=array('filter'  => $filter,
                     'orderBy' => $orderBy,
                     'range'   => $range
                     );

        // Insert credetials
        $this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);

        // Call function
        $result     = $this->SOAPEngine->soapclient->getNumbers($Query);

        if (PEAR::isError($result)) {
            $error_msg  = $result->getMessage();
            $error_fault= $result->getFault();
            $error_code = $result->getCode();
            printf ("<p><font color=red>Error from %s: %s (%s): %s</font>",$this->SOAPEngine->SOAPurl,$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            return false;
        } else {

			if ($result->total) {
            	$number = array('number'   => $result->numbers[0]->id->number,
                                'tld'      => $result->numbers[0]->id->tld,
                                'mappings' => $result->numbers[0]->mappings
                                );

                return $number;
            }

        }

        return false;
    }

    function showSeachFormCustom() {

        print "<select name=range_filter><option>
        ";
        $selected_range[$_REQUEST['range_filter']]='selected';
        foreach ($this->ranges as $_range) {
        	$rangeId=$_range['prefix'].'@'.$_range['tld'];
        	//printf ("<option value=%s %s>%s +%s",$rangeId,$selected_range[$rangeId],$_range['tld'],$_range['prefix']);
            printf ("<option value=%s %s>+%s",$rangeId,$selected_range[$rangeId],$_range['prefix']);
        }

        print "</select>";

        printf ("<input type=text size=15 name=number_filter value='%s'>",$_REQUEST['number_filter']);

        print "<select name=type_filter>
        <option>
        ";
        reset($this->NAPTR_services);
        $selected_naptr_service[$this->filters['type']]='selected';
        while (list($k,$v) = each($this->NAPTR_services)) {
            printf ("<option value='%s' %s>%s",$k,$selected_naptr_service[$k],$this->NAPTR_services[$k]['webname']);
        }

        print "
        </select>
        ";
        printf (" <nobr>Map to<input type=text size=15 name=mapto_filter value='%s'></nobr>",$this->filters['mapto']);

    }

    function deleteRecord($dictionary=array()) {
        if (!$dictionary['confirm'] && !$_REQUEST['confirm']) {
        	print "<p><font color=red>Please press on Confirm to confirm the delete. </font>";
            return true;
        }

        if ($dictionary['number']) {
            $number=$dictionary['number'];
        } else {
            $number=$this->filters['number'];
        }

        if ($dictionary['tld']) {
            $tld=$dictionary['tld'];
        } else {
            $tld=$this->filters['tld'];
        }

        if ($dictionary['mapto']) {
            $mapto=$dictionary['mapto'];
        } else {
            $mapto=$this->filters['mapto'];
        }

        if (!strlen($number) || !strlen($tld)) {
            print "<p><font color=red>Error: missing ENUM number or TLD </font>";
            return false;
        }

        $enum_id=array('number' => $number,
                       'tld'    => $tld
                       );

        $this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);
        $result     = $this->SOAPEngine->soapclient->getNumber($enum_id);

        if (!PEAR::isError($result)) {
            // the number exists and we make an update
            $result_new=$result;

            if (count($result->mappings) > 1) {
                foreach ($result->mappings as $_mapping) {
                    if ($_mapping->mapto != $mapto) {
                        $mappings_new[]=array('type'     => $_mapping->type,
                                              'mapto'    => $_mapping->mapto,
                                              'ttl'      => $_mapping->ttl,
                                              'priority' => $_mapping->priority
                                          );
                    }
                }

    			if (!is_array($mappings_new)) $mappings_new = array();

                $result_new->mappings=$mappings_new;
    
                $function=array('commit'   => array('name'       => 'updateNumber',
                                                    'parameters' => array($result_new),
                                                    'logs'       => array('success' => sprintf('<p>ENUM mapping %s has been deleted',$mapto))),
                                'rollback' => array('name'       => 'updateNumber',
                                                    'parameters' => array($result)
                                                    )
                                );
    
            } else {
                $function=array('commit'   => array('name'       => 'deleteNumber',
                                                    'parameters' => array($enum_id),
                                                    'logs'       => array('success' => sprintf('<p>ENUM number +%s under %s has been deleted',$number,$tld))),
                                'rollback' => array('name'       => 'addNumber',
                                                    'parameters' => array($result)
                                                    )
                                );
            }

            unset($this->filters);
            return $this->SOAPEngine->execute($function);

        } else {
            return false;
        }

    }

    function showAddForm() {
		//if ($this->selectionActive) return;
		if (!count($this->ranges)) {
            print "<p><font color=red>Error: Create an ENUM range first</font>";
			return false;
        }

        print "
        <p>
        <table border=0 class=border width=100% bgcolor=lightblue>
        <tr>
        ";

        printf ("<form method=post name=addform action=%s>",$_SERVER['PHP_SELF']);
        print "
        <td align=left>
        ";

        print "
        <input type=submit name=action value=Add>
        ";
        printf (" Number");

        print "<select name=range>";
        $selected_range[$_REQUEST['range']]='selected';
        foreach ($this->ranges as $_range) {
        	$rangeId=$_range['prefix'].'@'.$_range['tld'];
        	printf ("<option value=%s %s>%s +%s",$rangeId,$selected_range[$rangeId],$_range['tld'],$_range['prefix']);
        }

        print "</select>";
        printf ("<input type=text size=15 name=number value='%s'>",$_REQUEST['number']);

        printf (" Map to");
        print "<select name=type>
        ";
        reset($this->NAPTR_services);
        $selected_naptr_service[$_REQUEST['type']]='selected';
        while (list($k,$v) = each($this->NAPTR_services)) {
            printf ("<option value='%s' %s>%s",$k,$selected_naptr_service[$k],$this->NAPTR_services[$k]['webname']);
        }

        print "
        </select>
        ";
        if ($_REQUEST['ttl']) {
            $_ttl=$_REQUEST['ttl'];
        } else {
            $_ttl=3600;
        }
        printf (" <input type=text size=25 name=mapto value='%s'>",$_REQUEST['mapto']);
        printf (" TTL<input type=text size=5 name=ttl value='%s'>",$_ttl);
        printf (" Priority<input type=text size=3 name=priority value='%s'>",$_REQUEST['priority']);
        printf (" Owner<input type=text size=5 name=owner value='%s'>",$_REQUEST['owner']);
        printf (" Info<input type=text size=10 name=info value='%s'>",$_REQUEST['info']);

        print "
        </td>
        <td align=right>
        ";
        print "
        </td>
        ";

        $this->printHiddenFormElements();

        print "
        </form>
        </tr>
        </table>
        ";
    }

    function getAllowedDomains() {
		if ($this->version > 1) {
            // Filter
            $filter=array('prefix'   => ''
                          );
            // Range
            $range=array('start' => 0,
                         'count' => 200
                         );
    
            // Order
            $orderBy = array('attribute' => 'changeDate',
                             'direction' => 'ASC'
                             );
    
            // Compose query
            $Query=array('filter'  => $filter,
                         'orderBy' => $orderBy,
                         'range'   => $range
                         );
    
            $this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);
            $result     = $this->SOAPEngine->soapclient->getRanges($Query);
    
        } else {
        	$this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);
        	$result     = $this->SOAPEngine->soapclient->getRanges();
        }

        if (PEAR::isError($result)) {
            $error_msg  = $result->getMessage();
            $error_fault= $result->getFault();
            $error_code = $result->getCode();
            printf ("<p><font color=red>Error from %s: %s (%s): %s</font>",$this->SOAPEngine->SOAPurl,$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            return false;
        } else {
			if ($this->version > 1) {
                foreach($result->ranges as $range) {
                    $this->ranges[]=array('prefix'    => $range->id->prefix,
                                          'tld'       => $range->id->tld,
                                          'minDigits' => $range->minDigits,
                                          'maxDigits' => $range->maxDigits
                                          );
                    if (in_array($range->id->tld,$this->allowedDomains)) continue;
                    $this->allowedDomains[]=$range->id->tld;
                    $seen[$range->id->tld]++;
                }
            } else {
                foreach($result as $range) {
                    $this->ranges[]=array('prefix'    => $range->id->prefix,
                                          'tld'       => $range->id->tld,
                                          'minDigits' => $range->minDigits,
                                          'maxDigits' => $range->maxDigits
                                          );
                    if (in_array($range->id->tld,$this->allowedDomains)) continue;
                    $this->allowedDomains[]=$range->id->tld;
                    $seen[$range->id->tld]++;
                }
            }
            if (strlen($this->SOAPEngine->defaultEnumTLD) && !$seen[$this->SOAPEngine->defaultEnumTLD]) {
            	$this->allowedDomains[]=$this->SOAPEngine->defaultEnumTLD;
            }
        }
    }

    function addRecord($dictionary=array()) {
        $prefix='';
        if ($dictionary['range']) {
        	list($prefix,$tld)=explode('@',trim($dictionary['range']));
        } else if ($dictionary['tld']) {
            $tld = $dictionary['tld'];
        } else if ($_REQUEST['range']) {
        	list($prefix,$tld)=explode('@',trim($_REQUEST['range']));
        } else {
    		$tld = trim($_REQUEST['tld']);
        }

        if ($dictionary['number']) {
            $number = $dictionary['number'];
        } else {
    		$number = trim($_REQUEST['number']);
        }

        $number=$prefix.$number;

        if (!strlen($tld)) {
            if (strlen($this->SOAPEngine->defaultEnumTLD)) {
                $tld=$this->SOAPEngine->defaultEnumTLD;
            } else {
        		$tld='e164.arpa';
            }
        }

		if (!strlen($tld) || !strlen($number) || !is_numeric($number)) {
            printf ("<p><font color=red>Error: Missing TLD or number. </font>");
            return false;
        }

        if ($this->adminonly) {
        	if ($dictionary['reseller']) {
                $reseller=$dictionary['reseller'];
            } else {
            	$reseller = trim($_REQUEST['reseller']);
            }
        	if ($dictionary['customer']) {
                $customer=$dictionary['customer'];
            } else {
            	$customer = trim($_REQUEST['customer']);
            }
            if (!$customer) $customer=$reseller;
        } else {
        	$reseller = $this->reseller;
        	if ($dictionary['customer']) {
                $customer=$dictionary['customer'];
            } else {
            	$customer = trim($_REQUEST['customer']);
            }
            if (!$customer || !in_array($customer,array_keys($this->customers))) {
                $customer=$reseller;
            }
        }

        if ($dictionary['ttl']) {
            $ttl = intval($dictionary['ttl']);
        } else {
    		$ttl = intval(trim($_REQUEST['ttl']));
        }

		if (!$ttl) $ttl=3600;

        if ($dictionary['priority']) {
            $priority = intval($dictionary['priority']);
        } else {
    		$priority = intval(trim($_REQUEST['priority']));
        }

        if ($dictionary['owner']) {
            $owner = intval($dictionary['owner']);
        } else {
    		$owner = intval(trim($_REQUEST['owner']));
        }

        if ($dictionary['info']) {
            $info = $dictionary['info'];
        } else {
    		$info = trim($_REQUEST['info']);
        }

		if (!$priority) $priority=5;

        $enum_id=array('number' => $number,
                       'tld'    => $tld);

        if ($dictionary['mapto']) {
            $mapto = $dictionary['mapto'];
        } else {
    		$mapto = trim($_REQUEST['mapto']);
        }

        if ($dictionary['type']) {
            $type = $dictionary['type'];
        } else {
    		$type = trim($_REQUEST['type']);
        }

        if (preg_match("/^([a-z0-9]+:\/\/)(.*)$/i",$mapto,$m)) {
        	$_scheme = $m[1];
            $_value  = $m[2];
        } else if (preg_match("/^([a-z0-9]+:)(.*)$/i",$mapto,$m)) {
        	$_scheme = $m[1];
            $_value  = $m[2];
        } else {
            $_scheme = '';
        	$_value  = $mapto;
        }

		if (!$_value) {
            $lastNumber=$this->getLastNumber();
            foreach($lastNumber['mappings'] as $_mapping) {
                if ($_mapping->type == trim($type)) {
                    if (preg_match("/^(.*)@(.*)$/",$_mapping->mapto,$m)) {
        				$_value = $number.'@'.$m[2];
                    	break;
                	}
                }
            }
        }

        if (!$_scheme || !in_array($_scheme,$this->NAPTR_services[trim($type)]['schemas'])) {
            $_scheme=$this->NAPTR_services[trim($type)]['schemas'][0];
        }

        $mapto=$_scheme.$_value;

        $enum_number=array('id'       => $enum_id,
                           'owner'    => $owner,
                           'info'     => $info,
                           'customer' => intval($customer),
                           'reseller' => intval($reseller),
                           'mappings' => array(array('type'     => $type,
                                                     'mapto'    => $mapto,
                                                     'ttl'      => $ttl,
                                                     'priority' => $priority
                                                    )
                                               )
                           );

        $this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);
        $result     = $this->SOAPEngine->soapclient->getNumber($enum_id);

        if (PEAR::isError($result)) {
            $error_msg=$result->getMessage();
            $error_fault=$result->getFault();
            $error_code=$result->getCode();

            if ($error_fault->detail->exception->errorcode == "3002") {

                $function=array('commit'   => array('name'       => 'addNumber',
                                                    'parameters' => array($enum_number),
                                                    'logs'       => array('success' => sprintf('<p>ENUM number +%s under %s has been added',$number,$tld))),
                                'rollback' => array('name'       => 'deleteNumber',
                                                    'parameters' => array($enumId)
                                                    )
                                );
             
                return $this->SOAPEngine->execute($function);
            } else {
                printf ("<p><font color=red>Error from %s: %s (%s): %s</font>",$this->SOAPEngine->SOAPurl,$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
                return false;
            }
        } else {
            // the number exists and we make an update
            $result_new=$result;
            foreach ($result->mappings as $_mapping) {
                $mappings_new[]=array('type'     => $_mapping->type,
                                      'mapto'    => $_mapping->mapto,
                                      'ttl'      => $_mapping->ttl,
                                      'priority' => $_mapping->priority
                                      );

                if ($_mapping->mapto == $mapto) {
            		printf ("<p><font color=blue>Info: ENUM mapping %s for number %s already exists</font>",$mapto,$number);
                    return true;
                    break;
                }
            }

			$mappings_new[]=array('type'    => trim($type),
                                  'mapto'   => $mapto,
                                  'ttl'     => intval(trim($_REQUEST['ttl'])),
                                  'priority'=> intval(trim($_REQUEST['priority'])),
                                 );
            // add mapping
            $result_new->mappings=$mappings_new;

            $function=array('commit'   => array('name'       => 'updateNumber',
                                                'parameters' => array($result_new),
                                                'logs'       => array('success' => sprintf('<p>ENUM number +%s under %s has been updated',$number,$tld))),
                            'rollback' => array('name'       => 'updateNumber',
                                                'parameters' => array($result))
                            );
             
            return $this->SOAPEngine->execute($function);
        }
    }

    function getRecordKeys() {

        // Filter
        $filter=array('number' => $this->filters['number'],
                      'tld'    => $this->filters['tld'],
                      'type'   => $this->filters['type'],
                      'mapto'  => $this->filters['mapto']
                      );
        // Range
        $range=array('start' => 0,
                     'count' => 1000
                     );

        // Order
        if (!$this->sorting['sortBy'])    $this->sorting['sortBy']    = 'changeDate';
        if (!$this->sorting['sortOrder']) $this->sorting['sortOrder'] = 'DESC';

        $orderBy = array('attribute' => $this->sorting['sortBy'],
                         'direction' => $this->sorting['sortOrder']
                         );

        // Compose query
        $Query=array('filter'  => $filter,
                     'orderBy' => $orderBy,
                     'range'   => $range
                     );

        // Insert credetials
        $this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);

        // Call function
        $result     = $this->SOAPEngine->soapclient->getNumbers($Query);

        if (PEAR::isError($result)) {
            $error_msg  = $result->getMessage();
            $error_fault= $result->getFault();
            $error_code = $result->getCode();
            printf ("<p><font color=red>Error from %s: %s (%s): %s</font>",$this->SOAPEngine->SOAPurl,$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            return false;
        } else {
			foreach ($result->numbers as $number) {
                $this->selectionKeys[]=array('number' => $number->id->number,
                                             'tld'    => $number->id->tld);
            }
            return true;
        }
    }

    function showRecord($number) {

        print "<table border=0 cellpadding=10>";
        print "
        <tr>
        <td valign=top>
        <table border=0>";
        printf ("<form method=post name=addform action=%s>",$_SERVER['PHP_SELF']);
        print "<input type=hidden name=action value=Update>";

        print "<tr>
        <td colspan=2><input type=submit value=Update>
        </td></tr>";

        printf ("<tr><td class=border>DNS name</td><td class=border>%s</td></td>",
        $this->tel2enum($number->id->number,$number->id->tld));

        foreach (array_keys($this->Fields) as $item) {
            if ($this->Fields[$item]['name']) {
                $item_name=$this->Fields[$item]['name'];
            } else {
            	$item_name=ucfirst($item);
            }

            if ($this->Fields[$item]['type'] == 'text') {
                printf ("<tr>
                <td class=border valign=top>%s</td>
                <td class=border><textarea cols=30 name=%s_form rows=4>%s</textarea></td>
                </tr>",
                $item_name,
                $item,
                $number->$item
                );
            } else {
                printf ("<tr>
                <td class=border valign=top>%s</td>
                <td class=border><input name=%s_form size=30 type=text value='%s'></td>
                </tr>",
                $item_name,
                $item,
                $number->$item
                );
            }
        }

        printf ("<input type=hidden name=tld_filter value='%s'",$number->id->tld);
        printf ("<input type=hidden name=number_filter value='%s'",$number->id->number);
        $this->printFiltersToForm();
        $this->printHiddenFormElements();

        print "</form>";
        print "
        </table>
        ";
    }

    function getRecord($enumid) {

        $this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);
        $result     = $this->SOAPEngine->soapclient->getNumber($enumid);

        if (PEAR::isError($result)) {
            $error_msg  = $result->getMessage();
            $error_fault= $result->getFault();
            $error_code = $result->getCode();
            printf ("<p><font color=red>Error from %s: %s (%s): %s</font>",$this->SOAPEngine->SOAPurl,$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            return false;
        } else {
        	return $result;
        }
    }

    function updateRecord () {
        //print "<p>Updating number ...";

        if (!$_REQUEST['number_filter'] || !$_REQUEST['tld_filter']) return;

        $enumid=array('number' => $_REQUEST['number_filter'],
                      'tld'    => $_REQUEST['tld_filter']
                     );

        if (!$number = $this->getRecord($enumid)) {
            return false;
        }

        $number_old=$number;

        $new_mappings=array();

        foreach ($number->mappings as $_mapping) {
            foreach (array_keys($this->mapping_fields) as $field) {
                if ($this->mapping_fields[$field] == 'integer') {
                    $new_mapping[$field]=intval($_mapping->$field);
                } else {
                    $new_mapping[$field]=$_mapping->$field;
                }
            }

            $new_mappings[]=$new_mapping;
        }

        $number->mappings=$new_mappings;

        if (!is_array($number->mappings)) $number->mappings=array();

        foreach (array_keys($this->Fields) as $item) {
            $var_name=$item.'_form';
            //printf ("<br>%s=%s",$var_name,$_REQUEST[$var_name]);
            if ($this->Fields[$item]['type'] == 'integer') {
                $number->$item = intval($_REQUEST[$var_name]);
            } else {
                $number->$item = trim($_REQUEST[$var_name]);
            }
        }

        //print_r($number);
        $function=array('commit'   => array('name'       => 'updateNumber',
                                            'parameters' => array($number),
                                            'logs'       => array('success' => sprintf('<p>ENUM number +%s under %s has been updated',$enumid['number'],$enumid['tld']))),
                        'rollback' => array('name'       => 'updateNumber',
                                            'parameters' => array($number_old))
                        );
     
        return $this->SOAPEngine->execute($function);

    }
}

class TrustedPeers extends Records {

    function TrustedPeers(&$SOAPEngine) {

    	$this->filters   = array('ip'     => trim($_REQUEST['ip_filter']),
                                 'description'  => trim($_REQUEST['description_filter'])
                                 );

		$this->Records(&$SOAPEngine);

        if ($this->version > 1) {

        	$this->sortElements=array(
                            'changeDate'  => 'Change date',
                            'description' => 'Description',
                            'ip'          => 'IP address'
                            );
    	} else {
        	$this->sortElements=array(
                            'description' => 'Description',
                            'ip'          => 'IP address'
                            );
        }

    }

    function listRecords() {

		$this->showSeachForm();

        // Insert credetials
        $this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);

        // Filter
        $filter=array('ip' => $this->filters['ip'],
                      'description'   => $this->filters['description']
                      );

        // Range
        $range=array('start' => intval($this->next),
                     'count' => intval($this->maxrowsperpage)
                     );

        // Order
        if (!$this->sorting['sortBy'])    $this->sorting['sortBy']    = 'description';
        if (!$this->sorting['sortOrder']) $this->sorting['sortOrder'] = 'ASC';

        $orderBy = array('attribute' => $this->sorting['sortBy'],
                         'direction' => $this->sorting['sortOrder']
                         );

        // Compose query
        $Query=array('filter'  => $filter,
                        'orderBy' => $orderBy,
                        'range'   => $range
                        );

        // Call function
        $result     = $this->SOAPEngine->soapclient->getTrustedPeers($Query);

        if (PEAR::isError($result)) {
            $error_msg  = $result->getMessage();
            $error_fault= $result->getFault();
            $error_code = $result->getCode();
            printf ("<p><font color=red>Error from %s: %s (%s): %s</font>",$this->SOAPEngine->SOAPurl,$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            return false;
        } else {

			$this->rows = $result->total;

     		if ($this->rows && $_REQUEST['action'] != 'PerformActions' && $_REQUEST['action'] != 'Delete') {
                $this->showActionsForm();
            }

            print "
            <table border=0 align=center>
            <tr><td>$this->rows records found</td></tr>
            </table>
            <p>
            <table border=0 cellpadding=2 width=100%>
            <tr bgcolor=lightgrey>
                <td><b>Id</b></th>
                ";
                if ($this->version > 1) print "<td><b>Customer</b></td>";
                print"
                <td><b>IP address</b></td>
                <td><b>Protocol</b></td>
                <td><b>From pattern</b></td>
                <td><b>Description</b></td>";

                if ($this->version > 1) print "<td><b>Change date</b></td>";

                print "<td><b>Action</b></td>


            </tr>
            ";

            if (!$this->next)  $this->next=0;

            if ($this->rows > $this->maxrowsperpage)  {
                $maxrows = $this->maxrowsperpage + $this->next;
                if ($maxrows > $this->rows) $maxrows = $this->maxrowsperpage;
            } else {
                $maxrows=$this->rows;
            }

            $i=0;

			if ($this->rows) {
                while ($i < $maxrows)  {
    
                    if (!$result->peers[$i]) break;
    
                    $peer = $result->peers[$i];
    
                    $index=$this->next+$i+1;

                    $rr=floor($index/2);
                    $mod=$index-$rr*2;
            
                    if ($mod ==0) {
                    	$bgcolor="lightgrey";
                    } else {
                        $bgcolor="white";
                    }

                    $_url = $this->url.sprintf("&service=%s&action=Delete&ip_filter=%s",
                    urlencode($this->SOAPEngine->service),
                    urlencode($peer->ip)
                    );

                    if ($_REQUEST['action'] == 'Delete' &&
                    	$_REQUEST['ip_filter'] == $peer->ip) {
                		$_url .= "&confirm=1";
                        $actionText = "<font color=red>Confirm</font>";
                    } else {
                        $actionText = "Delete";
                    }

               		if ($this->version > 1) {
                        $_customer_url = $this->url.sprintf("&service=customers@%s&customer_filter=%s",
                        urlencode($this->SOAPEngine->customerEngine),
                        urlencode($peer->customer)
                        );

                        printf("
                        <tr bgcolor=%s>
                        <td>%s</td>
                        <td><a href=%s>%s.%s</a></td>
                        <td>%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td><a href=%s>%s</a></td>
                        </tr>",
                        $bgcolor,
                        $index,
                        $_customer_url,
                        $peer->reseller,
                        $peer->customer,
                        $peer->ip,
                        $peer->protocol,
                        $peer->fromPattern,
                        $peer->description,
                        $peer->changeDate,
                        $_url,
                        $actionText
                        );
                    } else {
                        printf("
                        <tr bgcolor=%s>
                        <td>%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td><a href=%s>%s</a></td>
                        </tr>",
                        $bgcolor,
                        $index,
                        $peer->ip,
                        $peer->protocol,
                        $peer->fromPattern,
                        $peer->description,
                        $_url,
                        $actionText
                        );
                    }

                    printf("
                    </tr>
                    ");
                    $i++;
                }
			}

            print "</table>";

            $this->showPagination($maxrows);

            return true;
        }
    }

    function showAddForm() {
		if ($this->selectionActive) return;
        print "
        <p>
        <table border=0 class=border width=100% bgcolor=lightblue>
        <tr>
            ";
            printf ("<form method=post name=addform action=%s>",$_SERVER['PHP_SELF']);
            print "
        	<td align=left>
            ";

            print "
            <input type=submit name=action value=Add>
            ";
            printf (" IP address<input type=text size=20 name=ipaddress>");
            printf (" Description<input type=text size=30 name=description>");

            $this->showCustomerTextBox();

            print "
	        </td>
        	<td align=right>
            ";
            print "
	        </td>
            ";

            $this->printHiddenFormElements();

            print "
            </form>
        </tr>
        </table>
        ";
    }

    function addRecord($dictionary=array()) {

        if ($dictionary['ipaddress']) {
    		$ipaddress   = $dictionary['ipaddress'];
        } else {
    		$ipaddress   = trim($_REQUEST['ipaddress']);
        }

        if ($dictionary['description']) {
    		$description   = $dictionary['description'];
        } else {
    		$description   = trim($_REQUEST['description']);
        }

        if ($dictionary['owner']) {
    		$owner   = $dictionary['owner'];
        } else {
    		$owner   = trim($_REQUEST['owner']);
        }

        if ($this->adminonly) {
        	if ($dictionary['reseller']) {
                $reseller=$dictionary['reseller'];
            } else {
            	$reseller = trim($_REQUEST['reseller']);
            }
        	if ($dictionary['customer']) {
                $customer=$dictionary['customer'];
            } else {
            	$customer = trim($_REQUEST['customer']);
            }
            if (!$customer) $customer=$reseller;
        } else {
        	$reseller = $this->reseller;
        	if ($dictionary['customer']) {
                $customer=$dictionary['customer'];
            } else {
            	$customer = trim($_REQUEST['customer']);
            }

            if (!$customer || !in_array($customer,array_keys($this->customers))) {
                $customer=$reseller;
            }
        }

		if (!strlen($ipaddress) || !strlen($description)) {
            printf ("<p><font color=red>Error: Missing IP or description. </font>");
            return false;
        }

        $peer=array(
                     'ip'          => $ipaddress,
                     'description' => $description,
                     'owner'       => intval($_REQUEST['owner']),
                     'customer'    => intval($customer),
                     'reseller'    => intval($reseller)
        			);

        $function=array('commit'   => array('name'       => 'addTrustedPeer',
                                            'parameters' => array($peer),
                                            'logs'       => array('success' => sprintf('<p>Trusted peers %s has been added',$ipaddress))),
                        'rollback' => array('name'       => 'deleteTrustedPeer',
                                            'parameters' => array($peer)
                                            )
                        );
     
        return $this->SOAPEngine->execute($function);
    }

    function deleteRecord($dictionary=array()) {
        if (!$dictionary['confirm'] && !$_REQUEST['confirm']) {
        	print "<p><font color=red>Please press on Confirm to confirm the delete. </font>";
            return true;
        }

        if (!strlen($this->filters['ip'])) {
            print "<p><font color=red>Error: missing IP address. </font>";
            return false;
        }

        $function=array('commit'   => array('name'       => 'deleteTrustedPeer',
                                            'parameters' => array($this->filters['ip']),
                                            'logs'       => array('success' => sprintf('<p>Trusted peers %s has been deleted',$this->filters['ip'])))
                        );
     
        unset($this->filters);
        return $this->SOAPEngine->execute($function);
    }

    function showSeachFormCustom() {

        printf (" IP address<input type=text size=15 name=ip_filter value='%s'>",$this->filters['ip']);
        printf (" Description<input type=text size=15 name=description_filter value='%s'>",$this->filters['description']);

    }

}

class GatewayGroups extends Records {
	var $gatewayGroups=array();

    var $sortElements=array(
                            'name'   => 'Name'
                            );

    function GatewayGroups(&$SOAPEngine) {
    	$this->filters   = array('name'   => trim($_REQUEST['name_filter'])
                                 );

		$this->Records(&$SOAPEngine);
    }

    function listRecords() {

		$this->showSeachForm();

        // Insert credetials
        $this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);

        // Filter
        $filter=array('name'     => $this->filters['name'],
                      'customer' => intval($this->filters['customer']),
                      'reseller' => intval($this->filters['reseller'])
                      );

        // Range
        $range=array('start' => intval($this->next),
                     'count' => intval($this->maxrowsperpage)
                     );

        // Order
        if (!$this->sorting['sortBy'])    $this->sorting['sortBy']    = 'name';
        if (!$this->sorting['sortOrder']) $this->sorting['sortOrder'] = 'ASC';

        $orderBy = array('attribute' => $this->sorting['sortBy'],
                         'direction' => $this->sorting['sortOrder']
                         );

        // Compose query
        $Query=array('filter'  => $filter,
                     'orderBy' => $orderBy,
                     'range'   => $range
                     );

        // Call function
        $result     = $this->SOAPEngine->soapclient->getGatewayGroups($Query);

        if (PEAR::isError($result)) {
            $error_msg  = $result->getMessage();
            $error_fault= $result->getFault();
            $error_code = $result->getCode();
            printf ("<p><font color=red>Error from %s: %s (%s): %s</font>",$this->SOAPEngine->SOAPurl,$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            return false;
        } else {

			$this->rows = $result->total;

            print "
            <table border=0 align=center>
            <tr><td>$this->rows records found</td></tr>
            </table>
            <p>
            <table border=0 cellpadding=2 width=100%>
            ";

            print "
            <tr bgcolor=lightgrey>
                <td><b>Id</b></th>
                ";
                if ($this->version > 1) print "<td><b>Customer</b></td>";
                print"
                <td><b>Name</b></th>";

                if ($this->version > 1) print "<td><b>Change date</b></td>";
                print "

                <td><b>Action</b></td>
            </tr>
            ";

            if (!$this->next)  $this->next=0;

            if ($this->rows > $this->maxrowsperpage)  {
                $maxrows = $this->maxrowsperpage + $this->next;
                if ($maxrows > $this->rows) $maxrows = $this->maxrowsperpage;
            } else {
                $maxrows=$this->rows;
            }

            $i=0;

			if ($this->rows) {
                while ($i < $maxrows)  {
    
                    if (!$result->groups[$i]) break;
    
                    $group = $result->groups[$i];
    
                    $index=$this->next+$i+1;

                    $rr=floor($index/2);
                    $mod=$index-$rr*2;
            
                    if ($mod ==0) {
                    	$bgcolor="lightgrey";
                    } else {
                        $bgcolor="white";
                    }

                    if ($this->version > 1) {
                        $_url = $this->url.sprintf("&service=%s&action=Delete&name_filter=%s",
                        urlencode($this->SOAPEngine->service),
                        urlencode($group->name)
                        );

                        if ($_REQUEST['action'] == 'Delete' &&
                            $_REQUEST['name_filter'] == $group->name) {
                            $_url .= "&confirm=1";
                            $actionText = "<font color=red>Confirm</font>";
                        } else {
                            $actionText = "Delete";
                        }

                        $_customer_url = $this->url.sprintf("&service=customers@%s&customer_filter=%s",
                        urlencode($this->SOAPEngine->customerEngine),
                        urlencode($group->customer)
                        );
    
                        printf("
                        <tr bgcolor=%s>
                        <td>%s</td>
                        <td><a href=%s>%s.%s</a></td>
                        <td>%s</td>
                        <td>%s</td>
                        <td><a href=%s>%s</a></td>
                        </tr>",
                        $bgcolor,
                        $index,
                        $_customer_url,
                        $group->customer,
                        $group->reseller,
                        $group->name,
                        $group->changeDate,
                        $_url,
                        $actionText
                        );
    
                        printf("
                        </tr>
                        ");
                    } else {
                        $_url = $this->url.sprintf("&service=%s&action=Delete&name_filter=%s",
                        urlencode($this->SOAPEngine->service),
                        urlencode($group)
                        );

                        if ($_REQUEST['action'] == 'Delete' &&
                            $_REQUEST['name_filter'] == $group) {
                            $_url .= "&confirm=1";
                            $actionText = "<font color=red>Confirm</font>";
                        } else {
                            $actionText = "Delete";
                        }

                        printf("
                        <tr bgcolor=%s>
                        <td>%s</td>
                        <td>%s</td>
                        <td><a href=%s>%s</a></td>
                        </tr>",
                        $bgcolor,
                        $index,
                        $group,
                        $_url,
                        $actionText
                        );
    
                        printf("
                        </tr>
                        ");
                    }

                    $i++;
    
                }
    
			}

            print "</table>";

            $this->showPagination($maxrows);

            return true;
        }
    }

    function showAddForm() {
		if ($this->selectionActive) return;
        print "
        <p>
        <table border=0 class=border width=100% bgcolor=lightblue>
        <tr>
            ";
            printf ("<form method=post name=addform action=%s>",$_SERVER['PHP_SELF']);
            print "
        	<td align=left>
            ";

            print "
            <input type=submit name=action value=Add>
            ";

            printf (" Name<input type=text size=20 name=name>");

            $this->showCustomerTextBox();

            print "
	        </td>
        	<td align=right>
            ";

            print "
	        </td>
            ";
            $this->printHiddenFormElements();

            print "
            </form>
        </tr>
        </table>
        ";
    }

    function addRecord($dictionary=array()) {
        if ($this->version > 1) {

        	if ($dictionary['name']) {
                $name=$dictionary['name'];
            } else {
            	$name = trim($_REQUEST['name']);
            }

            if ($this->adminonly) {
                if ($dictionary['reseller']) {
                    $reseller=$dictionary['reseller'];
                } else {
                    $reseller = trim($_REQUEST['reseller']);
                }
                if ($dictionary['customer']) {
                    $customer=$dictionary['customer'];
                } else {
                    $customer = trim($_REQUEST['customer']);
                }
                if (!$customer) $customer=$reseller;
            } else {
                $reseller = $this->reseller;
                if ($dictionary['customer']) {
                    $customer=$dictionary['customer'];
                } else {
                    $customer = trim($_REQUEST['customer']);
                }
                if (!$customer || !in_array($customer,array_keys($this->customers))) {
                    $customer=$reseller;
                }
            }

            $structure=array('name'     => $name,
                             'customer' => intval($customer),
                             'reseller' => intval($reseller)
                             );

        } else {
        	if ($dictionary['name']) {
                $structure=$dictionary['name'];
            } else {
            	$structure = trim($_REQUEST['name']);
            }
            $name = $structure;
        }

		if (!strlen($name)) {
            printf ("<p><font color=red>Error: Missing name. </font>");
            return false;
        }

        $function=array('commit'   => array('name'       => 'addGatewayGroup',
                                            'parameters' => array($structure),
                                            'logs'       => array('success' => sprintf('<p>Gateway group %s has been added',$name))),
                        'rollback' => array('name'       => 'deleteGatewayGroup',
                                            'parameters' => array($structure)
                                            )
                        );
     
        return $this->SOAPEngine->execute($function);
    }

    function deleteRecord($dictionary=array()) {
        if (!$dictionary['confirm'] && !$_REQUEST['confirm']) {
        	print "<p><font color=red>Please press on Confirm to confirm the delete. </font>";
            return true;
        }

        if ($dictionary['name']) {
    		$name   = $dictionary['name'];
        } else {
    		$name   = trim($this->filters['name']);
        }

        if (!strlen($name)) {
            print "<p><font color=red>Error: missing gateway group name </font>";
            return false;
        }

        $function=array('commit'   => array('name'       => 'deleteGatewayGroup',
                                            'parameters' => array($name),
                                            'logs'       => array('success' => sprintf('<p>Gateway group %s has been deleted',$name))),
                        'rollback' => array('name'       => 'addGatewayGroup',
                                            'parameters' => array($this->filters['group'])
                                            )
                        );
     
        unset($this->filters);
        return $this->SOAPEngine->execute($function);
    }

    function showSeachFormCustom() {
        printf (" Name<input type=text size=15 name=name_filter value='%s'>",$this->filters['name']);
    }

}

class Gateways extends Records {
	var $gatewayGroups=array();

    var $sortElements=array(
                            'name'   => 'Name',
                            'group'  => 'Group',
                            'ip'     => 'IP address',
                            'prefix' => 'Prefix'
                            );

    function Gateways(&$SOAPEngine) {
    	$this->filters   = array('name'   => trim($_REQUEST['name_filter']),
                                 'group'  => trim($_REQUEST['group_filter'])
                                 );

		$this->Records(&$SOAPEngine);
    }

    function listRecords() {

		$this->showSeachForm();

        // Insert credetials
        $this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);

        // Filter
        $filter=array('name'  => $this->filters['name'],
                      'group' => $this->filters['group'],
                      'customer' => intval($this->filters['customer']),
                      'reseller' => intval($this->filters['reseller'])
                      );

        // Range
        $range=array('start' => intval($this->next),
                     'count' => intval($this->maxrowsperpage)
                     );

        // Order
        if (!$this->sorting['sortBy'])    $this->sorting['sortBy']    = 'name';
        if (!$this->sorting['sortOrder']) $this->sorting['sortOrder'] = 'ASC';

        $orderBy = array('attribute' => $this->sorting['sortBy'],
                         'direction' => $this->sorting['sortOrder']
                         );

        // Compose query
        $Query=array('filter'  => $filter,
                        'orderBy' => $orderBy,
                        'range'   => $range
                        );

        // Call function
        $result     = $this->SOAPEngine->soapclient->getGateways($Query);

        if (PEAR::isError($result)) {
            $error_msg  = $result->getMessage();
            $error_fault= $result->getFault();
            $error_code = $result->getCode();
            printf ("<p><font color=red>Error from %s: %s (%s): %s</font>",$this->SOAPEngine->SOAPurl,$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            return false;
        } else {

			$this->rows = $result->total;

            print "
            <table border=0 align=center>
            <tr><td>$this->rows records found</td></tr>
            </table>
            <p>
            <table border=0 cellpadding=2 width=100%>
            ";

            print "
            <tr bgcolor=lightgrey>
                <td><b>Id</b></th>
                ";
                if ($this->version > 1) print "<td><b>Customer</b></td>";
                print"
                <td><b>Name</b></th>
                <td><b>Group</b></td>
                <td><b>Address</b></td>
                <td><b>Strip</b></td>
                <td><b>Prefix</b></td>
                <td><b>Change date</b></td>
                <td><b>Action</b></td>
            </tr>
            ";

            if (!$this->next)  $this->next=0;

            if ($this->rows > $this->maxrowsperpage)  {
                $maxrows = $this->maxrowsperpage + $this->next;
                if ($maxrows > $this->rows) $maxrows = $this->maxrowsperpage;
            } else {
                $maxrows=$this->rows;
            }

            $i=0;

			if ($this->rows) {
                while ($i < $maxrows)  {
    
                    if (!$result->gateways[$i]) break;
    
                    $gateway = $result->gateways[$i];
    
                    $index=$this->next+$i+1;

                    $rr=floor($index/2);
                    $mod=$index-$rr*2;
            
                    if ($mod ==0) {
                    	$bgcolor="lightgrey";
                    } else {
                        $bgcolor="white";
                    }

                    $_url = $this->url.sprintf("&service=%s&action=Delete&name_filter=%s",
                    urlencode($this->SOAPEngine->service),
                    urlencode($gateway->name)
                    );

                    if ($_REQUEST['action'] == 'Delete' &&
                    	$_REQUEST['name_filter'] == $gateway->name) {
                		$_url .= "&confirm=1";
                        $actionText = "<font color=red>Confirm</font>";
                    } else {
                        $actionText = "Delete";
                    }

                    if ($this->version > 1) {
                        $_customer_url = $this->url.sprintf("&service=customers@%s&customer_filter=%s",
                        urlencode($this->SOAPEngine->customerEngine),
                        urlencode($gateway->customer)
                        );
    
                        printf("
                        <tr bgcolor=%s>
                        <td>%s</td>
                        <td><a href=%s>%s.%s</a></td>
                        <td>%s</td>
                        <td>%s</td>
                        <td>%s:%s:%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td><a href=%s>%s</a></td>
                        </tr>",
                        $bgcolor,
                        $index,
                        $_customer_url,
                        $gateway->customer,
                        $gateway->reseller,
                        $gateway->name,
                        $gateway->group,
                        $gateway->transport,
                        $gateway->ip,
                        $gateway->port,
                        $gateway->strip,
                        $gateway->prefix,
                        $gateway->changeDate,
                        $_url,
                        $actionText
                        );
    
                        printf("
                        </tr>
                        ");
                    } else {
                        printf("
                        <tr bgcolor=%s>
                        <td>%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td>%s:%s:%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td><a href=%s>%s</a></td>
                        </tr>",
                        $bgcolor,
                        $index,
                        $gateway->name,
                        $gateway->group,
                        $gateway->transport,
                        $gateway->ip,
                        $gateway->port,
                        $gateway->strip,
                        $gateway->prefix,
                        $_url,
                        $actionText
                        );
    
                        printf("
                        </tr>
                        ");
                    }

                    $i++;
    
                }
    
			}

            print "</table>";

            $this->showPagination($maxrows);

            return true;
        }
    }

    function showAddForm() {
		if ($this->selectionActive) return;

        $this->getGatewayGroups();

        if (!count($this->gatewayGroups)) {
            print "<p>Create a gateway group first";
            return false;
        }

        print "
        <p>
        <table border=0 class=border width=100% bgcolor=lightblue>
        <tr>
            ";
            printf ("<form method=post name=addform action=%s>",$_SERVER['PHP_SELF']);
            print "
        	<td align=left>
            ";

            print "
            <input type=submit name=action value=Add>
            ";

            printf (" Name<input type=text size=20 name=name>");

            printf (" Group: ");


            print "<select name=group> ";
            foreach ($this->gatewayGroups as $_grp) {
            	printf ("<option value='%s'>%s",$_grp,$_grp);
            }
            printf (" </select>");

            printf (" Address<input type=text size=25 name=address>");
            printf (" Strip: <select name=strip>");
            $t=0;
            while ($t<10) {
                print "<option value=$t>$t";
                $t++;
            }

            print "</select>";
            printf (" Prefix<input type=text size=5 name=prefix>");

            print "
	        </td>
        	<td align=right>
            ";
            print "
	        </td>
            ";
            $this->printHiddenFormElements();

            print "
            </form>
        </tr>
        </table>
        ";
    }

    function addRecord($dictionary=array()) {
        if ($dictionary['name']) {
    		$name   = $dictionary['name'];
        } else {
    		$name   = trim($_REQUEST['name']);
        }
        if ($dictionary['group']) {
    		$group   = $dictionary['group'];
        } else {
    		$group   = trim($_REQUEST['group']);
        }
        if ($dictionary['address']) {
    		$address   = $dictionary['address'];
        } else {
    		$address   = trim($_REQUEST['address']);
        }
        if ($dictionary['strip']) {
    		$strip   = $dictionary['strip'];
        } else {
    		$strip   = trim($_REQUEST['strip']);
        }
        if ($dictionary['prefix']) {
    		$prefix   = $dictionary['prefix'];
        } else {
    		$prefix   = trim($_REQUEST['prefix']);
        }

        if ($this->adminonly) {
        	if ($dictionary['reseller']) {
                $reseller=$dictionary['reseller'];
            } else {
            	$reseller = trim($_REQUEST['reseller']);
            }
        	if ($dictionary['customer']) {
                $customer=$dictionary['customer'];
            } else {
            	$customer = trim($_REQUEST['customer']);
            }
            if (!$customer) $customer=$reseller;
        } else {
        	$reseller = $this->reseller;
        	if ($dictionary['customer']) {
                $customer=$dictionary['customer'];
            } else {
            	$customer = trim($_REQUEST['customer']);
            }
            if (!$customer || !in_array($customer,array_keys($this->customers))) {
                $customer=$reseller;
            }
        }

		if (!strlen($name) || !strlen($group) || !strlen($address)) {
            printf ("<p><font color=red>Error: Missing gateway name, group or address</font>");
            return false;
        }

        $address_els=explode(':',$address);

        if (count($address_els) == 1) {
            $ip=$address_els[0];
            $transport='udp';
            $port='5060';
        } else if (count($address_els) == 2) {
            $ip=$address_els[0];
            $port=$address_els[1];
            $transport='udp';
        } else if (count($address_els) == 3) {
            $ip=$address_els[1];
            $port=intval($address_els[2]);
            if ($address_els[0] == 'tcp' || $address_els[0] == 'tls' || $address_els[0] == 'udp') {
            	$transport=$address_els[0];
            } else {
            	$transport='udp';
            }
        }

        $gateway=array(
                     'name'      => $name,
                     'group'     => $group,
                     'ip'        => $ip,
                     'port'      => intval($port),
                     'uriScheme' => 'sip',
                     'transport' => $transport,
                     'strip'     => intval($strip),
                     'prefix'    => $prefix,
                     'customer'    => intval($customer),
                     'reseller'    => intval($reseller)
        			);

        $function=array('commit'   => array('name'       => 'addGateway',
                                            'parameters' => array($gateway),
                                            'logs'       => array('success' => sprintf('<p>Gateway grup %s has been added',$address))),
                        'rollback' => array('name'       => 'deleteGateway',
                                            'parameters' => array($name)
                                            )
                        );
     
        unset($this->filters);
        return $this->SOAPEngine->execute($function);
    }

    function deleteRecord($dictionary=array()) {
        if (!$dictionary['confirm'] && !$_REQUEST['confirm']) {
        	print "<p><font color=red>Please press on Confirm to confirm the delete. </font>";
            return true;
        }

        if ($dictionary['name']) {
    		$name   = $dictionary['name'];
        } else {
    		$name   = trim($this->filters['name']);
        }

        if (!strlen($name)) {
            print "<p><font color=red>Error: missing gateway name. </font>";
            return false;
        }

        $function=array('commit'   => array('name'       => 'deleteGateway',
                                            'parameters' => array($name),
                                            'logs'       => array('success' => sprintf('<p>Gateway grup %s has been deleted',$name)))
                        );
        unset($this->filters);
        return $this->SOAPEngine->execute($function);

    }

    function showSeachFormCustom() {
        printf (" Name<input type=text size=15 name=name_filter value='%s'>",$this->filters['name']);
        printf (" Group<input type=text size=15 name=group_filter value='%s'>",$this->filters['group']);
    }

}

class Routes extends Records {
    var $gatewayGroups=array();

    var $sortElements=array(
                            'prefix'       => 'Prefix',
                            'priority'     => 'Priority'
                            );

    function Routes(&$SOAPEngine) {
    	$this->filters   = array('prefix'       => trim($_REQUEST['prefix_filter']),
                                 'priority'     => trim($_REQUEST['priority_filter']),
                                 'gatewayGroup' => trim($_REQUEST['gatewayGroup_filter'])
                                 );

		$this->Records(&$SOAPEngine);
    }

    function listRecords() {
        $this->getGatewayGroups();

        // Get gateway groups

		$this->showSeachForm();

        // Insert credetials
        $this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);

        // Filter
        $filter=array('prefix'       => $this->filters['prefix'],
                      'gatewayGroup' => $this->filters['gatewayGroup'],
                      'customer'     => intval($this->filters['customer']),
                      'reseller'     => intval($this->filters['reseller'])
                      );

        // Range
        $range=array('start' => intval($this->next),
                     'count' => intval($this->maxrowsperpage)
                     );

        // Order
        if (!$this->sorting['sortBy'])    $this->sorting['sortBy']    = 'prefix';
        if (!$this->sorting['sortOrder']) $this->sorting['sortOrder'] = 'ASC';

        $orderBy = array('attribute' => $this->sorting['sortBy'],
                         'direction' => $this->sorting['sortOrder']
                         );

        // Compose query
        $Query=array('filter'  => $filter,
                        'orderBy' => $orderBy,
                        'range'   => $range
                        );

        // Call function
        $result     = $this->SOAPEngine->soapclient->getRoutes($Query);

        if (PEAR::isError($result)) {
            $error_msg  = $result->getMessage();
            $error_fault= $result->getFault();
            $error_code = $result->getCode();
            printf ("<p><font color=red>Error from %s: %s (%s): %s</font>",$this->SOAPEngine->SOAPurl,$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            return false;
        } else {

			$this->rows = $result->total;

            print "
            <table border=0 align=center>
            <tr><td>$this->rows records found</td></tr>
            </table>
            <p>
            <table border=0 cellpadding=2 width=100%>
            ";

            print "
            <tr bgcolor=lightgrey>
                <td><b>Id</b></th>
                ";
                if ($this->version > 1) print "<td><b>Customer</b></td>";
                print"
                <td><b>Prefix</b></th>
                <td><b>Gateway Group</b></td>
                <td><b>Priority</b></td>
                <td><b>Change date</b></td>
                <td><b>Action</b></td>
            </tr>
            ";

            if (!$this->next)  $this->next=0;

            if ($this->rows > $this->maxrowsperpage)  {
                $maxrows = $this->maxrowsperpage + $this->next;
                if ($maxrows > $this->rows) $maxrows = $this->maxrowsperpage;
            } else {
                $maxrows=$this->rows;
            }

            $i=0;

			if ($this->rows) {
                while ($i < $maxrows)  {
    
                    if (!$result->routes[$i]) break;
    
                    $route = $result->routes[$i];
    
                    $index=$this->next+$i+1;

                    $rr=floor($index/2);
                    $mod=$index-$rr*2;
            
                    if ($mod ==0) {
                    	$bgcolor="lightgrey";
                    } else {
                        $bgcolor="white";
                    }

                    $_url = $this->url.sprintf("&service=%s&action=Delete&prefix_filter=%s&gatewayGroup_filter=%s&priority_filter=%s",
                    urlencode($this->SOAPEngine->service),
                    urlencode($route->prefix),
                    urlencode($route->gatewayGroup),
                    urlencode($route->priority)
                    );

                    if ($_REQUEST['action'] == 'Delete' &&
                    	$_REQUEST['prefix_filter'] == $route->prefix &&
                        $_REQUEST['gatewayGroup_filter'] == $route->gatewayGroup &&
                        $_REQUEST['priority_filter'] == $route->priority) {

                		$_url .= "&confirm=1";
                        $actionText = "<font color=red>Confirm</font>";
                    } else {
                        $actionText = "Delete";
                    }

	                if ($this->version > 1) {
                        $_customer_url = $this->url.sprintf("&service=customers@%s&customer_filter=%s",
                        urlencode($this->SOAPEngine->customerEngine),
                        urlencode($route->customer)
                        );
    
                        printf("
                        <tr bgcolor=%s>
                        <td>%s</td>
                        <td><a href=%s>%s.%s</a></td>
                        <td>%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td><a href=%s>%s</a></td>
                        </tr>",
                        $bgcolor,
                        $index,
                        $_customer_url,
                        $route->customer,
                        $route->reseller,
                        $route->prefix,
                        $route->gatewayGroup,
                        $route->priority,
                        $route->changeDate,
                        $_url,
                        $actionText
                        );
    
                        printf("
                        </tr>
                        ");
    
                    } else {
                        printf("
                        <tr bgcolor=%s>
                        <td>%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td><a href=%s>%s</a></td>
                        </tr>",
                        $bgcolor,
                        $index,
                        $route->prefix,
                        $route->gatewayGroup,
                        $route->priority,
                        $route->changeDate,
                        $_url,
                        $actionText
                        );
    
                        printf("
                        </tr>
                        ");

					}
                    $i++;
    
                }
    
			}

            print "</table>";

            $this->showPagination($maxrows);

            return true;
        }
    }

    function showAddForm() {
		if ($this->selectionActive) return;

        if (!count($this->gatewayGroups)) {
            print "<p>Create a gateway group first";
            return false;
        }

        print "
        <p>
        <table border=0 class=border width=100% bgcolor=lightblue>
        <tr>
            ";
            printf ("<form method=post name=addform action=%s>",$_SERVER['PHP_SELF']);
            print "
        	<td align=left>
            ";

            print "
            <input type=submit name=action value=Add>
            ";

            printf (" Prefix<input type=text size=20 name=prefix>");

            printf (" Group: ");

            print "<select name=gatewayGroup> ";
            foreach ($this->gatewayGroups as $_grp) {
            	printf ("<option value='%s'>%s",$_grp,$_grp);
            }

            printf (" </select>");
            printf (" Priority<input type=text size=5 name=priority>");

            print "
	        </td>
        	<td align=right>
            ";
            print "
	        </td>
            ";

            $this->printHiddenFormElements();

            print "
            </form>
        </tr>
        </table>
        ";
    }

    function addRecord($dictionary=array()) {
        if ($dictionary['prefix']) {
    		$prefix   = $dictionary['prefix'];
        } else {
    		$prefix   = trim($_REQUEST['prefix']);
        }
        if ($dictionary['gatewayGroup']) {
    		$gatewayGroup   = $dictionary['gatewayGroup'];
        } else {
    		$gatewayGroup   = trim($_REQUEST['gatewayGroup']);
        }
        if ($dictionary['priority']) {
    		$priority   = $dictionary['priority'];
        } else {
    		$priority   = trim($_REQUEST['priority']);
        }

        if ($this->adminonly) {
        	if ($dictionary['reseller']) {
                $reseller=$dictionary['reseller'];
            } else {
            	$reseller = trim($_REQUEST['reseller']);
            }
        	if ($dictionary['customer']) {
                $customer=$dictionary['customer'];
            } else {
            	$customer = trim($_REQUEST['customer']);
            }
            if (!$customer) $customer=$reseller;
        } else {
        	$reseller = $this->reseller;
        	if ($dictionary['customer']) {
                $customer=$dictionary['customer'];
            } else {
            	$customer = trim($_REQUEST['customer']);
            }
            if (!$customer || !in_array($customer,array_keys($this->customers))) {
                $customer=$reseller;
            }
        }

		if (!strlen($prefix) || !strlen($gatewayGroup)) {
            printf ("<p><font color=red>Error: Missing prefix or gatewayGroup. </font>");
            return false;
        }

        $route=array(
                     'prefix'       => $prefix,
                     'gatewayGroup' => $gatewayGroup,
                     'priority'     => intval($priority),
                     'customer'     => intval($customer),
                     'reseller'     => intval($reseller)
                     );

		$routes=array($route);

        $function=array('commit'   => array('name'       => 'addRoutes',
                                            'parameters' => array($routes),
                                            'logs'       => array('success' => sprintf('<p>Route %s has been added',$prefix))),
                        'rollback' => array('name'       => 'deleteRoutes',
                                            'parameters' => array($routes)
                                            )
                        );
     
        unset($this->filters);
        return $this->SOAPEngine->execute($function);

    }

    function deleteRecord($dictionary=array()) {
        if (!$dictionary['confirm'] && !$_REQUEST['confirm']) {
        	print "<p><font color=red>Please press on Confirm to confirm the delete. </font>";
            return true;
        }

        if ($dictionary['prefix']) {
    		$prefix   = $dictionary['prefix'];
        } else {
    		$prefix   = trim($this->filters['prefix']);
        }
        if ($dictionary['gatewayGroup']) {
    		$gatewayGroup   = $dictionary['gatewayGroup'];
        } else {
    		$gatewayGroup   = trim($this->filters['gatewayGroup']);
        }
        if ($dictionary['priority']) {
    		$priority   = $dictionary['priority'];
        } else {
    		$priority   = trim($this->filters['priority']);
        }

        if (!strlen($prefix) || !strlen($gatewayGroup)) {
            print "<p><font color=red>Error: missing route prefix or gatewayGroup. </font>";
            return false;
        }

        $route=array(
                     'prefix'       => $prefix,
                     'gatewayGroup' => $gatewayGroup,
                     'priority'     => intval($priority)
        			);

        $routes=array($route);

        $function=array('commit'   => array('name'       => 'deleteRoutes',
                                            'parameters' => array($routes),
                                            'logs'       => array('success' => sprintf('<p>Route %s has been deleted',$prefix)))
                        );
     
        unset($this->filters);
        return $this->SOAPEngine->execute($function);
    }

    function showSeachFormCustom() {

        printf (" Prefix<input type=text size=15 name=prefix_filter value='%s'>",$this->filters['prefix']);
        print "<select name=gatewayGroup_filter>
        	<option>";
		$selected_gatewayGroups[$this->filters['gatewayGroup']]='selected';
        foreach ($this->gatewayGroups as $_grp) {
            printf ("<option value='%s' %s>%s",$_grp,$selected_gatewayGroups[$_grp],$_grp);
        }
        printf (" </select>");

    }
}

class DomainStatistics extends Records {

    var $maxrowsperpage= 200;

    function DomainStatistics(&$SOAPEngine) {
        $this->filters   = array('domain'       => trim($_REQUEST['domain_filter']));

		$this->Records(&$SOAPEngine);
    }

    function listRecords() {

		$this->showSeachForm();

        // Insert credetials
        $this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);

		$filter=$this->filters['domain'];

        // Call function
        $result     = $this->SOAPEngine->soapclient->getDomainStatistics($filter);

        if (PEAR::isError($result)) {
            $error_msg  = $result->getMessage();
            $error_fault= $result->getFault();
            $error_code = $result->getCode();
            printf ("<p><font color=red>Error from %s: %s (%s): %s</font>",$this->SOAPEngine->SOAPurl,$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            return false;

        } else {

			$this->rows = count($result);

            //print_r($result);

            print "
            <table border=0 align=center>
            <tr><td>$this->rows records found</td></tr>
            </table>
            <p>
            <table border=0 cellpadding=2 width=100%>
            <tr bgcolor=lightgrey>
                <td><b>Id</b></th>
                <td><b>SIP domain</b></td>
                <td><b>SIP subscribers</b></td>
                <td><b>Online subscribers</b></td>
                <td><b>Online SIP devices</b></td>
            </tr>
            ";

            if (!$this->next)  $this->next=0;

            if ($this->rows > $this->maxrowsperpage)  {
                $maxrows = $this->maxrowsperpage + $this->next;
                if ($maxrows > $this->rows) $maxrows = $this->maxrowsperpage;
            } else {
                $maxrows=$this->rows;
            }

            $i=0;

			if ($this->rows) {
                while ($i < $maxrows)  {
    
                    $domain = $result[$i];
                    if (!strlen($domain->users)) break;

                    $index = $this->next+$i+1;
    
                    $rr=floor($index/2);
                    $mod=$index-$rr*2;
            
                    if ($mod ==0) {
                    	$bgcolor="lightgrey";
                    } else {
                        $bgcolor="white";
                    }

        			$_url = $this->url.sprintf("&service=%s&action=Delete&domain_filter=%s",
                    urlencode($this->SOAPEngine->service),
                    urlencode($domain->domain)
                    );

                    if ($_REQUEST['action'] == 'Delete' &&
                        $_REQUEST['domain_filter'] == $domain->domain) {
                		$_url .= "&confirm=1";
                        $actionText = "<font color=red>Confirm</font>";
                    } else {
                        $actionText = "Delete";
                    }

                    printf("
                    <tr bgcolor=%s>
                    <td>%s</td>
                    <td>%s</td>
                    <td>%s</td>
                    <td>%s</td>
                    <td>%s</td>
                    </tr>",
                    $bgcolor,
                    $index,
                    $domain->domain,
                    $domain->users,
                    $domain->onlineUsers,
                    $domain->onlineDevices
                    );

                    $i++;
                }
			}

            print "</table>";

            $this->showPagination($maxrows);

            return true;
        }
    }

    function showSeachFormCustom() {
        printf (" Domain<input type=text size=15 name=domain_filter value='%s'>",$this->filters['domain']);
    }

}

class Customers extends Records {
    var $children     = array();
	var $showAddForm  = false;

    var $sortElements = array(
							'changeDate'   => 'Change date',
                            'username'     => 'Username',
                            'firstName'    => 'First name',
                            'lastName'     => 'Last name',
                            'organization' => 'Organization',
                            'customer'     => 'Customer'
                            );

    var $propertiesItems = array('sip_credit'          => array('name'      => 'Credit for SIP accounts',
                                                               'category'   => 'credit',
                                                               'permission' => 'admin',
                                                               'resellerMayManageForChildAccounts' => true
                                                               ),
                                 'sip_alias_credit'    => array('name'      => 'Credit for SIP aliases',
                                                               'category'   => 'credit',
                                                               'permission' => 'admin',
                                                               'resellerMayManageForChildAccounts' => true
                                                               ),
                                 'enum_range_credit'   => array('name'      => 'Credit for ENUM ranges',
                                                               'category'   => 'credit',
                                                               'permission' => 'admin',
                                                               'resellerMayManageForChildAccounts' => true
                                                               ),
                                 'enum_number_credit'  => array('name'      => 'Credit for ENUM numbers',
                                                               'category'   => 'credit',
                                                               'permission' => 'admin',
                                                               'resellerMayManageForChildAccounts' => true
                                                               ),
                                 'pstn_access'         => array('name'      => 'Access to PSTN',
                                                               'category'   => 'sip',
                                                               'permission' => 'admin',
                                                               'resellerMayManageForChildAccounts' => true
                                                               ),
                                 'voicemail_server'    => array('name'      => 'Voicemail server address',
                                                               'category'   => 'sip',
                                                               'permission' => 'customer'
                                                               ),
                                 'sip_proxy_server'    => array('name'      => 'SIP Proxy server address',
                                                               'category'   => 'sip',
                                                               'permission' => 'customer'
                                                               ),
                                 'support_web'         => array('name'      => 'Support web site',
                                                               'category'   => 'sip',
                                                               'permission' => 'customer'
                                                               ),
                                 'support_email'       => array('name'      => 'Support email address',
                                                               'category'   => 'sip',
                                                               'permission' => 'customer'
                                                               ),
                                 'support_organization'=> array('name'      => 'Support organization',
                                                               'category'   => 'sip',
                                                               'permission' => 'customer'
                                                               ),
                                 'cdrtool_address'     => array('name'      => 'CDRTool address',
                                                               'category'   => 'sip',
                                                               'permission' => 'customer'
                                                               ),
                                 'sip_settings_page'   => array('name'      => 'SIP settings page',
                                                               'category'   => 'sip',
                                                               'permission' => 'customer'
                                                               ),
                                 'sip_default_domain'  => array('name'      => 'Default SIP domain',
                                                               'category'   => 'sip',
                                                               'permission' => 'customer'
                                                               ),
                                 'enum_default_range'  => array('name'      => 'Default ENUM range',
                                                               'category'   => 'enum',
                                                               'permission' => 'customer'
                                                               ),
                                 'enum_default_tld'    => array('name'      => 'Default ENUM Top Level Domain',
                                                               'category'   => 'enum',
                                                               'permission' => 'customer'
                                                               ),
                                 'records_per_page'    => array('name'     => 'Records per page',
                                                               'category'  => 'web',
                                                               'permission'  => 'customer'
                                                               )
                                 );

    var $FieldsReadOnly=array(
                              'id'          => array('type'=>'integer'),
                              'reseller'    => array('type'=>'integer')
                              );
    var $Fields=array(
                           'resellerActive' => array ('type'      => 'boolean',
                                                      'name'      => 'Reseller active',
                                                      'adminonly' => true
                                                     ),
                              'aliasOf'     => array('type'       =>'integer',
                                                     'name'       =>'Impersonate'),
                              'companyCode' => array('type'       =>'text',
                                                     'name'       =>'Company code',
                                                     'adminonly'  => true
                                                     ),
                              'balance'     => array('type'       => 'float',
                                                     'adminonly'  => true
                                                     ),
                              'credit'      => array('type'       => 'float',
                                                     'adminonly'  => true
                                                     ),
                              'username'    => array('type'       =>'text'
                                                     ),
                              'password'    => array('type'=>'text',
                                                     'name'=>'Password'),
                              'firstName'   => array('type'=>'text',
                                                     'name'=>'First name'),
                              'lastName'    => array('type'=>'text',
                                                     'name'=>'Last name'),
                              'organization'=> array('type'=>'text'),
                              'tel'         => array('type'=>'text'),
                              'fax'         => array('type'=>'text'),
                              'sip'         => array('type'=>'text'),
                              'enum'        => array('type'=>'text'),
                              'mobile'      => array('type'=>'text'),
                              'email'       => array('type'=>'text'),
                              'web'         => array('type'=>'text'),
                              'address'     => array('type'=>'textarea'),
                              'postcode'    => array('type'=>'text'),
                              'city'        => array('type'=>'text'),
                              'state'       => array('type'=>'text'),
                              'country'     => array('type'=>'text'),
                              'timezone'    => array('type'=>'text'),
                              'language'    => array('type'=>'text'),
                              'vatNumber'   => array('type'=>'text',
                                                     'name'=>'VAT number'),
                              'bankAccount' => array('type'=>'text',
                                                     'name'=>'Bank account'
                                                     ),
                             'billingEmail' => array('type'=>'text',
                                                     'name'=>'Billing email'
                                                     ),
                           'billingAddress' => array('type'=>'textarea',
                                                     'name'=>'Billing address'
                                                     )
                              );

    var $addFields=array(
                              'username'    => array('type'       =>'text'
                                                     ),
                              'password'    => array('type'=>'text',
                                                     'name'=>'Password'),
                              'firstName'   => array('type'=>'text',
                                                     'name'=>'First name'),
                              'lastName'    => array('type'=>'text',
                                                     'name'=>'Last name'),
                              'organization'=> array('type'=>'text'),
                              'tel'         => array('type'=>'text'),
                              'email'       => array('type'=>'text'),
                              'address'     => array('type'=>'textarea'),
                              'postcode'    => array('type'=>'text'),
                              'city'        => array('type'=>'text'),
                              'state'       => array('type'=>'text'),
                              'country'     => array('type'=>'text'),
                              'timezone'    => array('type'=>'text'),
                              );

        var $states=array(
        array("label"=>"", "value"=>"N/A"),
        array("label"=>"-- CANADA --", "value"=>"-"),
        array("label"=>"Alberta", "value"=>"AB"),
        array("label"=>"British Columbia", "value"=>"BC"),
        array("label"=>"Manitoba", "value"=>"MB"),
        array("label"=>"New Brunswick", "value"=>"NB"),
        array("label"=>"Newfoundland/Labrador", "value"=>"NL"),
        array("label"=>"Northwest Territory", "value"=>"NT"),
        array("label"=>"Nova Scotia", "value"=>"NS"),
        array("label"=>"Nunavut", "value"=>"NU"),
        array("label"=>"Ontario", "value"=>"ON"),
        array("label"=>"Prince Edward Island", "value"=>"PE"),
        array("label"=>"Quebec", "value"=>"QC"),
        array("label"=>"Saskatchewan", "value"=>"SN"),
        array("label"=>"Yukon", "value"=>"YT"),
        array("label"=>"---- US -----", "value"=>"-"),
        array("label"=>"Alabama", "value"=>"AL"),
        array("label"=>"Alaska", "value"=>"AK"),
        array("label"=>"American Samoa", "value"=>"AS"),
        array("label"=>"Arizona", "value"=>"AZ"),
        array("label"=>"Arkansas", "value"=>"AR"),
        array("label"=>"California", "value"=>"CA"),
        array("label"=>"Canal Zone", "value"=>"CZ"),
        array("label"=>"Colorado", "value"=>"CO"),
        array("label"=>"Connecticut", "value"=>"CT"),
        array("label"=>"Delaware", "value"=>"DE"),
        array("label"=>"District of Columbia", "value"=>"DC"),
        array("label"=>"Florida", "value"=>"FL"),
        array("label"=>"Georgia", "value"=>"GA"),
        array("label"=>"Guam", "value"=>"GU"),
        array("label"=>"Hawaii", "value"=>"HI"),
        array("label"=>"Idaho", "value"=>"ID"),
        array("label"=>"Illinois", "value"=>"IL"),
        array("label"=>"Indiana", "value"=>"IN"),
        array("label"=>"Iowa", "value"=>"IA"),
        array("label"=>"Kansas", "value"=>"KS"),
        array("label"=>"Kentucky", "value"=>"KY"),
        array("label"=>"Louisiana", "value"=>"LA"),
        array("label"=>"Maine", "value"=>"ME"),
        array("label"=>"Mariana Islands", "value"=>"MP"),
        array("label"=>"Maryland", "value"=>"MD"),
        array("label"=>"Massachusetts", "value"=>"MA"),
        array("label"=>"Michigan", "value"=>"MI"),
        array("label"=>"Minnesota", "value"=>"MN"),
        array("label"=>"Mississippi", "value"=>"MS"),
        array("label"=>"Missouri", "value"=>"MO"),
        array("label"=>"Montana", "value"=>"MT"),
        array("label"=>"Nebraska", "value"=>"NE"),
        array("label"=>"Nevada", "value"=>"NV"),
        array("label"=>"New Hampshire", "value"=>"NH"),
        array("label"=>"New Jersey", "value"=>"NJ"),
        array("label"=>"New Mexico", "value"=>"NM"),
        array("label"=>"New York", "value"=>"NY"),
        array("label"=>"North Carolina", "value"=>"NC"),
        array("label"=>"North Dakota", "value"=>"ND"),
        array("label"=>"Ohio", "value"=>"OH"),
        array("label"=>"Oklahoma", "value"=>"OK"),
        array("label"=>"Oregon", "value"=>"OR"),
        array("label"=>"Pennsylvania", "value"=>"PA"),
        array("label"=>"Puerto Rico", "value"=>"PR"),
        array("label"=>"Rhode Island", "value"=>"RI"),
        array("label"=>"South Carolina", "value"=>"SC"),
        array("label"=>"South Dakota", "value"=>"SD"),
        array("label"=>"Tennessee", "value"=>"TN"),
        array("label"=>"Texas", "value"=>"TX"),
        array("label"=>"Utah", "value"=>"UT"),
        array("label"=>"Vermont", "value"=>"VT"),
        array("label"=>"Virgin Islands", "value"=>"VI"),
        array("label"=>"Virginia", "value"=>"VA"),
        array("label"=>"Washington", "value"=>"WA"),
        array("label"=>"West Virginia", "value"=>"WV"),
        array("label"=>"Wisconsin", "value"=>"WI"),
        array("label"=>"Wyoming", "value"=>"WY"),
        array("label"=>"APO", "value"=>"AP"),
        array("label"=>"AEO", "value"=>"AE"),
        array("label"=>"AAO", "value"=>"AA"),
        array("label"=>"FPO", "value"=>"FP")
        );
        
        var $countries=array(
        array("label"=>"Ascension Island",	"value"=>"AC"),
        array("label"=>"Afghanistan",		"value"=>"AF"),
        array("label"=>"Albania",		"value"=>"AL"),
        array("label"=>"Algeria",		"value"=>"DZ"),
        array("label"=>"American Samoa",	"value"=>"AS"),
        array("label"=>"Andorra",		"value"=>"AD"),
        array("label"=>"Angola",		"value"=>"AO"),
        array("label"=>"Anguilla",		"value"=>"AI"),
        array("label"=>"Antarctica",		"value"=>"AQ"),
        array("label"=>"Antigua And Barbuda",	"value"=>"AG"),
        array("label"=>"Argentina",		"value"=>"AR"),
        array("label"=>"Armenia",		"value"=>"AM"),
        array("label"=>"Aruba",			"value"=>"AW"),
        array("label"=>"Australia",		"value"=>"AU"),
        array("label"=>"Austria",		"value"=>"AT"),
        array("label"=>"Azerbaijan",		"value"=>"AZ"),
        array("label"=>"Bahamas",		"value"=>"BS"),
        array("label"=>"Bahrain",		"value"=>"BH"),
        array("label"=>"Bangladesh",	        "value"=>"BD"),
        array("label"=>"Barbados",	        "value"=>"BB"),
        array("label"=>"Belarus",	        "value"=>"BY"),
        array("label"=>"Belgium",	        "value"=>"BE"),
        array("label"=>"Belize",	        "value"=>"BZ"),
        array("label"=>"Benin",		        "value"=>"BJ"),
        array("label"=>"Bermuda",	        "value"=>"BM"),
        array("label"=>"Bhutan",	        "value"=>"BT"),
        array("label"=>"Bolivia",	        "value"=>"BO"),
        array("label"=>"Bosnia And Herzegowina","value"=>"BA"),
        array("label"=>"Botswana",		"value"=>"BW"),
        array("label"=>"Bouvet Island",		"value"=>"BV"),
        array("label"=>"Brazil",		"value"=>"BR"),
        array("label"=>"British Indian Ocean Territory",	"value"=>"IO"),
        array("label"=>"Brunei Darussalam",	"value"=>"BN"),
        array("label"=>"Bulgaria",	        "value"=>"BG"),
        array("label"=>"Burkina Faso",	        "value"=>"BF"),
        array("label"=>"Burundi",	        "value"=>"BI"),
        array("label"=>"Cambodia",	        "value"=>"KH"),
        array("label"=>"Cameroon",	        "value"=>"CM"),
        array("label"=>"Canada",	        "value"=>"CA"),
        array("label"=>"Cape Verde",	        "value"=>"CV"),
        array("label"=>"Cayman Islands",        "value"=>"KY"),
        array("label"=>"Central African Republic",	"value"=>"CF"),
        array("label"=>"Chad",			"value"=>"TD"),
        array("label"=>"Chile",			"value"=>"CL"),
        array("label"=>"China",			"value"=>"CN"),
        array("label"=>"Christmas Island",	"value"=>"CX"),
        array("label"=>"Cocos (Keeling) Islands",	"value"=>"CC"),
        array("label"=>"Colombia",		"value"=>"CO"),
        array("label"=>"Comoros",		"value"=>"KM"),
        array("label"=>"Congo",			"value"=>"CG"),
        array("label"=>"Congo, Democratic People's Republic",	"value"=>"CD"),
        array("label"=>"Cook Islands", 		"value"=>"CK"),
        array("label"=>"Costa Rica",		"value"=>"CR"),
        array("label"=>"Cote d'Ivoire",		"value"=>"CI"),
        array("label"=>"Croatia (local name: Hrvatska)",	"value"=>"HR"),
        array("label"=>"Cuba",		"value"=>"CU"),
        array("label"=>"Cyprus",	"value"=>"CY"),
        array("label"=>"Czech Republic","value"=>"CZ"),
        array("label"=>"Denmark",	"value"=>"DK"),
        array("label"=>"Djibouti",	"value"=>"DJ"),
        array("label"=>"Dominica",	"value"=>"DM"),
        array("label"=>"Dominican Republic",	"value"=>"DO"),
        array("label"=>"East Timor",	"value"=>"TP"),
        array("label"=>"Ecuador",	"value"=>"EC"),
        array("label"=>"Egypt",		"value"=>"EG"),
        array("label"=>"El Salvador",	"value"=>"SV"),
        array("label"=>"Equatorial Guinea",	"value"=>"GQ"),
        array("label"=>"Eritrea",	"value"=>"ER"),
        array("label"=>"Estonia",	"value"=>"EE"),
        array("label"=>"Ethiopia",	"value"=>"ET"),
        array("label"=>"Falkland Islands (Malvinas)",	"value"=>"FK"),
        array("label"=>"Faroe Islands",	"value"=>"FO"),
        array("label"=>"Fiji",		"value"=>"FJ"),
        array("label"=>"Finland",	"value"=>"FI"),
        array("label"=>"France",	"value"=>"FR"),
        array("label"=>"French Guiana",	"value"=>"GF"),
        array("label"=>"French Polynesia",	"value"=>"PF"),
        array("label"=>"French Southern Territories",	"value"=>"TF"),
        array("label"=>"Gabon",		"value"=>"GA"),
        array("label"=>"Gambia",	"value"=>"GM"),
        array("label"=>"Georgia",	"value"=>"GE"),
        array("label"=>"Germany",	"value"=>"DE"),
        array("label"=>"Ghana",	"value"=>"GH"),
        array("label"=>"Gibraltar",	"value"=>"GI"),
        array("label"=>"Greece",	"value"=>"GR"),
        array("label"=>"Greenland",	"value"=>"GL"),
        array("label"=>"Grenada",	"value"=>"GD"),
        array("label"=>"Guadeloupe",	"value"=>"GP"),
        array("label"=>"Guam",	"value"=>"GU"),
        array("label"=>"Guatemala",	"value"=>"GT"),
        array("label"=>"Guernsey",	"value"=>"GG"),
        array("label"=>"Guinea",	"value"=>"GN"),
        array("label"=>"Guinea-Bissau",	"value"=>"GW"),
        array("label"=>"Guyana",	"value"=>"GY"),
        array("label"=>"Haiti",	"value"=>"HT"),
        array("label"=>"Heard And Mc Donald Islands",	"value"=>"HM"),
        array("label"=>"Honduras",	"value"=>"HN"),
        array("label"=>"Hong Kong",	"value"=>"HK"),
        array("label"=>"Hungary",	"value"=>"HU"),
        array("label"=>"Iceland",	"value"=>"IS"),
        array("label"=>"India",	"value"=>"IN"),
        array("label"=>"Indonesia",	"value"=>"ID"),
        array("label"=>"Iran (Islamic Republic Of)",	"value"=>"IR"),
        array("label"=>"Iraq",	"value"=>"IQ"),
        array("label"=>"Ireland",	"value"=>"IE"),
        array("label"=>"Isle of Man",	"value"=>"IM"),
        array("label"=>"Israel",	"value"=>"IL"),
        array("label"=>"Italy",	"value"=>"IT"),
        array("label"=>"Jamaica",	"value"=>"JM"),
        array("label"=>"Japan",	"value"=>"JP"),
        array("label"=>"Jersey",	"value"=>"JE"),
        array("label"=>"Jordan",	"value"=>"JO"),
        array("label"=>"Kazakhstan",	"value"=>"KZ"),
        array("label"=>"Kenya",	"value"=>"KE"),
        array("label"=>"Kiribati",	"value"=>"KI"),
        array("label"=>"Korea, Democratic People's Republic Of",	"value"=>"KP"),
        array("label"=>"Korea, Republic Of",	"value"=>"KR"),
        array("label"=>"Kuwait",	"value"=>"KW"),
        array("label"=>"Kyrgyzstan",	"value"=>"KG"),
        array("label"=>"Lao People's Democratic Republic",	"value"=>"LA"),
        array("label"=>"Latvia",	"value"=>"LV"),
        array("label"=>"Lebanon",	"value"=>"LB"),
        array("label"=>"Lesotho",	"value"=>"LS"),
        array("label"=>"Liberia",	"value"=>"LR"),
        array("label"=>"Libyan Arab Jamahiriya",	"value"=>"LY"),
        array("label"=>"Liechtenstein",	"value"=>"LI"),
        array("label"=>"Lithuania",	"value"=>"LT"),
        array("label"=>"Luxembourg",	"value"=>"LU"),
        array("label"=>"Macau",	"value"=>"MO"),
        array("label"=>"Macedonia, The Former Yugoslav",	"value"=>"MK"),
        array("label"=>"Of",	"value"=>"Republic"),
        array("label"=>"Madagascar",	"value"=>"MG"),
        array("label"=>"Malawi",	"value"=>"MW"),
        array("label"=>"Malaysia",	"value"=>"MY"),
        array("label"=>"Maldives",	"value"=>"MV"),
        array("label"=>"Mali",	"value"=>"ML"),
        array("label"=>"Malta",	"value"=>"MT"),
        array("label"=>"Marshall Islands",	"value"=>"MH"),
        array("label"=>"Martinique",	"value"=>"MQ"),
        array("label"=>"Mauritania",	"value"=>"MR"),
        array("label"=>"Mauritius",	"value"=>"MU"),
        array("label"=>"Mayotte",	"value"=>"YT"),
        array("label"=>"Mexico",	"value"=>"MX"),
        array("label"=>"Micronesia, Federated States Of",	"value"=>"FM"),
        array("label"=>"Moldova, Republic Of",	"value"=>"MD"),
        array("label"=>"Monaco",	"value"=>"MC"),
        array("label"=>"Mongolia",	"value"=>"MN"),
        array("label"=>"Montserrat",	"value"=>"MS"),
        array("label"=>"Morocco",	"value"=>"MA"),
        array("label"=>"Mozambique",	"value"=>"MZ"),
        array("label"=>"Myanmar",	"value"=>"MM"),
        array("label"=>"Namibia",	"value"=>"NA"),
        array("label"=>"Nauru",	"value"=>"NR"),
        array("label"=>"Nepal",	"value"=>"NP"),
        array("label"=>"Netherlands",	"value"=>"NL"),
        array("label"=>"Netherlands Antilles",	"value"=>"AN"),
        array("label"=>"New Caledonia",	"value"=>"NC"),
        array("label"=>"New Zealand",	"value"=>"NZ"),
        array("label"=>"Nicaragua",	"value"=>"NI"),
        array("label"=>"Niger",	"value"=>"NE"),
        array("label"=>"Nigeria",	"value"=>"NG"),
        array("label"=>"Niue",	"value"=>"NU"),
        array("label"=>"Norfolk Island",	"value"=>"NF"),
        array("label"=>"Northern Mariana Islands",	"value"=>"MP"),
        array("label"=>"Norway",	"value"=>"NO"),
        array("label"=>"Oman",	"value"=>"OM"),
        array("label"=>"Pakistan",	"value"=>"PK"),
        array("label"=>"Palau",	"value"=>"PW"),
        array("label"=>"Palestinian Territories",	"value"=>"PS"),
        array("label"=>"Panama",	"value"=>"PA"),
        array("label"=>"Papua New Guinea",	"value"=>"PG"),
        array("label"=>"Paraguay",	"value"=>"PY"),
        array("label"=>"Peru",	"value"=>"PE"),
        array("label"=>"Philippines",	"value"=>"PH"),
        array("label"=>"Pitcairn",	"value"=>"PN"),
        array("label"=>"Poland",	"value"=>"PL"),
        array("label"=>"Portugal",	"value"=>"PT"),
        array("label"=>"Puerto Rico",	"value"=>"PR"),
        array("label"=>"Qatar",	"value"=>"QA"),
        array("label"=>"Reunion",	"value"=>"RE"),
        array("label"=>"Romania",	"value"=>"RO"),
        array("label"=>"Russian Federation",	"value"=>"RU"),
        array("label"=>"Rwanda",	"value"=>"RW"),
        array("label"=>"Saint Kitts And Nevis",	"value"=>"KN"),
        array("label"=>"Saint Lucia",	"value"=>"LC"),
        array("label"=>"Saint Vincent And The Grenadines",	"value"=>"VC"),
        array("label"=>"Samoa",	"value"=>"WS"),
        array("label"=>"San Marino",	"value"=>"SM"),
        array("label"=>"Sao Tome And Principe",	"value"=>"ST"),
        array("label"=>"Saudi Arabia",	"value"=>"SA"),
        array("label"=>"Senegal",	"value"=>"SN"),
        array("label"=>"Seychelles",	"value"=>"SC"),
        array("label"=>"Sierra Leone",	"value"=>"SL"),
        array("label"=>"Singapore",	"value"=>"SG"),
        array("label"=>"Slovakia (Slovak Republic)",	"value"=>"SK"),
        array("label"=>"Slovenia",	"value"=>"SI"),
        array("label"=>"Solomon Islands",	"value"=>"SB"),
        array("label"=>"Somalia",	"value"=>"SO"),
        array("label"=>"South Africa",	"value"=>"ZA"),
        array("label"=>"South Georgia And South Sandwich",	"value"=>"GS"),
        array("label"=>"Spain",	"value"=>"ES"),
        array("label"=>"Sri Lanka",	"value"=>"LK"),
        array("label"=>"St. Helena",	"value"=>"SH"),
        array("label"=>"St. Pierre And Miquelon",	"value"=>"PM"),
        array("label"=>"Sudan",	"value"=>"SD"),
        array("label"=>"Suriname",	"value"=>"SR"),
        array("label"=>"Svalbard And Jan Mayen Islands",	"value"=>"SJ"),
        array("label"=>"Swaziland",	"value"=>"SZ"),
        array("label"=>"Sweden",	"value"=>"SE"),
        array("label"=>"Switzerland",	"value"=>"CH"),
        array("label"=>"Syrian Arab Republic",	"value"=>"SY"),
        array("label"=>"Taiwan, Province Of China",	"value"=>"TW"),
        array("label"=>"Tajikistan",	"value"=>"TJ"),
        array("label"=>"Tanzania, United Republic Of",	"value"=>"TZ"),
        array("label"=>"Thailand",	"value"=>"TH"),
        array("label"=>"Togo",	"value"=>"TG"),
        array("label"=>"Tokelau",	"value"=>"TK"),
        array("label"=>"Tonga",	"value"=>"TO"),
        array("label"=>"Trinidad And Tobago",	"value"=>"TT"),
        array("label"=>"Tunisia",	"value"=>"TN"),
        array("label"=>"Turkey",	"value"=>"TR"),
        array("label"=>"Turkmenistan",	"value"=>"TM"),
        array("label"=>"Turks And Caicos Islands",	"value"=>"TC"),
        array("label"=>"Tuvalu",	"value"=>"TV"),
        array("label"=>"Uganda",	"value"=>"UG"),
        array("label"=>"Ukraine",	"value"=>"UA"),
        array("label"=>"United Arab Emirates",	"value"=>"AE"),
        array("label"=>"United Kingdom",	"value"=>"UK"),
        array("label"=>"United States",	"value"=>"US"),
        array("label"=>"United States Minor Outlying Islands",	"value"=>"UM"),
        array("label"=>"Uruguay",	"value"=>"UY"),
        array("label"=>"Uzbekistan",	"value"=>"UZ"),
        array("label"=>"Vanuatu",	"value"=>"VU"),
        array("label"=>"Vatican City State (Holy See)",	"value"=>"VA"),
        array("label"=>"Venezuela",	"value"=>"VE"),
        array("label"=>"Viet Nam",	"value"=>"VN"),
        array("label"=>"Virgin Islands (British)",	"value"=>"VG"),
        array("label"=>"Virgin Islands (U.S.)",	"value"=>"VI"),
        array("label"=>"Wallis And Futuna Islands",	"value"=>"WF"),
        array("label"=>"Western Sahara",	"value"=>"EH"),
        array("label"=>"Yemen",	"value"=>"YE"),
        array("label"=>"Yugoslavia",	"value"=>"YU"),
        array("label"=>"Zaire",	"value"=>"ZR"),
        array("label"=>"Zambia",	"value"=>"ZM"),
        array("label"=>"Zimbabwe",	"value"=>"ZW"),
        array("label"=>"Undefined",	"value"=>"N/A")
        );

    function Customers(&$SOAPEngine) {
        $this->filters   = array(
                           'username'       => trim($_REQUEST['username_filter']),
                           'firstName'      => trim($_REQUEST['firstName_filter']),
                           'lastName'       => trim($_REQUEST['lastName_filter']),
                           'organization'   => trim($_REQUEST['organization_filter']),
                           'tel'            => trim($_REQUEST['tel_filter']),
                           'email'          => trim($_REQUEST['email_filter']),
                           'web'            => trim($_REQUEST['web_filter']),
                           'country'        => trim($_REQUEST['country_filter']),
                           'city'           => trim($_REQUEST['city_filter']),
                           'only_resellers' => trim($_REQUEST['only_resellers_filter'])
                           );

		$this->Records(&$SOAPEngine);

		$this->showAddForm = $_REQUEST['showAddForm'];

        $this->customerProperties = &$this->SOAPEngine->customerProperties;
		$this->allProperties=array_merge($this->propertiesItems,$this->customerProperties);

    }

    function showSeachForm() {
     	print "
        <p>
        <table border=0 class=border width=100% bgcolor=lightgreen>
        <tr>
        ";

        printf ("<form method=post name=soapengine action=%s>",$_SERVER['PHP_SELF']);
        print "
        <td align=left>
        ";
        print "
        <input type=submit name=action value=Search>
        ";

        $this->showEngineSelection();

        $this->showSeachFormCustom();

        print "
        </td>
        <td align=right>
        ";
        $this->showSortForm();

        $this->printHiddenFormElements();

        print "
        </td>
        </form>
        </tr>
        </table>
        ";
    }

    function listRecords() {

        // Filter
        $filter=array('username'     => $this->filters['username'],
                      'firstName'    => $this->filters['firstName'],
                      'lastName'     => $this->filters['lastName'],
                      'organization' => $this->filters['organization'],
                      'tel'          => $this->filters['tel'],
                      'email'        => $this->filters['email'],
                      'web'          => $this->filters['web'],
                      'city'         => $this->filters['city'],
                      'country'      => $this->filters['country'],
                      'only_resellers' => $this->filters['only_resellers'],
                      'customer'     => intval($this->filters['customer']),
                      'reseller'     => intval($this->filters['reseller'])
                      );

        //print_r($filter);

        // Range
        $range=array('start' => intval($this->next),
                     'count' => intval($this->maxrowsperpage)
                     );

        // Order
        if (!$this->sorting['sortBy'])    $this->sorting['sortBy']    = 'customer';
        if (!$this->sorting['sortOrder']) $this->sorting['sortOrder'] = 'DESC';

        $orderBy = array('attribute' => $this->sorting['sortBy'],
                         'direction' => $this->sorting['sortOrder']
                         );

        // Compose query
        $Query=array('filter'     => $filter,
                        'orderBy' => $orderBy,
                        'range'   => $range
                        );

		$this->showSeachForm();

        if ($this->showAddForm) {
            $this->showAddForm();
            return true;
        }

        // Insert credetials
        $this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);

        // Call function
        if ($this->adminonly && $this->filters['only_resellers']) {
        	$result     = $this->SOAPEngine->soapclient->getResellers($Query);
        } else {
        	$result     = $this->SOAPEngine->soapclient->getCustomers($Query);
        }

        if (PEAR::isError($result)) {
            $error_msg  = $result->getMessage();
            $error_fault= $result->getFault();
            $error_code = $result->getCode();
            printf ("<p><font color=red>Error from %s: %s (%s): %s</font>",$this->SOAPEngine->SOAPurl,$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            return false;
        } else {

			$this->rows = $result->total;

			if ($this->rows == 1 ) {
                $customer = $result->accounts[0];
                $this->showRecord($customer);
                return true;
            }

            if ($this->rows && $_REQUEST['action'] != 'PerformActions' && $_REQUEST['action'] != 'Delete') {
                $this->showActionsForm();
            }

            print "
            <table border=0 align=center width=100%>
            <tr><td align=left width=33%>";

                $_add_url = $this->url.sprintf("&service=%s&showAddForm=1",
	            urlencode($this->SOAPEngine->service)
                );
    	        printf ("<a href=%s>Add new customer</a> ",$_add_url);


            if ($this->adminonly) {
    			if ($this->adminonly && $this->filters['reseller']) {
           			$_add_url = $this->url.sprintf("&service=%s&showAddForm=1&reseller_filter=%s",
	            	urlencode($this->SOAPEngine->service),
    	            urlencode($this->filters['reseller'])
	        	    );
    	        	printf (" | <a href=%s>Add customer under reseller %s</a> ",$_add_url,$this->filters['reseller']);
                }
            }

            print "
            <td align=center width=33%>$this->rows records found</td>
            <td>
            </td></tr>
            </table>
            <p>
            <table border=0 cellpadding=2 width=100%>
            <tr bgcolor=lightgrey>
                <td><b>Id</b></th>
                ";
                if ($this->version > 1) print "<td><b>Customer</b></td>";
                print"
                <td><b>Username</b></td>
                <td><b>Name</b></td>
                <td><b>Organization</b></td>
                <td><b>Country</b></td>
                <td><b>E-mail</b></td>
                <td><b>Telephone</b></td>
                <td><b>Change date</b></td>
                <td><b>Action</b></td>
            </tr>
            ";

            if (!$this->next)  $this->next=0;

            if ($this->rows > $this->maxrowsperpage)  {
                $maxrows = $this->maxrowsperpage + $this->next;
                if ($maxrows > $this->rows) $maxrows = $this->maxrowsperpage;
            } else {
                $maxrows=$this->rows;
            }

            $i=0;

			if ($this->rows) {
                while ($i < $maxrows)  {

                    if (!$result->accounts[$i]) break;
    
                    $customer = $result->accounts[$i];

                    $index = $this->next+$i+1;
    
                    $rr=floor($index/2);
                    $mod=$index-$rr*2;
            
                    if ($mod ==0) {
                    	$bgcolor="lightgrey";
                    } else {
                        $bgcolor="white";
                    }

        			$_url = $this->url.sprintf("&service=%s&action=Delete&reseller_filter=%s&customer_filter=%s",
                    urlencode($this->SOAPEngine->service),
                    urlencode($customer->reseller),
                    urlencode($customer->id)
                    );

                    if ($_REQUEST['action'] == 'Delete' &&
                        $_REQUEST['customer_filter'] == $customer->id) {
                		$_url .= "&confirm=1";
                        $actionText = "<font color=red>Confirm</font>";
                    } else {
                        $actionText = "Delete";
                    }

        			$_customer_url = $this->url.sprintf("&service=%s&reseller_filter=%s&customer_filter=%s",
                    urlencode($this->SOAPEngine->service),
                    urlencode($customer->reseller),
                    urlencode($customer->id)
                    );

                    printf("
                    <tr bgcolor=%s>
                    <td>%s</td>
                    <td><a href=%s>%s.%s</a></td>
                    <td>%s</td>
                    <td>%s %s</td>
                    <td>%s</td>
                    <td>%s</td>
                    <td><a href=mailto:%s>%s</a></td>
                    <td>%s</td>
                    <td>%s</td>
                    <td><a href=%s>%s</a></td>
                    </tr>",
                    $bgcolor,
                    $index,
                    $_customer_url,
                    $customer->id,
                    $customer->reseller,
                    $customer->username,
                    $customer->firstName,
                    $customer->lastName,
                    $customer->organization,
                    $customer->country,
                    $customer->email,
                    $customer->email,
                    $customer->tel,
                    $customer->changeDate,
                    $_url,
                    $actionText
                    );

                    $i++;
                }
			}

            print "</table>";

            $this->showPagination($maxrows);

            return true;
        }
    }

    function showSeachFormCustom() {
        printf (" User<input type=text size=10 name=username_filter value='%s'>",$this->filters['username']);
        printf (" Name<input type=text size=7 name=firstName_filter value='%s'>",$this->filters['firstName']);
        printf ("<input type=text size=7 name=lastName_filter value='%s'>",$this->filters['lastName']);
        printf (" Org<input type=text size=10 name=organization_filter value='%s'>",$this->filters['organization']);
        printf (" Email<input type=text size=10 name=email_filter value='%s'>",$this->filters['email']);

        if ($this->adminonly) {
            if ($this->filters['only_resellers']) $check_only_resellers_filter='checked';
        	printf (" Res<input type=checkbox name=only_resellers_filter value=1 %s>",$check_only_resellers_filter);
        }
    }

    function deleteRecord($confirm) {
        if (!$confirm && !$_REQUEST['confirm']) {
        	print "<p><font color=red>Please press on Delete again to confirm the delete. </font>";
            return true;
        }

        if (!strlen($this->filters['customer'])) {
            print "<p><font color=red>Error: missing customer id. </font>";
            return false;
        }

        $function=array('commit'   => array('name'       => 'deleteAccount',
                                            'parameters' => array(intval($this->filters['customer'])),
                                            'logs'       => array('success' => sprintf('<p>Customer id %s has been deleted',$this->filters['customer'])))
                        );

     	$this->filters=array();

        return $this->SOAPEngine->execute($function);
    }

    function getRecord($id) {

        $this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);
        $result     = $this->SOAPEngine->soapclient->getAccount(intval($id));

        if (PEAR::isError($result)) {
            $error_msg  = $result->getMessage();
            $error_fault= $result->getFault();
            $error_code = $result->getCode();
            printf ("<p><font color=red>Error from %s: %s (%s): %s</font>",$this->SOAPEngine->SOAPurl,$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            return false;
        } else {
        	return $result;
        }
    }

    function showRecord($customer) {

        print "<table border=0 cellpadding=10>";

        printf ("<form method=post name=addform action=%s>",$_SERVER['PHP_SELF']);
        print "

        <tr>
        <td align=left>";
        if ($_REQUEST['action'] != 'Delete' && $_REQUEST['action'] != 'Copy') {
        	print "<input type=submit name=action value=Update>";
        }

        print "</td>
        <td align=right>";

        printf ("<input type=hidden name=customer_filter value=%s>",$customer->id);

      	if ($this->adminonly || $this->reseller == $customer->reseller) {
        	if ($_REQUEST['action'] != 'Delete') {
        		print "<input type=submit name=action value=Copy>";
            }
        	if ($_REQUEST['action'] != 'Copy') {
        		print "<input type=submit name=action value=Delete>";
            }

            if ($_REQUEST['action'] == 'Delete' || $_REQUEST['action'] == 'Copy') {
                print "<input type=hidden name=confirm value=1>";
            }
        }

        print "</td>";

        print "

        </tr>
        <tr>
        <td valign=top>

        <table border=0>
        ";

        printf ("<tr bgcolor=lightgrey>
        <td class=border>Field</td>
        <td class=border>Value</td>
        </tr>");
        foreach (array_keys($this->FieldsReadOnly) as $item) {
            printf ("<tr>
            <td class=border valign=top>%s</td>
            <td class=border>%s</td>
            </tr>",
            ucfirst($item),
            $customer->$item
            );
        }

        foreach (array_keys($this->Fields) as $item) {
            if ($this->Fields[$item]['name']) {
                $item_name=$this->Fields[$item]['name'];
            } else {
            	$item_name=ucfirst($item);
            }

            if ($item=='timezone') {
                printf ("<tr>
                <td class=border valign=top>%s</td>",
                $item_name
                );
                print "<td class=border>";

                $this->showTimezones($customer->$item);

                print "</td>
                </tr>
                ";
            } else if ($item=='state') {
                printf ("<tr>
                <td class=border valign=top>%s</td>",
                $item_name
                );
                print "<td class=border>
                <select name=state_form>";

				$selected_state[$customer->state]='selected';

                foreach ($this->states as $_state) {
                    printf ("<option value='%s' %s>%s",$_state['value'],$selected_state[$_state['value']],$_state['label']);
                }

                print "
                </select>
                </td>
                </tr>
                ";
            } else if ($item=='country') {
                printf ("<tr>
                <td class=border valign=top>%s</td>",
                $item_name
                );
                print "<td class=border>
                <select name=country_form>";

				$selected_country[$customer->country]='selected';

                foreach ($this->countries as $_country) {
                    printf ("<option value='%s' %s>%s",$_country['value'],$selected_country[$_country['value']],$_country['label']);
                }

                print "
                </select>
                </td>
                </tr>
                ";

            } else if ($item=='resellerActive' && ($customer->reseller != $customer->id)) {
            	printf ("<input name=%s_form type=hidden value='%s'>",
                        $item,
                        $customer->$item);

            } else if ($item=='aliasOf') {

		        if ($customer->reseller != $customer->id) {
                	if ($this->adminonly || $this->reseller == $customer->reseller) {
                        printf ("<tr>
                        <td class=border valign=top>%s</td>",
                        $item_name
                        );
                        print "<td class=border>      ";
                        $this->getChildren($customer->reseller);
                        if (count($this->children)> 0) {
                            print "
                            <select name=aliasOf_form>
                            <option>";
                            $selected_aliasOf[$customer->aliasOf]='selected';
                            foreach (array_keys($this->children) as $_child) {
                                printf ("<option value='%s' %s>%s. %s %s",$_child,$selected_aliasOf[$_child],$_child,$this->children[$_child]['firstName'],$this->children[$_child]['lastName']);
                            }
        
                            print "
                            </select>
                            ";
                        } else {
                            printf ("
                            <input name=%s_form size=30 type=text value='%s'>
                            ",
                            $item,
                            $customer->$item
                            );
                        }
                        print "
                        </td>
                        </tr>
                        ";
                    } else {
                        printf ("
                        <tr>
                        <td class=border valign=top>%s</td>
                        <td class=border><input name=%s_form type=hidden value='%s'>%s</td>
                        </tr>
                        ",
                        $item_name,
                        $item,
                        $customer->$item,
                        $customer->$item
                        );
                    }
       	 		} else {
                    printf ("
                    <input name=%s_form type=hidden value='%s'>
                    ",
                    $item,
                    $customer->$item
                    );
                }

            } else {
                if ($this->Fields[$item]['type'] == 'textarea') {
                    printf ("
                    <tr>
                    <td class=border valign=top>%s</td>
                    <td class=border><textarea cols=30 name=%s_form rows=4>%s</textarea></td>
                    </tr>
                    ",
                    $item_name,
                    $item,
                    $customer->$item
                    );
                } elseif ($this->Fields[$item]['type'] == 'boolean') {
                    if ($this->Fields[$item]['adminonly'] && !$this->adminonly) {
                        printf ("
                        <tr>
                        <td class=border valign=top>%s</td>
                        <td class=border><input name=%s_form type=hidden value='%s'>%s</td>
                        </tr>
                        ",
                        $item_name,
                        $item,
                        $customer->$item,
                        $customer->$item
                        );
                    } else {
                    	$_var='select_'.$item;
                        ${$_var}[$customer->$item]='selected';

                        printf ("
                        <tr>
                        <td class=border valign=top>%s</td>
                        <td class=border>
                        <select name=%s_form>
                        <option value='0' %s>False
                        <option value='1' %s>True
                        </select>
                        </td>
                        </tr>
                        ",
                        $item_name,
                        $item,
                        ${$_var}[0],
                        ${$_var}[1]
                        );
                    }
                } else {
                    if ($this->Fields[$item]['adminonly'] && !$this->adminonly) {
                        printf ("
                        <tr>
                        <td class=border valign=top>%s</td>
                        <td class=border><input name=%s_form type=hidden value='%s'>%s</td>
                        </tr>
                        ",
                        $item_name,
                        $item,
                        $customer->$item,
                        $customer->$item
                        );
                    } else {
                        printf ("
                        <tr>
                        <td class=border valign=top>%s</td>
                        <td class=border><input name=%s_form size=30 type=text value='%s'></td>
                        </tr>
                        ",
                        $item_name,
                        $item,
                        $customer->$item
                        );
                    }
                }
            }
        }

        $this->printFiltersToForm();

        $this->printHiddenFormElements();

        //print "</form>";
        print "
        </table>
        ";

        /*
        print "<pre>";
        print_r($customer);
        print "</pre>";
        */

        print "</td>
        <td valign=top>";
        /*
        print "<pre>";
		print_r($this->loginCredentials);
        print "</pre>";
        */

        print "
        <table border=0>";

        if ($this->loginCredentials['loginType'] == 'admin') {
            printf ("<tr bgcolor=lightgrey>
            <td class=border>Category</td>
            <td class=border>Permission</td>
            <td class=border>Property</td>
            <td class=border>Value</td>
            <td class=border>Description</td>
            </tr>");
        } else if ($this->loginCredentials['loginType'] == 'reseller') {
            printf ("<tr bgcolor=lightgrey>
            <td class=border>Permission</td>
            <td class=border>Property</td>
            <td class=border>Value</td>
            </tr>"
            );
        } else {
            printf ("<tr bgcolor=lightgrey>
            <td class=border>Property</td>
            <td class=border>Value</td>
            </tr>"
            );
        }

		foreach ($customer->properties as $_property) {
            if (in_array($_property->name,array_keys($this->allProperties))) {
	        	$this->allProperties[$_property->name]['value']=$_property->value;
            }
        }

        foreach (array_keys($this->allProperties) as $item) {
        	$item_print=preg_replace("/_/"," ",$item);

            if ($this->loginCredentials['loginType'] == 'admin') {
                printf ("<tr>
                <td class=border>%s</td>
                <td class=border>%s</td>
                <td class=border>%s</td>
                <td class=border><input type=text size=45 name='%s_form' value='%s'></td>
                <td class=border>%s</td>
                </tr>",
                $this->allProperties[$item]['category'],
                ucfirst($this->allProperties[$item]['permission']),
                $item_print,
                $item,
                $this->allProperties[$item]['value'],
                $this->allProperties[$item]['name']
                );
            } else if ($this->loginCredentials['loginType'] == 'reseller') {
                // logged in as reseller

                if ($this->allProperties[$item]['permission'] == 'admin') {
                	if ($customer->id == $customer->reseller ) {
                        // reseller cannot modify himself for items with admin permission
                    	if (!$this->allProperties[$item]['invisible']) {
                            printf ("<tr>
                            <td class=border>%s</td>
                            <td class=border>%s</td>
                            <td class=border>%s </td>
                            </tr>",
                            ucfirst($this->allProperties[$item]['permission']),
                            $this->allProperties[$item]['name'],
                            $this->allProperties[$item]['value']
                            );
                        }
                    } else {
                        if ($this->allProperties[$item]['resellerMayManageForChildAccounts']) {
                            // reseller can manage these properties for his customers
                            printf ("<tr>
                            <td class=border>%s</td>
                            <td class=border>%s</td>
                            <td class=border><input type=text size=45 name='%s_form' value='%s'></td>
                            </tr>",
                            'Reseller',
                            $this->allProperties[$item]['name'],
                            $item,
                            $this->allProperties[$item]['value']
                            );
                        } else {
                            if (!$this->allProperties[$item]['invisible']) {
                                // otherwise cannot modify them
                                printf ("<tr>
                                <td class=border>%s</td>
                                <td class=border>%s</td>
                                <td class=border>%s </td>
                                </tr>",
                                ucfirst($this->allProperties[$item]['permission']),
                                $this->allProperties[$item]['name'],
                                $this->allProperties[$item]['value']
                                );
                            }
                        }
                    }
                } else {
                    printf ("<tr>
                    <td class=border>%s</td>
                    <td class=border>%s</td>
                    <td class=border><input type=text size=45 name='%s_form' value='%s'></td>
                    </tr>",
                    ucfirst($this->allProperties[$item]['permission']),
                    $this->allProperties[$item]['name'],
                    $item,
                    $this->allProperties[$item]['value']
                    );
                }
            } else {
                // logged in as customer
                if ($this->allProperties[$item]['permission'] == 'admin' || $this->allProperties[$item]['permission'] == 'reseller' ) {
                    if (!$this->allProperties[$item]['invisible']) {
                        printf ("<tr>
                        <td class=border>%s</td>
                        <td class=border>%s </td>
                        </tr>",
                        $this->allProperties[$item]['name'],
                        $this->allProperties[$item]['value']
                        );
                    }
                } else {
                    printf ("<tr>
                    <td class=border>%s</td>
                    <td class=border><input type=text size=45 name='%s_form' value='%s'></td>
                    </tr>",
                    $this->allProperties[$item]['name'],
                    $item,
                    $this->allProperties[$item]['value']
                    );
                }

            }

        }

        print "
        </table>
        ";

        $this->printFiltersToForm();

        $this->printHiddenFormElements();

        print "</form>";
        print "
        </td>
        </tr>
        </table>
        ";
    }

    function updateRecord () {
        //print "<p>Updating customer ...";

        if (!strlen($this->filters['customer'])) {
            return false;
        }

        if (!$customer=$this->getRecord($this->filters['customer'])) {
            return false;
        }

        $customer->credit      = floatval($customer->credit);
        $customer->balance     = floatval($customer->balance);

        foreach ($customer->properties as $_property) {
            $properties[]=$_property;
        }

        $customer->properties=$properties;

        $customer_old = $customer;

		$properties=array();

        // preserve the properties not managed by this client unchanged:
        foreach ($customer->properties as $_property) {
            if (!in_array($_property->name,array_keys($this->allProperties))) {
                $properties[]=array('name'       => $_property->name,
                                    'value'      => $_property->value,
                                    'category'   => $_property->category,
                                    'permission' => $_property->permission
                                    );
            }
        }

        foreach (array_keys($this->allProperties) as $item) {
            $var_name   = $item.'_form';
            $var_value  = trim($_REQUEST[$var_name]);
            if (strlen($var_value)) {
            	if ($this->allProperties[$item]['permission'] == 'admin' &&
                    	$customer->id != $customer->reseller &&
                    	$this->allProperties[$item]['resellerMayManageForChildAccounts']) {

                    $_permission='reseller';

                } else {
                	$_permission=$this->allProperties[$item]['permission'];
                }

                $properties[]=array('name'       => $item,
                                    'value'      => $var_value,
                                    'category'   => $this->allProperties[$item]['category'],
                                    'permission' => $_permission
                                    );
            }
 
        }
 
        $customer->properties=$properties;

        /*
        print "<pre>";
        print_r($customer->properties);
        print "</pre>";
        */

        foreach (array_keys($this->Fields) as $item) {
            $var_name=$item.'_form';
            //printf ("<br>%s=%s",$var_name,$_REQUEST[$var_name]);
            if ($this->Fields[$item]['type'] == 'integer' || $this->Fields[$item]['type'] == 'boolean') {
                $customer->$item = intval($_REQUEST[$var_name]);
            } else if ($this->Fields[$item]['type'] == 'float') {
                $customer->$item = floatval($_REQUEST[$var_name]);
            } else {
                $customer->$item = trim($_REQUEST[$var_name]);
            }
        }

        $function=array('commit'   => array('name'       => 'updateAccount',
                                            'parameters' => array($customer),
                                            'logs'       => array('success' => sprintf('<p>Customer id %s has been updated',$customer->id))
                                            ),
                        'rollback' => array('name'       => 'updateAccount',
                                            'parameters' => array($customer_old)
                                            )
                        );
     
        if ($this->SOAPEngine->execute($function)) {
            $this->updateAfter($customer);
            return true;
        } else {
            return false;
        }
    }

    function showTimezones($timezone) {
        if (!$fp = fopen("timezones", "r")) {
        	print _("Failed to open timezone file.");
            return false;
        }

        print "<select name=timezone_form>";
        print "\n<option>";
        while ($buffer = fgets($fp,1024)) {
        	$buffer=trim($buffer);
            if ($timezone==$buffer) {
                $selected="selected";
            } else {
                $selected="";
            }
            print "\n<option $selected>";
            print "$buffer";
        }
        fclose($fp);
        print "</select>";
    }

    function getChildren($reseller) {
        return;
        // Filter

        $filter=array('reseller'     => intval($reseller));

        // Range
        $range=array('start' => 0,
                     'count' => 1000
                     );

        // Order
        $orderBy = array('attribute' => 'firstName',
                         'direction' => 'ASC'
                         );

        // Compose query
        $Query=array('filter'     => $filter,
                        'orderBy' => $orderBy,
                        'range'   => $range
                        );

        // Insert credetials
        $this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);

        // Call function
        $result     = $this->SOAPEngine->soapclient->getCustomers($Query);

        if (PEAR::isError($result)) {
            $error_msg  = $result->getMessage();
            $error_fault= $result->getFault();
            $error_code = $result->getCode();
            printf ("<p><font color=red>Error from %s: %s (%s): %s</font>",$this->SOAPEngine->SOAPurl,$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            return false;
        } else {
            $i=0;
            if ($result->total > 100) return;
            while ($i < $result->total) {
            	$customer = $result->accounts[$i];

               	$this->children[$customer->id]=array('firstName'    => $customer->firstName,
                                                     'lastName'     => $customer->lastName,
                                                     'organization' => $customer->organization
                                               );
               	$i++;
            }
        }
    }

    function copyRecord () {
        //print "<p>Copy customer ...";

        if (!strlen($this->filters['customer'])) {
            return false;
        }

        if (!$_REQUEST['confirm']) {
        	print "<p><font color=red>Please press on Copy again to confirm the copy</font>";
            return true;
        }

        if (!$customer=$this->getRecord($this->filters['customer'])) {
            return false;
        }

        $customer->credit      = floatval($customer->credit);
        $customer->balance     = floatval($customer->balance);

		$properties=array();

        foreach ($customer->properties as $_property) {
            $properties[]=$_property;
        }

        $customer->properties=$properties;

        // change username
        $customer_new=$customer;
		unset($customer_new->id);

        if (!$this->adminonly) {
        	unset($customer_new->reseller);
        }

        $j=1;
        while ($j < 9) {

            $customer_new->username=$customer->username.$j;

            $function=array('commit'   => array('name'       => 'addAccount',
                                                'parameters' => array($customer_new),
                                                'logs'       => array('success' => sprintf('<p>Customer id %s has been copied',$customer->id))
                                                ),
                            'rollback' => array('name'       => 'deleteAccount',
                                                'parameters' => array($customer_new)
                                                )
                            );
    
            if ($this->SOAPEngine->execute($function)) {
                // Reset filters to find the copy
                $this->filters=array();
                $this->filters['username']=$customer_new->username;

                return true;
            } else {
                if ($this->SOAPEngine->error_fault->detail->exception->errorcode != "5001") {
                	return false;
                }
            }

            $j++;
        }
    }

    function showAddForm() {

        print "<h3>Add new customer</h3>";
        printf ("<form method=post name=addform action=%s>",$_SERVER['PHP_SELF']);
        print "
        <p>
        <input type=submit name=action value=Add>
        <p>
        <input type=hidden name=showAddForm value=1>
        <table border=0>
        ";

        if ($this->adminonly && $this->filters['reseller']) {
            printf ("<tr><td class=border>Reseller</td>
            <td class=border>%s</td></tr>",$this->filters['reseller']);
        } else {
            printf ("<tr><td class=border>Reseller</td>
            <td class=border>%s</td></tr>",$this->reseller);
        }

        foreach (array_keys($this->addFields) as $item) {
            if ($this->addFields[$item]['name']) {
                $item_name=$this->addFields[$item]['name'];
            } else {
            	$item_name=ucfirst($item);
            }

			$item_form=$item.'_form';

            if ($item=='timezone') {
				$_value=$_REQUEST['timezone_form'];
                if (!$_value) $_value='Europe/Amsterdam';

                printf ("<tr>
                <td class=border valign=top>%s</td>",
                $item_name
                );
                print "<td class=border>";

                $this->showTimezones($_value);

                print "</td>
                </tr>
                ";
            } else if ($item=='state') {
                printf ("<tr>
                <td class=border valign=top>%s</td>",
                $item_name
                );
                print "<td class=border>
                <select name=state_form>";

				$selected_state[$_REQUEST[$item_form]]='selected';

                foreach ($this->states as $_state) {
                    printf ("<option value='%s' %s>%s",$_state['value'],$selected_state[$_state['value']],$_state['label']);
                }

                print "
                </select>
                </td>
                </tr>
                ";
            } else if ($item=='country') {
                printf ("<tr>
                <td class=border valign=top>%s</td>",
                $item_name
                );
                print "<td class=border>
                <select name=country_form>";

                if (!$_REQUEST[$item_form]) {
                	$_value='NL';
                } else {
                	$_value=$_REQUEST[$item_form];
                }

				$selected_country[$_value]='selected';

                foreach ($this->countries as $_country) {
                    printf ("<option value='%s' %s>%s",$_country['value'],$selected_country[$_country['value']],$_country['label']);
                }

                print "
                </select>
                </td>
                </tr>
                ";

            } else {
                if ($this->addFields[$item]['type'] == 'textarea') {
                    printf ("
                    <tr>
                    <td class=border valign=top>%s</td>
                    <td class=border><textarea cols=30 name=%s_form rows=4>%s</textarea></td>
                    </tr>
                    ",
                    $item_name,
                    $item,
                    $_REQUEST[$item_form]
                    );
                } elseif ($this->addFields[$item]['type'] == 'boolean') {
                    $_var='select_'.$item;
                    ${$_var}[$_REQUEST[$item_form]]='selected';

                    printf ("
                    <tr>
                    <td class=border valign=top>%s</td>
                    <td class=border>
                    <select name=%s_form>
                    <option value='0' %s>False
                    <option value='1' %s>True
                    </select>
                    </td>
                    </tr>
                    ",
                    $item_name,
                    $item,
                    ${$_var}[0],
                    ${$_var}[1]
                    );
                } else {
                    printf ("
                    <tr>
                    <td class=border valign=top>%s</td>
                    <td class=border><input name=%s_form size=30 type=text value='%s'></td>
                    </tr>
                    ",
                    $item_name,
                    $item,
                    $_REQUEST[$item_form]
                    );
                }
            }
        }

        $this->printHiddenFormElements();
        print "</form>";
        print "
        </table>
        ";
    }

    function addRecord($dictionary=array()) {

        foreach (array_keys($this->addFields) as $item) {

            if ($dictionary[$item]) {
                $customer[$item] = trim($dictionary[$item]);
            } else {
                $item_form       = $item.'_form';
                $customer[$item] = trim($_REQUEST[$item_form]);
            }
        }

        if (!strlen($customer['username'])) $customer['username'] = trim($customer['firstName']).'.'.trim($customer['lastName']);
		if (!strlen($customer['state']))    $customer['state']    = 'N/A';
        if (!strlen($customer['country']))  $customer['country']  = 'N/A';
        if (!strlen($customer['city']))     $customer['city']     = 'Unknown';
        if (!strlen($customer['address']))  $customer['address']  = 'Unknown';
        if (!strlen($customer['postcode'])) $customer['postcode'] = 'Unknown';
        if (!strlen($customer['tel']))      $customer['tel']      = '+19999999999';
        if (!strlen($customer['timezone'])) $customer['timezone'] = 'Europe/Amsterdam';

        $customer['username'] = strtolower(preg_replace ("/\s+/",".",trim($customer['username'])));

		if ($customer['state'] != 'N/A') {
        	$_state=$customer['state'].' ';
        } else {
            $_state='';
        }

		$customer['billingEmail']   = $customer['email'];
        $customer['billingAddress'] = $customer['address']."\n".
                                      $customer['postcode']." ".$customer['city']."\n".
                                      $_state.$customer['country'];

        if (!strlen($customer['password'])) $customer['password'] = $this->RandomPassword(6);

        $customer->properties=array();

        $function=array('commit'   => array('name'       => 'addAccount',
                                            'parameters' => array($customer),
                                            'logs'       => array('success' => sprintf('<p>Customer %s %s has been added',$customer['firstName'],$customer['lastName']))
                                            )
                       );

        if ($this->SOAPEngine->execute($function)) {
            if ($dictionary['notify']) $this->notify($customer);
     		$this->showAddForm=false;
            return true;
        } else {
            return false;
        }
    }

    function notify($customer) {
    	if ($_SERVER['HTTPS']=="on") {
        	$protocolURL="https://";
        } else {
        	$protocolURL="http://";
        }

        $url=sprintf("%s%s",$protocolURL,$_SERVER['HTTP_HOST']);

    	$body="\n".
               sprintf("Your login account information at %s\n\n",$url).
               sprintf("Username: %s\n",$customer['username']).
               sprintf("Password: %s\n",$customer['password']).
               "\n".
               "Do not reply to this message.\n";

		$from    = sprintf("From: %s",$this->SOAPEngine->supportEmail);
        $subject = sprintf("Your login account at %s",$url);

        mail($customer['email'], $subject, $body, $from);
    }

    function getRecordKeys() {
        // Filter
        $filter=array('username'     => $this->filters['username'],
                      'firstName'    => $this->filters['firstName'],
                      'lastName'     => $this->filters['lastName'],
                      'organization' => $this->filters['organization'],
                      'tel'          => $this->filters['tel'],
                      'email'        => $this->filters['email'],
                      'web'          => $this->filters['web'],
                      'city'         => $this->filters['city'],
                      'country'      => $this->filters['country'],
                      'only_resellers' => $this->filters['only_resellers'],
                      'customer'     => intval($this->filters['customer']),
                      'reseller'     => intval($this->filters['reseller'])
                      );

        //print_r($filter);

        // Range
        $range=array('start' => 0,
                     'count' => 1000
                     );

        // Order
        $orderBy = array('attribute' => 'customer',
                         'direction' => 'ASC'
                         );

        // Compose query
        $Query=array('filter'     => $filter,
                        'orderBy' => $orderBy,
                        'range'   => $range
                        );

        // Insert credetials
        $this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);

        // Call function
        if ($this->adminonly && $this->filters['only_resellers']) {
        	$result     = $this->SOAPEngine->soapclient->getResellers($Query);
        } else {
        	$result     = $this->SOAPEngine->soapclient->getCustomers($Query);
        }

        if (PEAR::isError($result)) {
            $error_msg  = $result->getMessage();
            $error_fault= $result->getFault();
            $error_code = $result->getCode();
            printf ("<p><font color=red>Error from %s: %s (%s): %s</font>",$this->SOAPEngine->SOAPurl,$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            return false;
        } else {
			foreach ($result->accounts as $customer) {
                $this->selectionKeys[]=$customer->id;
            }
        }
    }

	function getProperty($customer,$name) {
        foreach ($customer->properties as $_property) {
            if ($_property['name'] == $name && strlen($_property['value'])) {
                return $_property['value'];
            }
        }
        return false;
    }
}

class Presence {
    function Presence(&$SOAPEngine) {
    	$this->SOAPEngine         = &$SOAPEngine;
    }

    function publishPresence ($soapEngine,$SIPaccount=array(),$note='None',$activity='idle') {

        if (!in_array($soapEngine,array_keys($this->SOAPEngine->soapEngines))) {
            print "Error: soapEngine '$soapEngine' does not exist.\n";
            return false;
        }

        if (!$SIPaccount['username'] || !$SIPaccount['domain'] || !$SIPaccount['password'] ) {
            print "Error: SIPAccount not defined.\n";
            return false;
        }

		$this->SOAPurl       = $this->SOAPEngine->soapEngines[$soapEngine]['url'];
        $this->PresencePort  = new WebService_SoapSIMPLEProxy_PresencePort($this->SOAPurl);

        $this->PresencePort->setOpt('curl', CURLOPT_SSL_VERIFYPEER, 0);
        $this->PresencePort->setOpt('curl', CURLOPT_SSL_VERIFYHOST, 0);
        $this->PresencePort->setOpt('curl', CURLOPT_TIMEOUT, 1);

        $allowed_activities=array('open',
                                  'idle',
                                  'busy',
                                  'available'
                                 );
    
        if (in_array($activity,$allowed_activities)) {
            $presentity['activity'] = $activity;
        } else {
            $presentity['activity'] = 'open';
        }
    
        $presentity['note']     = $note;

        $result = $this->PresencePort->setPresenceInformation(array("username" =>$SIPaccount['username'],"domain"   =>$SIPaccount['domain']),$SIPaccount['password'], $presentity);
    
        if (PEAR::isError($result)) {
            $error_msg  = $result->getMessage();
            $error_fault= $result->getFault();
            $error_code = $result->getCode();
            printf ("<p><font color=red>Error: %s (%s): %s</font>",$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            return false;
        }
    
        return true;
    }

    function getPresenceInformation ($soapEngine,$SIPaccount) {

        if (!in_array($soapEngine,array_keys($this->SOAPEngine->soapEngines))) {
            print "Error: soapEngine '$soapEngine' does not exist.\n";
            return false;
        }

        if (!$SIPaccount['username'] || !$SIPaccount['domain'] || !$SIPaccount['password'] ) {
            print "Error: SIPAccount not defined.\n";
            return false;
        }

		$this->SOAPurl       = $this->SOAPEngine->soapEngines[$soapEngine]['url'];
        $this->PresencePort  = new WebService_SoapSIMPLEProxy_PresencePort($this->SOAPurl);

        $this->PresencePort->setOpt('curl', CURLOPT_SSL_VERIFYPEER, 0);
        $this->PresencePort->setOpt('curl', CURLOPT_SSL_VERIFYHOST, 0);
        $this->PresencePort->setOpt('curl', CURLOPT_TIMEOUT, 1);

        $result = $this->PresencePort->getPresenceInformation(array("username" =>$SIPaccount['username'],"domain"   =>$SIPaccount['domain']),$SIPaccount['password']);
    
        if (PEAR::isError($result)) {
            $error_msg  = $result->getMessage();
            $error_fault= $result->getFault();
            $error_code = $result->getCode();
            printf ("<p><font color=red>Error: %s (%s): %s</font>",$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            return false;
        } else {
            return $result;
        }
    }
}

class recordGenerator extends SOAPEngine {

	//this class generates in bulk enum numbers and sip accounts

	var $template     = array();
    var $allowedPorts = array();
	var $maxRecords   = 1000;

    function recordGenerator($generatorId,$recordGenerators,$soapEngines,$loginCredentials=array()) {
    	$this->recordGenerators = $recordGenerators;
        $this->generatorId      = $generatorId;
		$this->loginCredentials = $loginCredentials;

        dprint_r($this->loginCredentials);
		$keys = array_keys($this->recordGenerators);
		if (!$generatorId) $generatorId=$keys[0];

		if (!in_array($generatorId,array_keys($this->recordGenerators))) {
            return false;
        }

        if (strlen($this->loginCredentials['soapFilter'])) {
            $this->soapEngines = $this->getSoapEngineAllowed($soapEngines,$this->loginCredentials['soapFilter']);
        } else {
        	$this->soapEngines = $soapEngines;
        }

        if (in_array($this->recordGenerators[$generatorId]['sipEngine'],array_keys($this->soapEngines))) {
            // sip zones
            if (count($this->allowedPorts[$this->recordGenerators[$generatorId]['sipEngine']]) > 1 && !in_array('sip_accounts',$this->allowedPorts[$this->recordGenerators[$generatorId]['sipEngine']])) {
                // sip port not available
                dprint("sip port not avaliable");
            } else {
                $sipEngine           = 'sip_accounts@'.$this->recordGenerators[$generatorId]['sipEngine'];
                $this->SipSOAPEngine = new SOAPEngine($sipEngine,$soapEngines,$loginCredentials);
                $_sip_class          = $this->SipSOAPEngine->recordsClass;
                $this->sipRecords    = new $_sip_class(&$this->SipSOAPEngine);
                $this->sipRecords->getAllowedDomains();
            }
        } else {
            printf ("<font color=red>Error: soapengineId %s does not exist</font>",$this->recordGenerators[$generatorId]['sipEngine']);
        }

        if (in_array($this->recordGenerators[$generatorId]['enumEngine'],array_keys($this->soapEngines))) {
            if (count($this->allowedPorts[$this->recordGenerators[$generatorId]['enumEngine']]) > 1 && !in_array('enum_numbers',$this->allowedPorts[$this->recordGenerators[$generatorId]['enumEngine']])) {
                dprint("enum port not avaliable");
                // enum port not available
            } else {
                // enum mappings
                $enumEngine           = 'enum_numbers@'.$this->recordGenerators[$generatorId]['enumEngine'];
                $this->EnumSOAPEngine = new SOAPEngine($enumEngine,$soapEngines,$loginCredentials);
                $_enum_class          = $this->EnumSOAPEngine->recordsClass;
                $this->enumRecords    = new $_enum_class(&$this->EnumSOAPEngine);
                $this->enumRecords->getAllowedDomains();
            }
        } else {
            printf ("<font color=red>Error: soapengineId %s does not exist</font>",$this->recordGenerators[$generatorId]['enumEngine']);
        }

		if ($_REQUEST['reseller_filter']) $this->template['reseller']=intval($_REQUEST['reseller_filter']);
        if ($_REQUEST['customer_filter']) $this->template['customer']=intval($_REQUEST['customer_filter']);
    }

    function generateRecords() {

        print "<p>";
        if (!$this->checkGenerateRequest()) {
        	return false;
        }
        print "<p>Generating records
        <ol>";

        $i=0;

        while ($i < $this->template['nr_records']) {

            $number   = sprintf("%.0f", $this->start_padded + $i);
            $username = substr($number,$this->template['strip_digits']);
			$mapto    = 'sip:'.$username.'@'.$this->template['domain'];

            print "<li>";
            printf ('Generating number +%s with mapping %s ',$number,$mapto);
            flush();

            $enumMapping = array('tld'      => $this->template['tld'],
                                 'number'   => $number,
                                 'type'     => 'sip',
                                 'mapto'    => $mapto,
                                 'info'     => $this->template['info'],
                                 'owner'    => $this->template['owner'],
                                 'customer' => $this->template['customer'],
                                 'reseller' => $this->template['reseller']
                                );

            if ($this->template['create_sip']) {
            	if (preg_match("/^0/",$username)) {
            		printf ('SIP accounts starting with 0 are not generated (%s@%s)',$username,$this->template['domain']);
                	continue;
            	}

                $groups=array();
                if ($this->template['pstn']) $groups[]='free-pstn';
            	printf ('and sip account %s@%s ',$username,$this->template['domain']);
    
                $sipAccount = array('account'  => $username.'@'.$this->template['domain'],
                                    'quota'    => $this->template['quota'],
                                    'prepaid'  => $this->template['prepaid'],
                                    'password' => $this->template['password'],
                                    'groups'   => $groups,
                                    'owner'    => $this->template['owner'],
                                    'customer' => $this->template['customer'],
                                    'reseller' => $this->template['reseller']
                                    );
            } else {
                unset($sipAccount);
            }

            if (is_array($enumMapping)) $this->enumRecords->addRecord($enumMapping);
            if (is_array($sipAccount))  $this->sipRecords->addRecord($sipAccount);

            $i++;
        }

        print "</ol>";
        return true;
	}

    function checkGenerateRequest() {
        // check number of records
        $this->template['create_sip']=trim($_REQUEST['create_sip']);

        $this->template['info']=trim($_REQUEST['info']);

        $nr_records=trim($_REQUEST['nr_records']);

        if (!is_numeric($nr_records) || $nr_records < 1 || $nr_records > $this->maxRecords) {
            print "<font color=red>Error: number of records must be a number between 1 and $this->maxRecords</font>";
            return false;
        }

        $this->template['nr_records'] = $nr_records;

        // length of generated record
        $len=trim($_REQUEST['len']);
        if (!is_numeric($len) || $len < 4 || $len > 15) {
            print "<font color=red>Error: number length must be a number between 4 and 15</font>";
            return false;
        }

        $this->template['len'] = $len;

        // 
        $strip_digits=trim($_REQUEST['strip_digits']);
        if (!is_numeric($strip_digits) || $strip_digits <0 || $len < $strip_digits + 3) {
            print "<font color=red>Error: strip digits must be smaller then $len</font>";
            return false;
        }

        $this->template['strip_digits'] = $strip_digits;

        // sip domain
        $domain=trim($_REQUEST['domain']);
        if (!strlen($domain)) {
            print "<font color=red>Error: SIP domain missing</font>";
            return false;
        }
        $this->template['domain'] = $domain;

        $nr_start=trim($_REQUEST['nr_start']);
        if (strlen($nr_start) && !is_numeric($nr_start)) {
            print "<font color=red>Error: Prefix must be numeric</font>";
            return false;
        }
        $this->template['nr_start'] = $nr_start;

        // check ENUM TLD
        list($prefix,$tld)=explode('@',trim($_REQUEST['range']));

        $this->template['prefix']   = intval($prefix);
        $this->template['tld']      = $tld;
        $this->template['quota']    = intval($_REQUEST['quota']);
        $this->template['owner']    = intval($_REQUEST['owner']);
        $this->template['pstn']     = intval($_REQUEST['pstn']);
        $this->template['prepaid']  = intval($_REQUEST['prepaid']);
        $this->template['password'] = trim($_REQUEST['password']);

        ///////////////////////////////////////
        // logical checks
        if (strlen($this->template['nr_start'])) {
            $start = $this->template['nr_start'];
        } else {
            $start = 0;
        }

		$digits             = $this->template['len']-strlen($this->template['prefix']);
        $this->start_padded = $this->template['prefix'].str_pad($start,$digits,'0');
        $this->top          = sprintf("%.0f", $this->start_padded + pow(10,$digits-strlen($this->template['nr_start'])));
        $maxNumbers         = pow(10,$digits-strlen($this->template['nr_start']));

        if ($maxNumbers < $this->template['nr_records']) {
            printf ("<font color=red>Error: Insufficient numbers in range, requested = %d, available = %d</font>",$this->template['nr_records'],$maxNumbers);
            return false;
        }

        return true;
    }

    function showGeneratorForm() {
    	if (!count($this->enumRecords->ranges)) {
            print "<font color=red>Error: No ENUM ranges available</font>";
        	return false;
        }

        print "
        <form method=post target=_new>
        <table cellspacing=1 cellpadding=1 bgcolor=black>
        <tr>
        <td>
        <table cellspacing=3 cellpadding=4 width=100% bgcolor=#444444>
        <tr>
        <td>
        <font color=white>
        <b>";
        print _("Record generator");
        print "</b>
        </font>
        </td>
        </tr>
        </table>
        </tr>
        <tr>
        <td colspan=100%>

        <table cellpadding=2 bgcolor=white width=100%>
        <tr>
        <td colspan=3>
        </td>
        </tr>
        ";
    
        print "
        <tr>
        <td>";
        print _("ENUM range");
        print "
        <td align=right>";

        if (is_array($this->enumRecords->ranges)) {
            print "<select name=range>";
            $selected_range[$_REQUEST['range']]='selected';
            foreach ($this->enumRecords->ranges as $_range) {
                $rangeId=$_range['prefix'].'@'.$_range['tld'];
                printf ("<option value=%s %s>+%s under %s",$rangeId,$selected_range[$rangeId],$_range['prefix'],$_range['tld']);
            }
            print "</select>";
        }

        print "<td>
        </tr>
        ";

        print "
        <tr>
        <td colspan=2>
        ";
        print "<b>";
        print _("ENUM mapping template");
        print "</b>";
        print "</td>
        </tr>
        ";

        print "
        <tr>
        <td>";
        print _("Add prefix:");
        printf ("
        <td align=right>
        <input type=text name=nr_start size=10 maxsize=15 value='%s'>
        </td>
        </tr>
        ",$_REQUEST['nr_start']);

        print "
        <tr>
        <td>";
        print _("Number length:");
        printf ("
        <td align=right>
        <input type=text name=len size=10 maxsize=15 value='%s'>
        <tr>
        <td>
        ",$_REQUEST['len']);
    
        print _("SIP domain:");
        print "
        <td align=right>
        ";

        if (count($this->sipRecords->allowedDomains) > 0) {
            print "
            <select name=domain>
            ";
            $selected_range[$_REQUEST['domain']]='selected';

            foreach ($this->sipRecords->allowedDomains as $domain) {
                printf ("<option value='%s' %s>%s",$domain,$selected_range[$domain],$domain);
            }
            print "</select>  ";
        } else {
            print "<input type=text size=15 name=domain>";
        }

        print "
        </td>
        <td>";
        print "
        </td>
        </tr>
        ";

        if ($_REQUEST['strip_digits']) {
            $strip_digits=$_REQUEST['strip_digits'];
        } else {
            $strip_digits=0;
        }

        print "
        <tr>
        <td>";
        print _("Strip first digits:");
        printf ("
        <td align=right>
        <input type=text size=10 name=strip_digits value='%s'>
        </td>
        </tr>
        ",$strip_digits);
        print "
        <tr>
        <td>";
        print _("Owner:");
        printf ("
        <td align=right><input type=text size=10 name=owner value='%s'>
        <td>",$_REQUEST['owner']);
        print "
        </td>
        </tr>";

        print "
        <tr>
        <td>";
        print _("Info:");
        printf ("
        <td align=right><input type=text size=10 name=info value='%s'>
        <td>",$_REQUEST['info']);
        print "
        </td>
        </tr>";

        if (count($this->sipRecords->allowedDomains) > 0) {
            print "
            <tr>
            <td colspan=3><hr noshade size=1>
            </td>
            </tr>
            ";
    
            print "
            <tr>
            <td colspan=2>
            ";
            print "<b>";
            print _("SIP account template");
            print "</b>";
            print "</td>
            </tr>
            ";

            print "
            <tr>
            <td>";
            print _("Create SIP records");
            if ($_REQUEST['create_sip']) {
            	$checked_create_sip='checked';
            } else {
            	$checked_create_sip='';
            }
            printf ("
            <td align=right><input type=checkbox name=create_sip value=1 %s>
            </td>
            </tr>
            ",$checked_create_sip);

            if ($_REQUEST['pstn']) {
            	$checked_pstn='checked';
            } else {
            	$checked_pstn='';
            }

            print "
            <tr>
            <td>";
            print _("PSTN");
            printf ("
            <td align=right><input type=checkbox name=pstn value=1 %s>
            </td>
            </tr>
            ",$checked_pstn);

            if ($_REQUEST['prepaid']) {
            	$checked_prepaid='checked';
            } else {
            	$checked_prepaid='';
            }

            print "
            <tr>
            <td>";
            print _("Prepaid");
            printf ("
            <td align=right><input type=checkbox name=prepaid value=1 %s>
            </td>
            </tr>
            ",$checked_prepaid);

            print "
            <tr>
            <td>";
            print _("Prefix Caller-ID");
            printf ("
            <td align=right><input type=text size=10 name=rpid_prefix value='%s'>
            </td>
            </tr>
            ",$_REQUEST['rpid_prefix']);

            print "
            <tr>
            <td>";
            print _("Quota");
            printf ("
            <td align=right><input type=text size=10 name=quota value='%s'>
            </td>
            </tr>
            ",$_REQUEST['quota']);

            print "
            <tr>
            <td>";
            print _("Password");
            printf ("
            <td align=right><input type=text size=10 name=password value='%s'>
            </td>
            </tr>
            ",$_REQUEST['password']);

        }

        if ($_REQUEST['nr_records']) {
            $nr_records=$_REQUEST['nr_records'];
        } else {
            $nr_records=1;
        }

        print "
        <tr>
        <td colspan=3>
        <hr noshade size=1 with=100%>
        </td>
        </tr>
        ";
        print "
        <tr>
        <td>
        ";

        print "<input type=hidden value=Generate>";
        print "<input type=submit value=Generate>";
        printf ("<td align=right>
        Number of records:<input type=text size=10 name=nr_records value='%s'>
        ",$nr_records);
        print "<td>";
        print "
        </tr>
        ";

        print "
        <tr>
        <td colspan=2>
        <br>
        <input type=hidden name=action value=Generate>
        <p>";
        print _("Existing records will not be overwritten. ");
        print "</td>
        </tr>
        ";

        $this->printHiddenFormElements();

        print "
        </table>
        </form>
        </td>
        </tr>
        </table>
        ";
    }

    function printHiddenFormElements () {
        printf("<input type=hidden name=generatorId value='%s'>",$this->generatorId);

        if ($this->adminonly) {
        	printf("<input type=hidden name=adminonly value='%s'>",$this->adminonly);
        }

        if ($this->template['customer']) {
        	printf("<input type=hidden name=customer_filter value='%s'>",$this->template['customer']);
        }

        if ($this->template['reseller']) {
        	printf("<input type=hidden name=reseller_filter value='%s'>",$this->template['reseller']);
        }

        foreach (array_keys($this->EnumSOAPEngine->extraFormElements) as $element) {
        	if (!strlen($this->EnumSOAPEngine->extraFormElements[$element])) continue;
            printf ("<input type=hidden name=%s value='%s'>\n",$element,$this->EnumSOAPEngine->extraFormElements[$element]);
        }
    }

    function getSoapEngineAllowed($soapEngines,$filter) {

        // filter syntax:
        // $filter="engine1:port1,port2,port3 engine2 engine3";
        // where engine is a connection from ngnpro_engines.inc and
        // port is valid port from that engine like sip_accounts or enum_numbers

    	$_filter_els=explode(" ",trim($filter));
		foreach(array_keys($soapEngines) as $_engine) {
        	foreach ($_filter_els as $_filter) {
                unset($_allowed_engine);
                $_allowed_ports=array();

                list($_allowed_engine,$_allowed_ports_els) = explode(":",$_filter);

                if ($_allowed_ports_els) {
                	$_allowed_ports = explode(",",$_allowed_ports_els);
                }

            	if ($_engine == $_allowed_engine) {
                	$soapEngines_checked[$_engine]=$soapEngines[$_engine];
                    $this->allowedPorts[$_engine]=$_allowed_ports;
                	continue;
                }
        	}
    	}

        return $soapEngines_checked;
    }

}

class Actions {
    // this class perfom actions on an array of entities returned by selections

    var $actions = array();
    var $version = 1;

    function Actions(&$SOAPEngine) {
		$this->SOAPEngine = $SOAPEngine;
        $this->version    = $this->SOAPEngine->version;
        $this->adminonly  = $this->SOAPEngine->adminonly;
    }

    function performActions($selectionKeys,$action,$sub_action_parameter) {
    }

    function showActionsForm($filters,$sorting,$hideParameter=false) {
        if (!count($this->actions)) return;

        print "
        <p>
        <table border=0 class=border width=100%>
        <tr>
        ";

        printf ("<form method=post name=actionform action=%s>",$_SERVER['PHP_SELF']);
        print "
        <td align=left>
        ";

        print "
        <input type=submit value='Perform this action on the selection:'>
        <input type=hidden name=action value=PerformActions>
        ";
        if ($this->adminonly) {
            print "
            <input type=hidden name=adminonly value=$this->adminonly>
            ";
        }


        print "<select name=sub_action>";
        $j=0;
        foreach (array_keys($this->actions) as $_action) {
            $j++;
            printf ("<option value='%s'>%d. %s",$_action,$j,$this->actions[$_action]);
        }
        print "</select>";


		if (!$hideParameter) {
        	print "
        	<input type=text size=15 name=sub_action_parameter>
        	";
        }
        print "
        </td>
        <td align=right>
        ";
        print "
	    </td>
        ";

        foreach (array_keys($filters) as $_filter) {
            printf ("<input type=hidden name='%s_filter' value='%s'>\n", $_filter,$filters[$_filter]);
        }

        foreach (array_keys($sorting) as $_sorting) {
            printf ("<input type=hidden name='%s' value='%s'>\n", $_sorting,$sorting[$_sorting]);
        }

        printf("<input type=hidden name=service value='%s'>",$this->SOAPEngine->service);

        foreach (array_keys($this->SOAPEngine->extraFormElements) as $element) {
        	if (!strlen($this->SOAPEngine->extraFormElements[$element])) continue;
            printf ("<input type=hidden name=%s value='%s'>\n",$element,$this->SOAPEngine->extraFormElements[$element]);
        }
            print "
            </form>
        </tr>
        </table>
        ";

    }
}

class SIPAccountsActions extends Actions {
    var $actions=array('block'          => 'Block SIP accounts',
                       'deblock'        => 'Deblock SIP accounts',
                       'enable_pstn'    => 'Enable access to PSTN for the SIP accounts',
                       'disable_pstn'   => 'Disable access to PSTN for the SIP accounts',
                       'deblock_quota'  => 'Deblock SIP accounts blocked by quota',
                       'prepaid'        => 'Make SIP accounts prepaid',
                       'postpaid'       => 'Make SIP accounts postpaid',
                       'delete'         => 'Delete SIP accounts',
                       'setquota'       => 'Set quota of SIP account to:',
                       'rpidasusername' => 'Set PSTN caller ID as the username',
                       'prefixtorpid'   => 'Add to PSTN caller ID this prefix:',
                       'rmdsfromrpid'   => 'Remove from PSTN caller ID digits:',
                       'addtogroup'     => 'Add SIP accounts to group:',
                       'removefromgroup'=> 'Remove SIP accounts from group:',
                       'addbalance'     => 'Add to prepaid balance value:',
                       'changeowner'    => 'Change owner to:'
                       );

    function SIPAccountsActions(&$SOAPEngine) {
        $this->Actions(&$SOAPEngine);
        if ($this->version > 1) {
            $this->actions['changecustomer']='Change customer to:';
        }
    }

    function performActions($selectionKeys,$action,$sub_action_parameter) {
        if (!in_array($action,array_keys($this->actions))) {
            print "<font color=red>Error: Invalid action $action</font>";
        	return false;
        }

        print "<ol>";
        foreach($selectionKeys as $key) {
            print "<li>";

            flush();
            //printf ("Performing action=%s on key=%s",$action,$key);

        	$account=array('username' => $key['username'],
                           'domain'   => $key['domain']
        			      );

        	if ($action=='block') {

                $function=array('commit'   => array('name'       => 'addToGroup',
                                                    'parameters' => array($account,'block'),
                                                    'logs'       => array('success' => sprintf('SIP account %s@%s has been blocked',$key['username'],$key['domain'])
                                                                          )
                                                   )
        
                                );

                $this->SOAPEngine->execute($function);

        	} else if ($action=='deblock') {

                $function=array('commit'   => array('name'       => 'removeFromGroup',
                                                    'parameters' => array($account,'block'),
                                                    'logs'       => array('success' => sprintf('SIP account %s@%s has been de-blocked',$key['username'],$key['domain'])
                                                                          )
                                                   )
        
                                );

                $this->SOAPEngine->execute($function);

        	} else if ($action=='removefromgroup') {
            	if (!strlen($sub_action_parameter)) {
            		printf ("<font color=red>Error: you must enter a group name</font>");
                    break;
                }

                $function=array('commit'   => array('name'       => 'removeFromGroup',
                                                    'parameters' => array($account,$sub_action_parameter),
                                                    'logs'       => array('success' => sprintf('SIP account %s@%s has been removed from group',$key['username'],$key['domain'],$sub_action_parameter)
                                                                          )
                                                   )
        
                                );

                $this->SOAPEngine->execute($function);

        	} else if ($action=='addtogroup') {
            	if (!strlen($sub_action_parameter)) {
            		printf ("<font color=red>Error: you must enter a group name</font>");
                    break;
                }

                $function=array('commit'   => array('name'       => 'addToGroup',
                                                    'parameters' => array($account,$sub_action_parameter),
                                                    'logs'       => array('success' => sprintf('SIP account %s@%s is now in group %s',$key['username'],$key['domain'],$sub_action_parameter)
                                                                          )
                                                   )
        
                                );

                $this->SOAPEngine->execute($function);

        	} else if ($action=='deblock_quota') {

                $function=array('commit'   => array('name'       => 'removeFromGroup',
                                                    'parameters' => array($account,'quota'),
                                                    'logs'       => array('success' => sprintf('SIP account %s@%s has been deblocked from quota',$key['username'],$key['domain'])
                                                                          )
                                                   )
        
                                );

                $this->SOAPEngine->execute($function);

        	} else if ($action=='disable_pstn') {

                $function=array('commit'   => array('name'       => 'removeFromGroup',
                                                    'parameters' => array($account,'free-pstn'),
                                                    'logs'       => array('success' => sprintf('SIP account %s@%s has no access to the PSTN',$key['username'],$key['domain'])
                                                                          )
                                                   )
        
                                );

                $this->SOAPEngine->execute($function);

        	} else if ($action=='enable_pstn') {

                $function=array('commit'   => array('name'       => 'addToGroup',
                                                    'parameters' => array($account,'free-pstn'),
                                                    'logs'       => array('success' => sprintf('SIP account %s@%s has access to the PSTN',$key['username'],$key['domain'])
                                                                          )
                                                   )
        
                                );

                $this->SOAPEngine->execute($function);

        	} else if ($action=='delete') {

                $function=array('commit'   => array('name'       => 'deleteAccount',
                                                    'parameters' => array($account),
                                                    'logs'       => array('success' => sprintf('SIP account %s@%s has been deleted',$key['username'],$key['domain'])
                                                                          )
                                                   )
        
                                );

                $this->SOAPEngine->execute($function);

        	} else if ($action=='prepaid') {
        		$this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);
		        $result     = $this->SOAPEngine->soapclient->getAccount($account);

        		if (PEAR::isError($result)) {
            		$error_msg  = $result->getMessage();
            		$error_fault= $result->getFault();
            		$error_code = $result->getCode();
            		printf ("<font color=red>Error: %s (%s): %s</font>",$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            		break;
        		} else {
                    //print_r($result);
                    // Sanitize data types due to PHP bugs

                    if (!is_array($result->properties))   $result->properties=array();
        			if (!is_array($result->groups)) 	  $result->groups=array();
                    $result->quota         = intval($result->quota);
                    $result->answerTimeout = intval($result->answerTimeout);

                    $result->prepaid=1;

                    $function=array('commit'   => array('name'       => 'updateAccount',
                                                        'parameters' => array($result),
                                                        'logs'       => array('success' => sprintf('SIP account %s@%s is now prepaid',$key['username'],$key['domain'])
                                                                              )
                                                       )
            
                                    );
                	$this->SOAPEngine->execute($function);
        		}
        	} else if ($action=='postpaid') {
        		$this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);
		        $result     = $this->SOAPEngine->soapclient->getAccount($account);

        		if (PEAR::isError($result)) {
            		$error_msg  = $result->getMessage();
            		$error_fault= $result->getFault();
            		$error_code = $result->getCode();
            		printf ("<font color=red>Error: %s (%s): %s</font>",$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            		break;
        		} else {

                    if (!is_array($result->properties))   $result->properties=array();
        			if (!is_array($result->groups)) 	  $result->groups=array();
                    $result->quota         = intval($result->quota);
                    $result->answerTimeout = intval($result->answerTimeout);

                    $result->prepaid=0;

                    $function=array('commit'   => array('name'       => 'updateAccount',
                                                        'parameters' => array($result),
                                                        'logs'       => array('success' => sprintf('SIP account %s@%s is now postpaid',$key['username'],$key['domain'])
                                                                              )
                                                       )
            
                                    );
                	$this->SOAPEngine->execute($function);

        		}
        	} else if ($action=='setquota') {
        		$this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);
		        $result     = $this->SOAPEngine->soapclient->getAccount($account);

        		if (PEAR::isError($result)) {
            		$error_msg  = $result->getMessage();
            		$error_fault= $result->getFault();
            		$error_code = $result->getCode();
            		printf ("<font color=red>Error: %s (%s): %s</font>",$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            		break;
        		} else {
                    //print_r($result);
                    // Sanitize data types due to PHP bugs

                    if (!is_array($result->properties))   $result->properties=array();
        			if (!is_array($result->groups)) 	  $result->groups=array();
                    $result->quota         = intval($sub_action_parameter);
                    $result->answerTimeout = intval($result->answerTimeout);

                    $function=array('commit'   => array('name'       => 'updateAccount',
                                                        'parameters' => array($result),
                                                        'logs'       => array('success' => sprintf('SIP account %s@%s has quota set to %s',$key['username'],$key['domain'],$sub_action_parameter)
                                                                              )
                                                       )
            
                                    );
                	$this->SOAPEngine->execute($function);

        		}
                
        	} else if ($action=='rmdsfromrpid') {
        		$this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);
		        $result     = $this->SOAPEngine->soapclient->getAccount($account);

        		if (PEAR::isError($result)) {
            		$error_msg  = $result->getMessage();
            		$error_fault= $result->getFault();
            		$error_code = $result->getCode();
            		printf ("<font color=red>Error: %s (%s): %s</font>",$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            		break;
        		} else {
                    //print_r($result);
                    // Sanitize data types due to PHP bugs

                    if (!is_array($result->properties)) $result->properties=array();
        			if (!is_array($result->groups)) 	$result->groups=array();
                    if (is_numeric($sub_action_parameter) && strlen($result->rpid) > $sub_action_parameter) {
                        printf("%s %s",$result->rpid,$sub_action_parameter);
                    	$result->rpid=substr($result->rpid,$sub_action_parameter);
                        printf("%s %s",$result->rpid,$sub_action_parameter);
                    } else {
            			printf ("<font color=red>Error: '%s' must be numeric and less than caller if length</font>",$sub_action_parameter);
                        continue;
                    }

                    $result->quota         = intval($result->quota);
                    $result->answerTimeout = intval($result->answerTimeout);

                    $function=array('commit'   => array('name'       => 'updateAccount',
                                                        'parameters' => array($result),
                                                        'logs'       => array('success' => sprintf('SIP account %s@%s has PSTN caller ID set to %s',$key['username'],$key['domain'],$result->rpid)
                                                                              )
                                                       )
            
                                    );
                	$this->SOAPEngine->execute($function);

        		}
        	} else if ($action=='rpidasusername') {
        		$this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);
		        $result     = $this->SOAPEngine->soapclient->getAccount($account);

        		if (PEAR::isError($result)) {
            		$error_msg  = $result->getMessage();
            		$error_fault= $result->getFault();
            		$error_code = $result->getCode();
            		printf ("<font color=red>Error: %s (%s): %s</font>",$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            		break;
        		} else {
                    //print_r($result);
                    // Sanitize data types due to PHP bugs

                    if (!is_array($result->properties)) $result->properties=array();
        			if (!is_array($result->groups)) 	$result->groups=array();
                    if (is_numeric($key['username']))   $result->rpid=$key['username'];

                    $result->quota         = intval($result->quota);
                    $result->answerTimeout = intval($result->answerTimeout);

                    $function=array('commit'   => array('name'       => 'updateAccount',
                                                        'parameters' => array($result),
                                                        'logs'       => array('success' => sprintf('SIP account %s@%s has PSTN caller ID set to %s',$key['username'],$key['domain'],$key['username'])
                                                                              )
                                                       )
            
                                    );
                	$this->SOAPEngine->execute($function);

        		}
        	} else if ($action=='prefixtorpid') {
        		$this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);
		        $result     = $this->SOAPEngine->soapclient->getAccount($account);

        		if (PEAR::isError($result)) {
            		$error_msg  = $result->getMessage();
            		$error_fault= $result->getFault();
            		$error_code = $result->getCode();
            		printf ("<font color=red>Error: %s (%s): %s</font>",$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            		break;
        		} else {
                    //print_r($result);
                    // Sanitize data types due to PHP bugs

                    if (!is_array($result->properties))   $result->properties=array();
        			if (!is_array($result->groups)) 	  $result->groups=array();
                    if (is_numeric($sub_action_parameter)) {
                    	$result->rpid=$sub_action_parameter.$result->rpid;
                    } else {
            			printf ("<font color=red>Error: '%s' must be numeric</font>",$sub_action_parameter);
                        continue;
                    }
                    $result->quota         = intval($result->quota);
                    $result->answerTimeout = intval($result->answerTimeout);

                    $function=array('commit'   => array('name'       => 'updateAccount',
                                                        'parameters' => array($result),
                                                        'logs'       => array('success' => sprintf('SIP account %s@%s has PSTN caller ID set to %s ',$key['username'],$key['domain'],$result->rpid)
                                                                              )
                                                       )
            
                                    );
                	$this->SOAPEngine->execute($function);

        		}
        	} else if ($action=='changecustomer' && $this->version > 1) {
        		$this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);
		        $result     = $this->SOAPEngine->soapclient->getAccount($account);

        		if (PEAR::isError($result)) {
            		$error_msg  = $result->getMessage();
            		$error_fault= $result->getFault();
            		$error_code = $result->getCode();
            		printf ("<font color=red>Error: %s (%s): %s</font>",$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            		break;
        		} else {
                    //print_r($result);
                    // Sanitize data types due to PHP bugs

                    if (!is_array($result->properties))   $result->properties=array();
        			if (!is_array($result->groups)) 	  $result->groups=array();
                    if (is_numeric($sub_action_parameter)) {
                    	$result->customer=intval($sub_action_parameter);
                    } else {
            			printf ("<font color=red>Error: '%s' must be numeric</font>",$sub_action_parameter);
                        continue;
                    }
                    $result->quota         = intval($result->quota);
                    $result->answerTimeout = intval($result->answerTimeout);

                    $function=array('commit'   => array('name'       => 'updateAccount',
                                                        'parameters' => array($result),
                                                        'logs'       => array('success' => sprintf('SIP account %s@%s has customer set to %s ',$key['username'],$key['domain'],$result->customer)
                                                                              )
                                                       )
            
                                    );
                	$this->SOAPEngine->execute($function);

        		}
        	} else if ($action=='changeowner') {
        		$this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);
		        $result     = $this->SOAPEngine->soapclient->getAccount($account);

        		if (PEAR::isError($result)) {
            		$error_msg  = $result->getMessage();
            		$error_fault= $result->getFault();
            		$error_code = $result->getCode();
            		printf ("<font color=red>Error: %s (%s): %s</font>",$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            		break;
        		} else {
                    //print_r($result);
                    // Sanitize data types due to PHP bugs

                    if (!is_array($result->properties))   $result->properties=array();
        			if (!is_array($result->groups)) 	  $result->groups=array();
                    if (is_numeric($sub_action_parameter)) {
                    	$result->owner=intval($sub_action_parameter);
                    } else {
            			printf ("<font color=red>Error: '%s' must be numeric</font>",$sub_action_parameter);
                        continue;
                    }
                    $result->quota         = intval($result->quota);
                    $result->answerTimeout = intval($result->answerTimeout);

                    $function=array('commit'   => array('name'       => 'updateAccount',
                                                        'parameters' => array($result),
                                                        'logs'       => array('success' => sprintf('SIP account %s@%s has owner set to %s ',$key['username'],$key['domain'],$result->customer)
                                                                              )
                                                       )
            
                                    );
                	$this->SOAPEngine->execute($function);

        		}
        	} else if ($action=='addbalance') {
            	if (!is_numeric($sub_action_parameter)) {
            		printf ("<font color=red>Error: you must enter a positive balance</font>");
                    break;
                }

        		$this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);
		        $result     = $this->SOAPEngine->soapclient->getAccount($account);

        		if (PEAR::isError($result)) {
            		$error_msg  = $result->getMessage();
            		$error_fault= $result->getFault();
            		$error_code = $result->getCode();
            		printf ("<font color=red>Error: %s (%s): %s</font>",$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            		break;
                }

				if (!$result->prepaid) {
            		printf ("<font color=red>Info: SIP account %s@%s is not prepaid, no action performed</font>",$key['username'],$key['domain']);
                    continue;
                }

                $function=array('commit'   => array('name'       => 'addBalance',
                                                    'parameters' => array($account,$sub_action_parameter),
                                                    'logs'       => array('success' => sprintf('SIP account %s@%s balance has been increased with %s',$key['username'],$key['domain'],$sub_action_parameter)
                                                                          )
                                                   )
        
                                );
                $this->SOAPEngine->execute($function);

            }
        }
        print "</ol>";

    }

}

class SIPAliasesActions extends Actions {
    var $actions=array(
                       'delete'         => 'Delete SIP aliases'
                       );

    function SIPAliases(&$SOAPEngine) {
        $this->Actions(&$SOAPEngine);
    }

    function performActions($selectionKeys,$action,$sub_action_parameter) {
        if (!in_array($action,array_keys($this->actions))) {
            print "<font color=red>Error: Invalid action $action</font>";
        	return false;
        }

        print "<ol>";
        foreach($selectionKeys as $key) {
            print "<li>";
            flush();

            //printf ("Performing action=%s on key=%s",$action,$key);
            $alias=array('username' => $key['username'],
                         'domain'   => $key['domain']
                        );

        	if ($action=='delete') {
    
                $function=array('commit'   => array('name'       => 'deleteAlias',
                                                    'parameters' => array($alias),
                                                    'logs'       => array('success' => sprintf('SIP alias %s@%s has been deleted',$key['username'],$key['domain'])
                                                                          )
                                                   )
        
                                );
    
                //$this->SOAPEngine->execute($function);
            }
        }
        print "</ol>";

    }

}

class ENUMMappingsActions extends Actions {
    var $actions=array(
                       'delete'         => 'Delete ENUM mappings',
                       'changettl'      => 'Change TTL to:',
                       'changeowner'    => 'Change owner to:'
                       );

    var $mapping_fields=array('id'       => 'integer',
                              'type'     => 'text',
                              'mapto'    => 'text',
                              'priority' => 'integer',
                              'ttl'      => 'integer'
                              );

    function ENUMMappingsActions(&$SOAPEngine) {
        $this->Actions(&$SOAPEngine);
    }

    function performActions($selectionKeys,$action,$sub_action_parameter) {
        if (!in_array($action,array_keys($this->actions))) {
            print "<font color=red>Error: Invalid action $action</font>";
        	return false;
        }

        print "<ol>";
        foreach($selectionKeys as $key) {
            flush();
            print "<li>";

            $enum_id=array('number' => $key['number'],
                           'tld'    => $key['tld']
                          );
        	if ($action=='delete') {

                //printf ("Performing action=%s on key=%s",$action,$key);
                $function=array('commit'   => array('name'       => 'deleteNumber',
                                                    'parameters' => array($enum_id),
                                                    'logs'       => array('success' => sprintf('ENUM number +%s under %s has been deleted',$key['number'],$key['tld'])
                                                                          )
                                                   )
        
                                );
    
                $this->SOAPEngine->execute($function);
            } else if ($action  == 'changettl') {
        		$this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);
		        $number     = $this->SOAPEngine->soapclient->getNumber($enum_id);

        		if (PEAR::isError($number)) {
            		$error_msg  = $number->getMessage();
            		$error_fault= $number->getFault();
            		$error_code = $number->getCode();
            		printf ("<font color=red>Error: %s (%s): %s</font>",$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            		break;
        		} else {

                    if (!is_numeric($sub_action_parameter)) {
            			printf ("<font color=red>Error: TTL '%s' must be numeric</font>",$sub_action_parameter);
                        continue;
                    }

                	$new_mappings=array();
                    foreach ($number->mappings as $_mapping) {
                        foreach (array_keys($this->mapping_fields) as $field) {
                            if ($field == 'ttl') {
                            	$new_mapping[$field]=intval($sub_action_parameter);
                            } else {
                                if ($this->mapping_fields[$field] == 'integer') {
                                    $new_mapping[$field]=intval($_mapping->$field);
                                } else {
                                    $new_mapping[$field]=$_mapping->$field;
                                }
                            }

                        }

        				$new_mappings[]=$new_mapping;
        			}

            		$number->mappings=$new_mappings;

                    $function=array('commit'   => array('name'       => 'updateNumber',
                                                        'parameters' => array($number),
                                                        'logs'       => array('success' => sprintf('ENUM number %s@%s has now TTL %d',$key['number'],$key['tld'],intval($sub_action_parameter))
                                                                              )
                                                       )
            
                                    );
                	$this->SOAPEngine->execute($function);
        		}
            } else if ($action  == 'changeowner') {
        		$this->SOAPEngine->soapclient->addHeader($this->SOAPEngine->SoapAuth);
		        $number     = $this->SOAPEngine->soapclient->getNumber($enum_id);

        		if (PEAR::isError($number)) {
            		$error_msg  = $number->getMessage();
            		$error_fault= $number->getFault();
            		$error_code = $number->getCode();
            		printf ("<font color=red>Error: %s (%s): %s</font>",$error_msg, $error_fault->detail->exception->errorcode,$error_fault->detail->exception->errorstring);
            		break;
        		} else {
                	$new_mappings=array();
                    foreach ($number->mappings as $_mapping) {
        				$new_mappings[]=$_mapping;
        			}

            		$number->mappings=$new_mappings;

                    if (is_numeric($sub_action_parameter)) {
                    	$number->owner=intval($sub_action_parameter);
                    } else {
            			printf ("<font color=red>Error: Owner '%s' must be numeric</font>",$sub_action_parameter);
                        continue;
                    }

                    $function=array('commit'   => array('name'       => 'updateNumber',
                                                        'parameters' => array($number),
                                                        'logs'       => array('success' => sprintf('ENUM number %s@%s has owner set to  %d',$key['number'],$key['tld'],intval($sub_action_parameter))
                                                                              )
                                                       )
                                    );
                	$this->SOAPEngine->execute($function);
        		}
            }
        }

        print "</ol>";
    }
}

class CustomersActions extends Actions {
    var $actions=array(
                       'delete'         => 'Delete customers'
                       );

    function CustomerActions(&$SOAPEngine) {
        $this->Actions(&$SOAPEngine);
    }

    function performActions($selectionKeys,$action,$sub_action_parameter) {

        if (!in_array($action,array_keys($this->actions))) {
            print "<font color=red>Error: Invalid action $action</font>";
        	return false;
        }

        print "<ol>";

        foreach($selectionKeys as $key) {
            flush();
            print "<li>";

        	if ($action=='delete') {
		        $function=array('commit'  => array('name'       => 'deleteAccount',
             		                               'parameters' => intval($key),
                    	                           'logs'       => array('success' => sprintf('Customer id %s has been deleted',$key)))
        	            	    );

                $this->SOAPEngine->execute($function);
            }
        }

        print "</ol>";
    }
}

?>
