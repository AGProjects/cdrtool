<?
// This library can be used to display the status of mysql replication of
// arbitrary number of mysql servers and instructions about how to fix
// a broken replication process

/*

To use this library create a web page like this:

$hostnames=array("db1"=>array('ip'       => '10.0.0.131',
                              'slave_of' => 'db2',
                              'user'     => 'root',
                              'password' => 'pass'
                                  ),
                 "db2"=>array('ip'       => '10.0.0.132',
                              'slave_of' => 'db1'
                              'user'     => 'root',
                              'password' => 'pass'
                              )
                 );


require("mysql_replication_lib.phtml");

$ReplicationOverview = new ReplicationOverview($hostnames);
$ReplicationOverview->showOverview();

*/


class DBx extends DB_Sql {
  function DBx($host='localhost', $user, $password) {
      $this->Host = $host;
      $this->User = $user;
      $this->Password = $password;
      $this->Database = 'mysql';
      parent::DB_Sql();
  }
}

class MySQLReplicationStatus {
	var $slave_status_query="show slave status";
    var $master_status_query="show master status";

    function MySQLReplicationStatus($host,$hostnames) {

        $db=new DBx ($host,$hostnames[$host]['user'],$hostnames[$host]['password']);

        $db->query($this->slave_status_query);
		$db->next_record();

        $this->slave_master         = $db->f('Master_Host');
        $this->slave_user           = $db->f('Master_User');
        $this->slave_master_port    = $db->f('Master_Port');
        $this->slave_log_file	    = $db->f('Master_Log_File');
        $this->slave_position       = $db->f('Read_Master_Log_Pos');
        $this->slave_sql_running	= $db->f('Slave_SQL_Running');
        $this->slave_io_running	    = $db->f('Slave_IO_Running');
        $this->slave_last_errno	    = $db->f('Last_Errno');
        $this->slave_last_error 	= $db->f('Last_Error');
        $this->slave_seconds_behind = $db->f('Seconds_Behind_Master');

        $db->query($this->master_status_query);
		$db->next_record();

    	$this->master_position	    = $db->f('Position');
    	$this->master_log_file	    = $db->f('File');

    }
}


class ReplicationOverview {
    var $status=array();

    function ReplicationOverview($hostnames=array()) {
    	$this->hostnames=$hostnames;
        $this->host = $_REQUEST['repair'];

        foreach (array_keys($this->hostnames) as $key) {
            $this->status[$key]= new MySQLReplicationStatus($key,$this->hostnames);
        }

        foreach (array_keys($this->hostnames) as $key) {
            if ($key==$this->host) {
                $this->master_hostname=$this->hostnames[$key]['slave_of'];
                $this->master_ip=$this->hostnames[$this->master_hostname]['ip'];
                $this->master=$this->hostnames[$key]['slave_of'];
                break;
            }
        }

        foreach (array_keys($this->hostnames) as $key) {
        	if ($this->hostnames[$key]['slave_of'] == $this->master && $key!=$this->host) {
                $this->slave_ip=$this->hostnames[$key]['ip'];
                $this->slave_hostname =$key;
                break;
            }
        }
    }

    function showOverview() {

        print "
        <table border=0>
        <tr>
        <th></th>
        ";
        
        foreach (array_keys($this->hostnames) as $key) {
            printf ("<th>%s (%s)",$key,$this->hostnames[$key]['ip']);
            if ($this->host != $key) {
            	printf ("<br><a href=%s?repair=%s>Click to learn how to repair me</a></th>",$_SERVER['PHP_SELF'],$key);
            }
        }
        
        print "</tr>
        ";

        print "<tr>
        <td></td>";
        
        foreach (array_keys($this->hostnames) as $key) {
            print "<td class=border valign=top>";
        
            print "
            <table>
            <tr>
            <td>Slave status</td><td>Master status</td></tr>
            ";
            print "<tr>";
            print "
            <td valign=top>
            ";
        
            if ($this->status[$key]->slave_sql_running == 'No') {
                $sql_color="red";
            } else {
                $sql_color="white";
            }
        
            if ($this->status[$key]->slave_io_running == 'No') {
                $io_color="red";
            } else {
                $io_color="white";
            }
        
            print "<table border=1>";
            printf ("<tr><td class=border>Master host</td><td>%s</td></tr>",$this->status[$key]->slave_master);
            printf ("<tr><td class=border>Master port</td><td>%s</td></tr>",$this->status[$key]->slave_master_port);
            printf ("<tr><td class=border>Log file</td><td>%s</td></tr>",$this->status[$key]->slave_log_file);
            printf ("<tr><td class=border>Position</td><td>%s</td></tr>",$this->status[$key]->slave_position);
            printf ("<tr><td class=border>SQL thread</td><td bgcolor=%s>%s</td></tr>",$sql_color,$this->status[$key]->slave_sql_running);
            printf ("<tr><td class=border>IO thread</td><td bgcolor=%s>%s</td></tr>",$io_color,$this->status[$key]->slave_io_running);
            printf ("<tr><td class=border>Delay</td><td>%s</td></tr>",$this->status[$key]->slave_seconds_behind);
            printf ("<tr><td class=border>Last error</td><td>%s</td></tr>",$this->status[$key]->slave_last_error);
            printf ("<tr><td class=border>Last errno</td><td>%s</td></tr>",$this->status[$key]->slave_last_errno);
            print "</table>";
            print "
            </td>
            ";
        
            print "
            <td valign=top>
            ";
            print "<table border=1>";
            printf ("<tr><td class=border>Log file</td><td>%s</td></tr>",$this->status[$key]->master_log_file);
            printf ("<tr><td class=border>Position</td><td>%s</td></tr>",$this->status[$key]->master_position);
            print "</table>";
        
            print "
            </td>
            </table>
            ";
        
            print "</td>";
        }
        
        print "</tr>";

 		$this->printInstructions();

        print "
        </table>
        ";
 }

    function printStep ($hostname,$instructions='') {
        $this->step++;
        print "<tr>
        <td>$this->step
        </td>";

        foreach (array_keys($this->hostnames) as $key) {
            if ($key==$hostname) {
                print "<td class=border><pre>$instructions</pre></td>";
            } else {
                print "<td class=border></td>";
            }
        }
        print "</tr>";

    }

    function printInstructions() {

    if (!$this->host) return;

if ($this->slave_hostname) {

$text=sprintf("
mysql -u root -P

flush tables with read lock;

show master status;

# write down the file and possition %s.file %s.pos
# do not exit the mysql console

",$this->master_hostname,$this->master_hostname);

$this->printStep($this->master_hostname,$text);

$text=sprintf("

mysql -u root -P

show slave status;
# wait until same file/pos as %s is displayed)

slave stop;
",$this->master_hostname);

$this->printStep($this->slave_hostname,$text);

$text="unlock tables;";

$this->printStep($this->master_hostname,$text);


$text="

/etc/init.d/monit stop

/etc/init.d/mysql stop

";

$this->printStep($this->slave_hostname,$text);

$text="

/etc/init.d/monit stop

/etc/init.d/mysql stop

";

$this->printStep($this->host,$text);

$text=sprintf("
rsync -avzP --delete /var/lib/mysql %s:/var/lib/

/etc/init.d/mysql start

/etc/init.d/monit start
",$this->host);

$this->printStep($this->slave_hostname,$text);


$text=sprintf("
(cd /var/lib/mysql/; rm *.info *relay-bin*)

/etc/init.d/mysql start

/etc/init.d/monit start

mysql -u root -P

show master status;
# write down the file and possition %s.file %s.pos

CHANGE MASTER TO MASTER_HOST='%s',
MASTER_USER='%s',
MASTER_PASSWORD='%s',
MASTER_LOG_FILE='%s.file',
MASTER_LOG_POS=%s.pos;

slave start;

",$this->host,
$this->host,
$this->master_ip,
$this->hostnames[$this->master_hostname]['replication_user'],
$this->hostnames[$this->master_hostname]['replication_password'],
$this->master_hostname,
$this->master_hostname
);
$this->printStep($this->host,$text);

$text=sprintf("

mysql -u root -P

stop slave;

CHANGE MASTER TO MASTER_HOST='%s',
MASTER_USER='%s',
MASTER_PASSWORD='%s',
MASTER_LOG_FILE='%s.file',
MASTER_LOG_POS=%s.pos;

slave start;
",
$this->hostnames[$this->host]['ip'],
$this->hostnames[$this->host]['replication_user'],
$this->hostnames[$this->host]['replication_password'],
$this->host,
$this->host
);

$this->printStep($this->master_hostname,$text);

    } else {


$text="

/etc/init.d/monit stop

/etc/init.d/mysql stop

";

$this->printStep($this->host,$text);


$text=sprintf("

mysql -u root -P

flush tables with read lock;

show master status;
# write down the file and possition %s.file %s.pos

unlock tables;

/etc/init.d/monit stop

/etc/init.d/mysql stop

rsync -avzP --delete /var/lib/mysql %s:/var/lib/

/etc/init.d/mysql start

/etc/init.d/monit start

",
$this->master_hostname,
$this->master_hostname,
$this->host
);

$this->printStep($this->master_hostname,$text);

$text=sprintf("
(cd /var/lib/mysql/; rm *.info *relay-bin*)

/etc/init.d/mysql start

/etc/init.d/monit start

mysql -u root -P

show master status;
# write down the file and possition %s.file %s.pos

CHANGE MASTER TO MASTER_HOST='%s',
MASTER_USER='%s',
MASTER_PASSWORD='%s',
MASTER_LOG_FILE='%s.file',
MASTER_LOG_POS=%s.pos;

slave start;

",$this->host,
$this->host,
$this->master_ip,
$this->hostnames[$this->master_hostname]['replication_user'],
$this->hostnames[$this->master_hostname]['replication_password'],
$this->master_hostname,
$this->master_hostname
);
$this->printStep($this->host,$text);

$text=sprintf("

mysql -u root -P

stop slave;

CHANGE MASTER TO MASTER_HOST='%s',
MASTER_USER='%s',
MASTER_PASSWORD='%s',
MASTER_LOG_FILE='%s.file',
MASTER_LOG_POS=%s.pos;

slave start;
",
$this->hostnames[$this->host]['ip'],
$this->hostnames[$this->host]['replication_user'],
$this->hostnames[$this->host]['replication_password'],
$this->host,
$this->host
);

$this->printStep($this->master_hostname,$text);

    }
}
}
?>
